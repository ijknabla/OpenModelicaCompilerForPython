<?xml version='1.0' encoding='UTF-8'?>
<omcInterface omcVersion="OMCompiler v1.14.0">
  <classes>
    <package id="OpenModelica.Scripting">
      <classes>
        <record id="OpenModelica.Scripting.CheckSettingsResult">
          <classes/>
          <code interfaceOnly="false">record CheckSettingsResult
  String OPENMODELICAHOME, OPENMODELICALIBRARY, OMC_PATH, SYSTEM_PATH, OMDEV_PATH;
  Boolean OMC_FOUND;
  String MODELICAUSERCFLAGS, WORKING_DIRECTORY;
  Boolean CREATE_FILE_WORKS, REMOVE_FILE_WORKS;
  String OS, SYSTEM_INFO, SENDDATALIBS, C_COMPILER, C_COMPILER_VERSION;
  Boolean C_COMPILER_RESPONDING, HAVE_CORBA;
  String CONFIGURE_CMDLINE;
  annotation(
    preferredView = "text");
end CheckSettingsResult;</code>
          <components>
            <elements>
              <element className="String" name="OPENMODELICAHOME" comment="">
                <dimensions/>
              </element>
              <element className="String" name="OPENMODELICALIBRARY" comment="">
                <dimensions/>
              </element>
              <element className="String" name="OMC_PATH" comment="">
                <dimensions/>
              </element>
              <element className="String" name="SYSTEM_PATH" comment="">
                <dimensions/>
              </element>
              <element className="String" name="OMDEV_PATH" comment="">
                <dimensions/>
              </element>
              <element className="Boolean" name="OMC_FOUND" comment="">
                <dimensions/>
              </element>
              <element className="String" name="MODELICAUSERCFLAGS" comment="">
                <dimensions/>
              </element>
              <element className="String" name="WORKING_DIRECTORY" comment="">
                <dimensions/>
              </element>
              <element className="Boolean" name="CREATE_FILE_WORKS" comment="">
                <dimensions/>
              </element>
              <element className="Boolean" name="REMOVE_FILE_WORKS" comment="">
                <dimensions/>
              </element>
              <element className="String" name="OS" comment="">
                <dimensions/>
              </element>
              <element className="String" name="SYSTEM_INFO" comment="">
                <dimensions/>
              </element>
              <element className="String" name="SENDDATALIBS" comment="">
                <dimensions/>
              </element>
              <element className="String" name="C_COMPILER" comment="">
                <dimensions/>
              </element>
              <element className="String" name="C_COMPILER_VERSION" comment="">
                <dimensions/>
              </element>
              <element className="Boolean" name="C_COMPILER_RESPONDING" comment="">
                <dimensions/>
              </element>
              <element className="Boolean" name="HAVE_CORBA" comment="">
                <dimensions/>
              </element>
              <element className="String" name="CONFIGURE_CMDLINE" comment="">
                <dimensions/>
              </element>
            </elements>
          </components>
        </record>
        <package id="OpenModelica.Scripting.Internal">
          <classes>
            <package id="OpenModelica.Scripting.Internal.Time">
              <classes>
                <function id="OpenModelica.Scripting.Internal.Time.readableTime">
                  <classes/>
                  <code interfaceOnly="true">function readableTime
  input Real sec;
  output String str;
end readableTime;</code>
                  <components>
                    <arguments>
                      <argument inputOutput="input" className="Real" name="sec" hasDefault="false" comment="">
                        <dimensions/>
                      </argument>
                      <argument inputOutput="output" className="String" name="str" hasDefault="false" comment="">
                        <dimensions/>
                      </argument>
                    </arguments>
                  </components>
                </function>
                <function id="OpenModelica.Scripting.Internal.Time.timerTick">
                  <classes/>
                  <code interfaceOnly="true">function timerTick
  input Integer index;
end timerTick;</code>
                  <components>
                    <arguments>
                      <argument inputOutput="input" className="Integer" name="index" hasDefault="false" comment="">
                        <dimensions/>
                      </argument>
                    </arguments>
                  </components>
                </function>
                <function id="OpenModelica.Scripting.Internal.Time.timerTock">
                  <classes/>
                  <code interfaceOnly="true">function timerTock
  input Integer index;
  output Real elapsed;
end timerTock;</code>
                  <components>
                    <arguments>
                      <argument inputOutput="input" className="Integer" name="index" hasDefault="false" comment="">
                        <dimensions/>
                      </argument>
                      <argument inputOutput="output" className="Real" name="elapsed" hasDefault="false" comment="">
                        <dimensions/>
                      </argument>
                    </arguments>
                  </components>
                </function>
                <function id="OpenModelica.Scripting.Internal.Time.timerClear">
                  <classes/>
                  <code interfaceOnly="true">function timerClear
  input Integer index;
end timerClear;</code>
                  <components>
                    <arguments>
                      <argument inputOutput="input" className="Integer" name="index" hasDefault="false" comment="">
                        <dimensions/>
                      </argument>
                    </arguments>
                  </components>
                </function>
              </classes>
            </package>
            <type id="OpenModelica.Scripting.Internal.FileType">
              <classes/>
              <code interfaceOnly="false">type FileType = enumeration(NoFile, RegularFile, Directory, SpecialFile);</code>
              <components>
                <enumerators>
                  <enumerator name="NoFile" comment=""/>
                  <enumerator name="RegularFile" comment=""/>
                  <enumerator name="Directory" comment=""/>
                  <enumerator name="SpecialFile" comment=""/>
                </enumerators>
              </components>
            </type>
            <function id="OpenModelica.Scripting.Internal.stat">
              <classes/>
              <code interfaceOnly="true">function stat
  input String name;
  output FileType fileType;
end stat;</code>
              <components>
                <arguments>
                  <argument inputOutput="input" className="String" name="name" hasDefault="false" comment="">
                    <dimensions/>
                  </argument>
                  <argument inputOutput="output" className="OpenModelica.Scripting.Internal.FileType" name="fileType" hasDefault="false" comment="">
                    <dimensions/>
                  </argument>
                </arguments>
              </components>
            </function>
          </classes>
        </package>
        <function id="OpenModelica.Scripting.checkSettings">
          <classes/>
          <code interfaceOnly="true">function checkSettings
  output CheckSettingsResult result;
end checkSettings;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="OpenModelica.Scripting.CheckSettingsResult" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.loadFile">
          <classes/>
          <code interfaceOnly="true">function loadFile
  input String fileName;
  input String encoding = "UTF-8";
  input Boolean uses = true;
  output Boolean success;
end loadFile;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="encoding" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="uses" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.loadFiles">
          <classes/>
          <code interfaceOnly="true">function loadFiles
  input String[:] fileNames;
  input String encoding = "UTF-8";
  input Integer numThreads = OpenModelica.Scripting.numProcessors();
  output Boolean success;
end loadFiles;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileNames" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
              <argument inputOutput="input" className="String" name="encoding" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="numThreads" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.parseEncryptedPackage">
          <classes/>
          <code interfaceOnly="true">function parseEncryptedPackage
  input String fileName;
  input String workdir = "&lt;default&gt;" "The output directory for imported encrypted files. &lt;default&gt; will put the files to current working directory.";
  output TypeName names[:];
end parseEncryptedPackage;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="workdir" hasDefault="true" comment="The output directory for imported encrypted files. &lt;default&gt; will put the files to current working directory.">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="OpenModelica.$Code.TypeName" name="names" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.loadEncryptedPackage">
          <classes/>
          <code interfaceOnly="true">function loadEncryptedPackage
  input String fileName;
  input String workdir = "&lt;default&gt;" "The output directory for imported encrypted files. &lt;default&gt; will put the files to current working directory.";
  output Boolean success;
end loadEncryptedPackage;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="workdir" hasDefault="true" comment="The output directory for imported encrypted files. &lt;default&gt; will put the files to current working directory.">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.reloadClass">
          <classes/>
          <code interfaceOnly="true">function reloadClass
  input TypeName name;
  input String encoding = "UTF-8";
  output Boolean success;
end reloadClass;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="name" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="encoding" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.loadString">
          <classes/>
          <code interfaceOnly="true">function loadString
  input String data;
  input String filename = "&lt;interactive&gt;";
  input String encoding = "UTF-8";
  input Boolean merge = false "if merge is true the parsed AST is merged with the existing AST, default to false which means that is replaced, not merged";
  output Boolean success;
end loadString;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="data" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="filename" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="encoding" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="merge" hasDefault="true" comment="if merge is true the parsed AST is merged with the existing AST, default to false which means that is replaced, not merged">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.parseString">
          <classes/>
          <code interfaceOnly="true">function parseString
  input String data;
  input String filename = "&lt;interactive&gt;";
  output TypeName names[:];
end parseString;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="data" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="filename" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="OpenModelica.$Code.TypeName" name="names" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.parseFile">
          <classes/>
          <code interfaceOnly="true">function parseFile
  input String filename;
  input String encoding = "UTF-8";
  output TypeName names[:];
end parseFile;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="filename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="encoding" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="OpenModelica.$Code.TypeName" name="names" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.loadFileInteractiveQualified">
          <classes/>
          <code interfaceOnly="true">function loadFileInteractiveQualified
  input String filename;
  input String encoding = "UTF-8";
  output TypeName names[:];
end loadFileInteractiveQualified;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="filename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="encoding" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="OpenModelica.$Code.TypeName" name="names" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.loadFileInteractive">
          <classes/>
          <code interfaceOnly="true">function loadFileInteractive
  input String filename;
  input String encoding = "UTF-8";
  output TypeName names[:];
end loadFileInteractive;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="filename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="encoding" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="OpenModelica.$Code.TypeName" name="names" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.system">
          <classes/>
          <code interfaceOnly="true">impure function system
  input String callStr "String to call: sh -c $callStr";
  input String outputFile = "" "The output is redirected to this file (unless already done by callStr)";
  output Integer retval "Return value of the system call; usually 0 on success";
end system;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="callStr" hasDefault="false" comment="String to call: sh -c $callStr">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="outputFile" hasDefault="true" comment="The output is redirected to this file (unless already done by callStr)">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="retval" hasDefault="false" comment="Return value of the system call; usually 0 on success">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.system_parallel">
          <classes/>
          <code interfaceOnly="true">impure function system_parallel
  input String callStr[:] "String to call: sh -c $callStr";
  input Integer numThreads = numProcessors();
  output Integer retval[:] "Return value of the system call; usually 0 on success";
end system_parallel;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="callStr" hasDefault="false" comment="String to call: sh -c $callStr">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
              <argument inputOutput="input" className="Integer" name="numThreads" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="retval" hasDefault="false" comment="Return value of the system call; usually 0 on success">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.saveAll">
          <classes/>
          <code interfaceOnly="true">function saveAll
  input String fileName;
  output Boolean success;
end saveAll;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.help">
          <classes/>
          <code interfaceOnly="true">function help
  input String topic = "topics";
  output String helpText;
end help;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="topic" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="helpText" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.clear">
          <classes/>
          <code interfaceOnly="true">function clear
  output Boolean success;
end clear;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.clearProgram">
          <classes/>
          <code interfaceOnly="true">function clearProgram
  output Boolean success;
end clearProgram;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.clearVariables">
          <classes/>
          <code interfaceOnly="true">function clearVariables
  output Boolean success;
end clearVariables;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.generateHeader">
          <classes/>
          <code interfaceOnly="true">function generateHeader
  input String fileName;
  output Boolean success;
end generateHeader;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.generateJuliaHeader">
          <classes/>
          <code interfaceOnly="true">function generateJuliaHeader
  input String fileName;
  output Boolean success;
end generateJuliaHeader;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.generateSeparateCode">
          <classes/>
          <code interfaceOnly="true">function generateSeparateCode
  input TypeName className;
  input Boolean cleanCache = false "If true, the cache is reset between each generated package. This conserves memory at the cost of speed.";
  output Boolean success;
end generateSeparateCode;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="cleanCache" hasDefault="true" comment="If true, the cache is reset between each generated package. This conserves memory at the cost of speed.">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.generateSeparateCodeDependencies">
          <classes/>
          <code interfaceOnly="true">function generateSeparateCodeDependencies
  input String stampSuffix = ".c" "Suffix to add to dependencies (often .c.stamp)";
  output String[:] dependencies;
end generateSeparateCodeDependencies;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="stampSuffix" hasDefault="true" comment="Suffix to add to dependencies (often .c.stamp)">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="dependencies" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.generateSeparateCodeDependenciesMakefile">
          <classes/>
          <code interfaceOnly="true">function generateSeparateCodeDependenciesMakefile
  input String filename "The file to write the makefile to";
  input String directory = "" "The relative path of the generated files";
  input String suffix = ".c" "Often .stamp since we do not update all the files";
  output Boolean success;
end generateSeparateCodeDependenciesMakefile;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="filename" hasDefault="false" comment="The file to write the makefile to">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="directory" hasDefault="true" comment="The relative path of the generated files">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="suffix" hasDefault="true" comment="Often .stamp since we do not update all the files">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getLinker">
          <classes/>
          <code interfaceOnly="true">function getLinker
  output String linker;
end getLinker;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="linker" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setLinker">
          <classes/>
          <code interfaceOnly="true">function setLinker
  input String linker;
  output Boolean success;
end setLinker;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="linker" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getLinkerFlags">
          <classes/>
          <code interfaceOnly="true">function getLinkerFlags
  output String linkerFlags;
end getLinkerFlags;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="linkerFlags" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setLinkerFlags">
          <classes/>
          <code interfaceOnly="true">function setLinkerFlags
  input String linkerFlags;
  output Boolean success;
end setLinkerFlags;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="linkerFlags" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getCompiler">
          <classes/>
          <code interfaceOnly="true">function getCompiler
  output String compiler;
end getCompiler;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="compiler" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setCompiler">
          <classes/>
          <code interfaceOnly="true">function setCompiler
  input String compiler;
  output Boolean success;
end setCompiler;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="compiler" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setCFlags">
          <classes/>
          <code interfaceOnly="true">function setCFlags
  input String inString;
  output Boolean success;
end setCFlags;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="inString" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getCFlags">
          <classes/>
          <code interfaceOnly="true">function getCFlags
  output String outString;
end getCFlags;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="outString" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getCXXCompiler">
          <classes/>
          <code interfaceOnly="true">function getCXXCompiler
  output String compiler;
end getCXXCompiler;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="compiler" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setCXXCompiler">
          <classes/>
          <code interfaceOnly="true">function setCXXCompiler
  input String compiler;
  output Boolean success;
end setCXXCompiler;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="compiler" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.verifyCompiler">
          <classes/>
          <code interfaceOnly="true">function verifyCompiler
  output Boolean compilerWorks;
end verifyCompiler;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Boolean" name="compilerWorks" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setCompilerPath">
          <classes/>
          <code interfaceOnly="true">function setCompilerPath
  input String compilerPath;
  output Boolean success;
end setCompilerPath;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="compilerPath" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getCompileCommand">
          <classes/>
          <code interfaceOnly="true">function getCompileCommand
  output String compileCommand;
end getCompileCommand;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="compileCommand" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setCompileCommand">
          <classes/>
          <code interfaceOnly="true">function setCompileCommand
  input String compileCommand;
  output Boolean success;
end setCompileCommand;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="compileCommand" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setPlotCommand">
          <classes/>
          <code interfaceOnly="true">function setPlotCommand
  input String plotCommand;
  output Boolean success;
end setPlotCommand;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="plotCommand" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getSettings">
          <classes/>
          <code interfaceOnly="true">function getSettings
  output String settings;
end getSettings;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="settings" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setTempDirectoryPath">
          <classes/>
          <code interfaceOnly="true">function setTempDirectoryPath
  input String tempDirectoryPath;
  output Boolean success;
end setTempDirectoryPath;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="tempDirectoryPath" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getTempDirectoryPath">
          <classes/>
          <code interfaceOnly="true">function getTempDirectoryPath
  output String tempDirectoryPath;
end getTempDirectoryPath;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="tempDirectoryPath" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getEnvironmentVar">
          <classes/>
          <code interfaceOnly="true">function getEnvironmentVar
  input String var;
  output String value "returns empty string on failure";
end getEnvironmentVar;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="var" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="value" hasDefault="false" comment="returns empty string on failure">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setEnvironmentVar">
          <classes/>
          <code interfaceOnly="true">function setEnvironmentVar
  input String var;
  input String value;
  output Boolean success;
end setEnvironmentVar;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="var" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="value" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.appendEnvironmentVar">
          <classes/>
          <code interfaceOnly="true">function appendEnvironmentVar
  input String var;
  input String value;
  output String result "returns \"error\" if the variable could not be appended";
end appendEnvironmentVar;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="var" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="value" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="returns \&quot;error\&quot; if the variable could not be appended">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setInstallationDirectoryPath">
          <classes/>
          <code interfaceOnly="true">function setInstallationDirectoryPath
  input String installationDirectoryPath;
  output Boolean success;
end setInstallationDirectoryPath;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="installationDirectoryPath" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getInstallationDirectoryPath">
          <classes/>
          <code interfaceOnly="true">function getInstallationDirectoryPath
  output String installationDirectoryPath;
end getInstallationDirectoryPath;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="installationDirectoryPath" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setModelicaPath">
          <classes/>
          <code interfaceOnly="true">function setModelicaPath
  input String modelicaPath;
  output Boolean success;
end setModelicaPath;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="modelicaPath" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getModelicaPath">
          <classes/>
          <code interfaceOnly="true">function getModelicaPath
  output String modelicaPath;
end getModelicaPath;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="modelicaPath" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setCompilerFlags">
          <classes/>
          <code interfaceOnly="true">function setCompilerFlags
  input String compilerFlags;
  output Boolean success;
end setCompilerFlags;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="compilerFlags" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.enableNewInstantiation">
          <classes/>
          <code interfaceOnly="true">function enableNewInstantiation
  output Boolean success;
end enableNewInstantiation;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.disableNewInstantiation">
          <classes/>
          <code interfaceOnly="true">function disableNewInstantiation
  output Boolean success;
end disableNewInstantiation;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setDebugFlags">
          <classes/>
          <code interfaceOnly="true">function setDebugFlags
  input String debugFlags;
  output Boolean success;
end setDebugFlags;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="debugFlags" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.clearDebugFlags">
          <classes/>
          <code interfaceOnly="true">function clearDebugFlags
  output Boolean success;
end clearDebugFlags;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setPreOptModules">
          <classes/>
          <code interfaceOnly="true">function setPreOptModules
  input String modules;
  output Boolean success;
end setPreOptModules;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="modules" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setCheapMatchingAlgorithm">
          <classes/>
          <code interfaceOnly="true">function setCheapMatchingAlgorithm
  input Integer matchingAlgorithm;
  output Boolean success;
end setCheapMatchingAlgorithm;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="Integer" name="matchingAlgorithm" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getMatchingAlgorithm">
          <classes/>
          <code interfaceOnly="true">function getMatchingAlgorithm
  output String selected;
end getMatchingAlgorithm;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="selected" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getAvailableMatchingAlgorithms">
          <classes/>
          <code interfaceOnly="true">function getAvailableMatchingAlgorithms
  output String[:] allChoices;
  output String[:] allComments;
end getAvailableMatchingAlgorithms;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="allChoices" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
              <argument inputOutput="output" className="String" name="allComments" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setMatchingAlgorithm">
          <classes/>
          <code interfaceOnly="true">function setMatchingAlgorithm
  input String matchingAlgorithm;
  output Boolean success;
end setMatchingAlgorithm;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="matchingAlgorithm" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getIndexReductionMethod">
          <classes/>
          <code interfaceOnly="true">function getIndexReductionMethod
  output String selected;
end getIndexReductionMethod;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="selected" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getAvailableIndexReductionMethods">
          <classes/>
          <code interfaceOnly="true">function getAvailableIndexReductionMethods
  output String[:] allChoices;
  output String[:] allComments;
end getAvailableIndexReductionMethods;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="allChoices" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
              <argument inputOutput="output" className="String" name="allComments" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setIndexReductionMethod">
          <classes/>
          <code interfaceOnly="true">function setIndexReductionMethod
  input String method;
  output Boolean success;
end setIndexReductionMethod;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="method" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setPostOptModules">
          <classes/>
          <code interfaceOnly="true">function setPostOptModules
  input String modules;
  output Boolean success;
end setPostOptModules;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="modules" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getTearingMethod">
          <classes/>
          <code interfaceOnly="true">function getTearingMethod
  output String selected;
end getTearingMethod;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="selected" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getAvailableTearingMethods">
          <classes/>
          <code interfaceOnly="true">function getAvailableTearingMethods
  output String[:] allChoices;
  output String[:] allComments;
end getAvailableTearingMethods;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="allChoices" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
              <argument inputOutput="output" className="String" name="allComments" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setTearingMethod">
          <classes/>
          <code interfaceOnly="true">function setTearingMethod
  input String tearingMethod;
  output Boolean success;
end setTearingMethod;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="tearingMethod" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setCommandLineOptions">
          <classes/>
          <code interfaceOnly="true">function setCommandLineOptions
  input String option;
  output Boolean success;
end setCommandLineOptions;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="option" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getCommandLineOptions">
          <classes/>
          <code interfaceOnly="true">function getCommandLineOptions
  output String[:] flags;
end getCommandLineOptions;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="flags" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getConfigFlagValidOptions">
          <classes/>
          <code interfaceOnly="true">function getConfigFlagValidOptions
  input String flag;
  output String validOptions[:];
  output String mainDescription;
  output String descriptions[:];
end getConfigFlagValidOptions;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="flag" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="validOptions" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
              <argument inputOutput="output" className="String" name="mainDescription" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="descriptions" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.clearCommandLineOptions">
          <classes/>
          <code interfaceOnly="true">function clearCommandLineOptions
  output Boolean success;
end clearCommandLineOptions;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getVersion">
          <classes/>
          <code interfaceOnly="true">function getVersion
  input TypeName cl = $Code(OpenModelica);
  output String version;
end getVersion;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="version" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.regularFileExists">
          <classes/>
          <code interfaceOnly="true">function regularFileExists
  input String fileName;
  output Boolean exists;
end regularFileExists;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="exists" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.directoryExists">
          <classes/>
          <code interfaceOnly="true">function directoryExists
  input String dirName;
  output Boolean exists;
end directoryExists;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="dirName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="exists" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.stat">
          <classes/>
          <code interfaceOnly="true">impure function stat
  input String fileName;
  output Boolean success;
  output Real fileSize;
  output Real mtime;
end stat;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="fileSize" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="mtime" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.readFile">
          <classes/>
          <code interfaceOnly="true">impure function readFile
  input String fileName;
  output String contents;
end readFile;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="contents" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.writeFile">
          <classes/>
          <code interfaceOnly="true">impure function writeFile
  input String fileName;
  input String data;
  input Boolean append = false;
  output Boolean success;
end writeFile;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="data" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="append" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.compareFilesAndMove">
          <classes/>
          <code interfaceOnly="true">impure function compareFilesAndMove
  input String newFile;
  input String oldFile;
  output Boolean success;
end compareFilesAndMove;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="newFile" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="oldFile" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.compareFiles">
          <classes/>
          <code interfaceOnly="true">impure function compareFiles
  input String file1;
  input String file2;
  output Boolean isEqual;
end compareFiles;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="file1" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="file2" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="isEqual" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.alarm">
          <classes/>
          <code interfaceOnly="true">impure function alarm
  input Integer seconds;
  output Integer previousSeconds;
end alarm;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="Integer" name="seconds" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="previousSeconds" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.regex">
          <classes/>
          <code interfaceOnly="true">function regex
  input String str;
  input String re;
  input Integer maxMatches = 1 "The maximum number of matches that will be returned";
  input Boolean extended = true "Use POSIX extended or regular syntax";
  input Boolean caseInsensitive = false;
  output Integer numMatches "-1 is an error, 0 means no match, else returns a number 1..maxMatches";
  output String matchedSubstrings[maxMatches] "unmatched strings are returned as empty";
end regex;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="str" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="re" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="maxMatches" hasDefault="true" comment="The maximum number of matches that will be returned">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="extended" hasDefault="true" comment="Use POSIX extended or regular syntax">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="caseInsensitive" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="numMatches" hasDefault="false" comment="-1 is an error, 0 means no match, else returns a number 1..maxMatches">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="matchedSubstrings" hasDefault="false" comment="unmatched strings are returned as empty">
                <dimensions>
                  <dimension size="maxMatches"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.regexBool">
          <classes/>
          <code interfaceOnly="true">function regexBool
  input String str;
  input String re;
  input Boolean extended = true "Use POSIX extended or regular syntax";
  input Boolean caseInsensitive = false;
  output Boolean matches;
end regexBool;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="str" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="re" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="extended" hasDefault="true" comment="Use POSIX extended or regular syntax">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="caseInsensitive" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="matches" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.testsuiteFriendlyName">
          <classes/>
          <code interfaceOnly="true">function testsuiteFriendlyName
  input String path;
  output String fixed;
end testsuiteFriendlyName;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="path" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="fixed" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.readFileNoNumeric">
          <classes/>
          <code interfaceOnly="true">function readFileNoNumeric
  input String fileName;
  output String contents;
end readFileNoNumeric;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="contents" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getErrorString">
          <classes/>
          <code interfaceOnly="true">impure function getErrorString
  input Boolean warningsAsErrors = false;
  output String errorString;
end getErrorString;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="Boolean" name="warningsAsErrors" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="errorString" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getMessagesString">
          <classes/>
          <code interfaceOnly="true">function getMessagesString
  output String messagesString;
end getMessagesString;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="messagesString" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <record id="OpenModelica.Scripting.SourceInfo">
          <classes/>
          <code interfaceOnly="false">record SourceInfo
  String fileName;
  Boolean readonly;
  Integer lineStart;
  Integer columnStart;
  Integer lineEnd;
  Integer columnEnd;
  annotation(
    preferredView = "text");
end SourceInfo;</code>
          <components>
            <elements>
              <element className="String" name="fileName" comment="">
                <dimensions/>
              </element>
              <element className="Boolean" name="readonly" comment="">
                <dimensions/>
              </element>
              <element className="Integer" name="lineStart" comment="">
                <dimensions/>
              </element>
              <element className="Integer" name="columnStart" comment="">
                <dimensions/>
              </element>
              <element className="Integer" name="lineEnd" comment="">
                <dimensions/>
              </element>
              <element className="Integer" name="columnEnd" comment="">
                <dimensions/>
              </element>
            </elements>
          </components>
        </record>
        <type id="OpenModelica.Scripting.ErrorKind">
          <classes/>
          <code interfaceOnly="false">type ErrorKind = enumeration(syntax "syntax errors", grammar "grammatical errors", translation "instantiation errors: up to flat modelica", symbolic "symbolic manipulation error, simcodegen, up to executable file", runtime "simulation/function runtime error", scripting "runtime scripting /interpretation error");</code>
          <components>
            <enumerators>
              <enumerator name="syntax" comment="syntax errors"/>
              <enumerator name="grammar" comment="grammatical errors"/>
              <enumerator name="translation" comment="instantiation errors: up to flat modelica"/>
              <enumerator name="symbolic" comment="symbolic manipulation error, simcodegen, up to executable file"/>
              <enumerator name="runtime" comment="simulation/function runtime error"/>
              <enumerator name="scripting" comment="runtime scripting /interpretation error"/>
            </enumerators>
          </components>
        </type>
        <type id="OpenModelica.Scripting.ErrorLevel">
          <classes/>
          <code interfaceOnly="false">type ErrorLevel = enumeration(notification, warning, error);</code>
          <components>
            <enumerators>
              <enumerator name="notification" comment=""/>
              <enumerator name="warning" comment=""/>
              <enumerator name="error" comment=""/>
            </enumerators>
          </components>
        </type>
        <record id="OpenModelica.Scripting.ErrorMessage">
          <classes/>
          <code interfaceOnly="false">record ErrorMessage
  SourceInfo info;
  String message "After applying the individual arguments";
  ErrorKind kind;
  ErrorLevel level;
  Integer id "Internal ID of the error (just ignore this)";
  annotation(
    preferredView = "text");
end ErrorMessage;</code>
          <components>
            <elements>
              <element className="OpenModelica.Scripting.SourceInfo" name="info" comment="">
                <dimensions/>
              </element>
              <element className="String" name="message" comment="After applying the individual arguments">
                <dimensions/>
              </element>
              <element className="OpenModelica.Scripting.ErrorKind" name="kind" comment="">
                <dimensions/>
              </element>
              <element className="OpenModelica.Scripting.ErrorLevel" name="level" comment="">
                <dimensions/>
              </element>
              <element className="Integer" name="id" comment="Internal ID of the error (just ignore this)">
                <dimensions/>
              </element>
            </elements>
          </components>
        </record>
        <function id="OpenModelica.Scripting.getMessagesStringInternal">
          <classes/>
          <code interfaceOnly="true">function getMessagesStringInternal
  input Boolean unique = true;
  output ErrorMessage[:] messagesString;
end getMessagesStringInternal;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="Boolean" name="unique" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="OpenModelica.Scripting.ErrorMessage" name="messagesString" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.countMessages">
          <classes/>
          <code interfaceOnly="true">function countMessages
  output Integer numMessages;
  output Integer numErrors;
  output Integer numWarnings;
end countMessages;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Integer" name="numMessages" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="numErrors" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="numWarnings" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.clearMessages">
          <classes/>
          <code interfaceOnly="true">function clearMessages
  output Boolean success;
end clearMessages;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.runScript">
          <classes/>
          <code interfaceOnly="true">impure function runScript
  input String fileName "*.mos";
  output String result;
end runScript;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="*.mos">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.echo">
          <classes/>
          <code interfaceOnly="true">function echo
  input Boolean setEcho;
  output Boolean newEcho;
end echo;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="Boolean" name="setEcho" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="newEcho" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getClassesInModelicaPath">
          <classes/>
          <code interfaceOnly="true">function getClassesInModelicaPath
  output String classesInModelicaPath;
end getClassesInModelicaPath;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="classesInModelicaPath" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getAnnotationVersion">
          <classes/>
          <code interfaceOnly="true">function getAnnotationVersion
  output String annotationVersion;
end getAnnotationVersion;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="annotationVersion" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setAnnotationVersion">
          <classes/>
          <code interfaceOnly="true">function setAnnotationVersion
  input String annotationVersion;
  output Boolean success;
end setAnnotationVersion;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="annotationVersion" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getNoSimplify">
          <classes/>
          <code interfaceOnly="true">function getNoSimplify
  output Boolean noSimplify;
end getNoSimplify;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Boolean" name="noSimplify" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setNoSimplify">
          <classes/>
          <code interfaceOnly="true">function setNoSimplify
  input Boolean noSimplify;
  output Boolean success;
end setNoSimplify;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="Boolean" name="noSimplify" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getVectorizationLimit">
          <classes/>
          <code interfaceOnly="true">function getVectorizationLimit
  output Integer vectorizationLimit;
end getVectorizationLimit;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Integer" name="vectorizationLimit" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setVectorizationLimit">
          <classes/>
          <code interfaceOnly="true">function setVectorizationLimit
  input Integer vectorizationLimit;
  output Boolean success;
end setVectorizationLimit;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="Integer" name="vectorizationLimit" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getDefaultOpenCLDevice">
          <classes/>
          <code interfaceOnly="true">function getDefaultOpenCLDevice
  output Integer defdevid;
end getDefaultOpenCLDevice;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Integer" name="defdevid" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setDefaultOpenCLDevice">
          <classes/>
          <code interfaceOnly="true">function setDefaultOpenCLDevice
  input Integer defdevid;
  output Boolean success;
end setDefaultOpenCLDevice;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="Integer" name="defdevid" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setShowAnnotations">
          <classes/>
          <code interfaceOnly="true">function setShowAnnotations
  input Boolean show;
  output Boolean success;
end setShowAnnotations;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="Boolean" name="show" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getShowAnnotations">
          <classes/>
          <code interfaceOnly="true">function getShowAnnotations
  output Boolean show;
end getShowAnnotations;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Boolean" name="show" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setOrderConnections">
          <classes/>
          <code interfaceOnly="true">function setOrderConnections
  input Boolean orderConnections;
  output Boolean success;
end setOrderConnections;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="Boolean" name="orderConnections" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getOrderConnections">
          <classes/>
          <code interfaceOnly="true">function getOrderConnections
  output Boolean orderConnections;
end getOrderConnections;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Boolean" name="orderConnections" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setLanguageStandard">
          <classes/>
          <code interfaceOnly="true">function setLanguageStandard
  input String inVersion;
  output Boolean success;
end setLanguageStandard;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="inVersion" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getLanguageStandard">
          <classes/>
          <code interfaceOnly="true">function getLanguageStandard
  output String outVersion;
end getLanguageStandard;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="outVersion" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getAstAsCorbaString">
          <classes/>
          <code interfaceOnly="true">function getAstAsCorbaString
  input String fileName = "&lt;interactive&gt;";
  output String result "returns the string if fileName is interactive; else it returns ok or error depending on if writing the file succeeded";
end getAstAsCorbaString;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="returns the string if fileName is interactive; else it returns ok or error depending on if writing the file succeeded">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.cd">
          <classes/>
          <code interfaceOnly="true">function cd
  input String newWorkingDirectory = "";
  output String workingDirectory;
end cd;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="newWorkingDirectory" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="workingDirectory" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.mkdir">
          <classes/>
          <code interfaceOnly="true">function mkdir
  input String newDirectory;
  output Boolean success;
end mkdir;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="newDirectory" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.copy">
          <classes/>
          <code interfaceOnly="true">function copy
  input String source;
  input String destination;
  output Boolean success;
end copy;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="source" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="destination" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.remove">
          <classes/>
          <code interfaceOnly="true">function remove
  input String path;
  output Boolean success "Returns true on success.";
end remove;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="path" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="Returns true on success.">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.checkModel">
          <classes/>
          <code interfaceOnly="true">function checkModel
  input TypeName className;
  output String result;
end checkModel;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.checkAllModelsRecursive">
          <classes/>
          <code interfaceOnly="true">function checkAllModelsRecursive
  input TypeName className;
  input Boolean checkProtected = false "Checks also protected classes if true";
  output String result;
end checkAllModelsRecursive;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="checkProtected" hasDefault="true" comment="Checks also protected classes if true">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.typeOf">
          <classes/>
          <code interfaceOnly="true">function typeOf
  input VariableName variableName;
  output String result;
end typeOf;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.VariableName" name="variableName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.instantiateModel">
          <classes/>
          <code interfaceOnly="true">function instantiateModel
  input TypeName className;
  output String result;
end instantiateModel;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.buildOpenTURNSInterface">
          <classes/>
          <code interfaceOnly="true">function buildOpenTURNSInterface
  input TypeName className;
  input String pythonTemplateFile;
  input Boolean showFlatModelica = false;
  output String outPythonScript;
end buildOpenTURNSInterface;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="pythonTemplateFile" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="showFlatModelica" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="outPythonScript" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.runOpenTURNSPythonScript">
          <classes/>
          <code interfaceOnly="true">function runOpenTURNSPythonScript
  input String pythonScriptFile;
  output String logOutputFile;
end runOpenTURNSPythonScript;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="pythonScriptFile" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="logOutputFile" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.generateCode">
          <classes/>
          <code interfaceOnly="true">function generateCode
  input TypeName className;
  output Boolean success;
end generateCode;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.loadModel">
          <classes/>
          <code interfaceOnly="true">function loadModel
  input TypeName className;
  input String[:] priorityVersion = {"default"};
  input Boolean notify = false "Give a notification of the libraries and versions that were loaded";
  input String languageStandard = "" "Override the set language standard. Parse with the given setting, but do not change it permanently.";
  input Boolean requireExactVersion = false "If the version is required to be exact, if there is a uses Modelica(version=\"3.2\"), Modelica 3.2.1 will not match it.";
  output Boolean success;
end loadModel;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="priorityVersion" hasDefault="true" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
              <argument inputOutput="input" className="Boolean" name="notify" hasDefault="true" comment="Give a notification of the libraries and versions that were loaded">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="languageStandard" hasDefault="true" comment="Override the set language standard. Parse with the given setting, but do not change it permanently.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="requireExactVersion" hasDefault="true" comment="If the version is required to be exact, if there is a uses Modelica(version=\&quot;3.2\&quot;), Modelica 3.2.1 will not match it.">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.deleteFile">
          <classes/>
          <code interfaceOnly="true">function deleteFile
  input String fileName;
  output Boolean success;
end deleteFile;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.saveModel">
          <classes/>
          <code interfaceOnly="true">function saveModel
  input String fileName;
  input TypeName className;
  output Boolean success;
end saveModel;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.saveTotalModel">
          <classes/>
          <code interfaceOnly="true">function saveTotalModel
  input String fileName;
  input TypeName className;
  input Boolean stripAnnotations = false;
  input Boolean stripComments = false;
  output Boolean success;
end saveTotalModel;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="stripAnnotations" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="stripComments" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.save">
          <classes/>
          <code interfaceOnly="true">function save
  input TypeName className;
  output Boolean success;
end save;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.saveTotalSCode" ref="OpenModelica.Scripting.saveTotalModel"/>
        <function id="OpenModelica.Scripting.translateGraphics">
          <classes/>
          <code interfaceOnly="true">function translateGraphics
  input TypeName className;
  output String result;
end translateGraphics;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.codeToString">
          <classes/>
          <code interfaceOnly="true">function codeToString
  input $Code className;
  output String string;
end codeToString;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="string" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.dumpXMLDAE">
          <classes/>
          <code interfaceOnly="true">function dumpXMLDAE
  input TypeName className;
  input String translationLevel = "flat" "flat, optimiser, backEnd, or stateSpace";
  input Boolean addOriginalIncidenceMatrix = false;
  input Boolean addSolvingInfo = false;
  input Boolean addMathMLCode = false;
  input Boolean dumpResiduals = false;
  input String fileNamePrefix = "&lt;default&gt;" "this is the className in string form by default";
  input String rewriteRulesFile = "" "the file from where the rewiteRules are read, default is empty which means no rewrite rules";
  output Boolean success "if the function succeeded true/false";
  output String xmlfileName "the Xml file";
end dumpXMLDAE;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="translationLevel" hasDefault="true" comment="flat, optimiser, backEnd, or stateSpace">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="addOriginalIncidenceMatrix" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="addSolvingInfo" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="addMathMLCode" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="dumpResiduals" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="fileNamePrefix" hasDefault="true" comment="this is the className in string form by default">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="rewriteRulesFile" hasDefault="true" comment="the file from where the rewiteRules are read, default is empty which means no rewrite rules">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="if the function succeeded true/false">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="xmlfileName" hasDefault="false" comment="the Xml file">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.convertUnits">
          <classes/>
          <code interfaceOnly="true">function convertUnits
  input String s1;
  input String s2;
  output Boolean unitsCompatible;
  output Real scaleFactor;
  output Real offset;
end convertUnits;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="s1" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="s2" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="unitsCompatible" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="scaleFactor" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="offset" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getDerivedUnits">
          <classes/>
          <code interfaceOnly="true">function getDerivedUnits
  input String baseUnit;
  output String[:] derivedUnits;
end getDerivedUnits;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="baseUnit" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="derivedUnits" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.listVariables">
          <classes/>
          <code interfaceOnly="true">function listVariables
  output TypeName variables[:];
end listVariables;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="OpenModelica.$Code.TypeName" name="variables" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.strtok">
          <classes/>
          <code interfaceOnly="true">function strtok
  input String string;
  input String token;
  output String[:] strings;
end strtok;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="string" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="token" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="strings" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.stringSplit">
          <classes/>
          <code interfaceOnly="true">function stringSplit
  input String string;
  input String token "single character only";
  output String[:] strings;
end stringSplit;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="string" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="token" hasDefault="false" comment="single character only">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="strings" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.stringReplace">
          <classes/>
          <code interfaceOnly="true">function stringReplace
  input String str;
  input String source;
  input String target;
  output String res;
end stringReplace;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="str" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="source" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="target" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="res" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.escapeXML">
          <classes/>
          <code interfaceOnly="true">function escapeXML
  input String inStr;
  output String outStr;
end escapeXML;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="inStr" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="outStr" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <type id="OpenModelica.Scripting.ExportKind">
          <classes/>
          <code interfaceOnly="false">type ExportKind = enumeration(Absyn "Normal Absyn", SCode "Normal SCode", MetaModelicaInterface "A restricted MetaModelica package interface (protected parts are stripped)", Internal "True unparsing of the Absyn");</code>
          <components>
            <enumerators>
              <enumerator name="Absyn" comment="Normal Absyn"/>
              <enumerator name="SCode" comment="Normal SCode"/>
              <enumerator name="MetaModelicaInterface" comment="A restricted MetaModelica package interface (protected parts are stripped)"/>
              <enumerator name="Internal" comment="True unparsing of the Absyn"/>
            </enumerators>
          </components>
        </type>
        <function id="OpenModelica.Scripting.list">
          <classes/>
          <code interfaceOnly="true">function list
  input TypeName class_ = $Code(AllLoadedClasses);
  input Boolean interfaceOnly = false;
  input Boolean shortOnly = false "only short class definitions";
  input ExportKind exportKind = ExportKind.Absyn;
  output String contents;
end list;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="interfaceOnly" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="shortOnly" hasDefault="true" comment="only short class definitions">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.Scripting.ExportKind" name="exportKind" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="contents" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.listFile">
          <classes/>
          <code interfaceOnly="true">function listFile
  input TypeName class_;
  input Boolean nestedClasses = true;
  output String contents;
end listFile;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="nestedClasses" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="contents" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <type id="OpenModelica.Scripting.DiffFormat">
          <classes/>
          <code interfaceOnly="false">type DiffFormat = enumeration(plain "no deletions, no markup", color "terminal escape sequences", xml "XML tags");</code>
          <components>
            <enumerators>
              <enumerator name="plain" comment="no deletions, no markup"/>
              <enumerator name="color" comment="terminal escape sequences"/>
              <enumerator name="xml" comment="XML tags"/>
            </enumerators>
          </components>
        </type>
        <function id="OpenModelica.Scripting.diffModelicaFileListings">
          <classes/>
          <code interfaceOnly="true">function diffModelicaFileListings
  input String before, after;
  input DiffFormat diffFormat = DiffFormat.color;
  output String result;
end diffModelicaFileListings;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="after" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="before" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.Scripting.DiffFormat" name="diffFormat" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.exportToFigaro">
          <classes/>
          <code interfaceOnly="true">function exportToFigaro
  input TypeName path;
  input String directory = cd();
  input String database;
  input String mode;
  input String options;
  input String processor;
  output Boolean success;
end exportToFigaro;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="path" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="directory" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="database" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="mode" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="options" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="processor" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.inferBindings">
          <classes/>
          <code interfaceOnly="true">function inferBindings
  input TypeName path;
  output Boolean success;
end inferBindings;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="path" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.generateVerificationScenarios">
          <classes/>
          <code interfaceOnly="true">function generateVerificationScenarios
  input TypeName path;
  output Boolean success;
end generateVerificationScenarios;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="path" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.rewriteBlockCall">
          <classes/>
          <code interfaceOnly="true">function rewriteBlockCall
  input TypeName className;
  input TypeName inDefs;
  output Boolean success;
end rewriteBlockCall;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="inDefs" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.realpath">
          <classes/>
          <code interfaceOnly="true">function realpath
  input String name "Absolute or relative file or directory name";
  output String fullName "Full path of 'name'";
end realpath;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="name" hasDefault="false" comment="Absolute or relative file or directory name">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="fullName" hasDefault="false" comment="Full path of 'name'">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.uriToFilename">
          <classes/>
          <code interfaceOnly="true">function uriToFilename
  input String uri;
  output String filename = "";
end uriToFilename;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="uri" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="filename" hasDefault="true" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getLoadedLibraries">
          <classes/>
          <code interfaceOnly="true">function getLoadedLibraries
  output String[:, 2] libraries;
end getLoadedLibraries;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="libraries" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                  <dimension size="2"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <type id="OpenModelica.Scripting.LinearSystemSolver">
          <classes/>
          <code interfaceOnly="false">type LinearSystemSolver = enumeration(dgesv, lpsolve55);</code>
          <components>
            <enumerators>
              <enumerator name="dgesv" comment=""/>
              <enumerator name="lpsolve55" comment=""/>
            </enumerators>
          </components>
        </type>
        <function id="OpenModelica.Scripting.solveLinearSystem">
          <classes/>
          <code interfaceOnly="true">function solveLinearSystem
  input Real[size(B, 1), size(B, 1)] A;
  input Real[:] B;
  input LinearSystemSolver solver = LinearSystemSolver.dgesv;
  input Integer[:] isInt = {-1} "list of indices that are integers";
  output Real[size(B, 1)] X;
  output Integer info;
end solveLinearSystem;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="Real" name="A" hasDefault="false" comment="">
                <dimensions>
                  <dimension size="size(B, 1)"/>
                  <dimension size="size(B, 1)"/>
                </dimensions>
              </argument>
              <argument inputOutput="input" className="Real" name="B" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
              <argument inputOutput="input" className="OpenModelica.Scripting.LinearSystemSolver" name="solver" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="isInt" hasDefault="true" comment="list of indices that are integers">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
              <argument inputOutput="output" className="Real" name="X" hasDefault="false" comment="">
                <dimensions>
                  <dimension size="size(B, 1)"/>
                </dimensions>
              </argument>
              <argument inputOutput="output" className="Integer" name="info" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <type id="OpenModelica.Scripting.StandardStream">
          <classes/>
          <code interfaceOnly="false">type StandardStream = enumeration(stdin, stdout, stderr);</code>
          <components>
            <enumerators>
              <enumerator name="stdin" comment=""/>
              <enumerator name="stdout" comment=""/>
              <enumerator name="stderr" comment=""/>
            </enumerators>
          </components>
        </type>
        <function id="OpenModelica.Scripting.reopenStandardStream">
          <classes/>
          <code interfaceOnly="true">function reopenStandardStream
  input StandardStream _stream;
  input String filename;
  output Boolean success;
end reopenStandardStream;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.Scripting.StandardStream" name="_stream" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="filename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.importFMU">
          <classes/>
          <code interfaceOnly="true">function importFMU
  input String filename "the fmu file name";
  input String workdir = "&lt;default&gt;" "The output directory for imported FMU files. &lt;default&gt; will put the files to current working directory.";
  input Integer loglevel = 3 "loglevel_nothing=0;loglevel_fatal=1;loglevel_error=2;loglevel_warning=3;loglevel_info=4;loglevel_verbose=5;loglevel_debug=6";
  input Boolean fullPath = false "When true the full output path is returned otherwise only the file name.";
  input Boolean debugLogging = false "When true the FMU's debug output is printed.";
  input Boolean generateInputConnectors = true "When true creates the input connector pins.";
  input Boolean generateOutputConnectors = true "When true creates the output connector pins.";
  output String generatedFileName "Returns the full path of the generated file.";
end importFMU;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="filename" hasDefault="false" comment="the fmu file name">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="workdir" hasDefault="true" comment="The output directory for imported FMU files. &lt;default&gt; will put the files to current working directory.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="loglevel" hasDefault="true" comment="loglevel_nothing=0;loglevel_fatal=1;loglevel_error=2;loglevel_warning=3;loglevel_info=4;loglevel_verbose=5;loglevel_debug=6">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="fullPath" hasDefault="true" comment="When true the full output path is returned otherwise only the file name.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="debugLogging" hasDefault="true" comment="When true the FMU's debug output is printed.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="generateInputConnectors" hasDefault="true" comment="When true creates the input connector pins.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="generateOutputConnectors" hasDefault="true" comment="When true creates the output connector pins.">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="generatedFileName" hasDefault="false" comment="Returns the full path of the generated file.">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.importFMUModelDescription">
          <classes/>
          <code interfaceOnly="true">function importFMUModelDescription
  input String filename "the fmu file name";
  input String workdir = "&lt;default&gt;" "The output directory for imported FMU files. &lt;default&gt; will put the files to current working directory.";
  input Integer loglevel = 3 "loglevel_nothing=0;loglevel_fatal=1;loglevel_error=2;loglevel_warning=3;loglevel_info=4;loglevel_verbose=5;loglevel_debug=6";
  input Boolean fullPath = false "When true the full output path is returned otherwise only the file name.";
  input Boolean debugLogging = false "When true the FMU's debug output is printed.";
  input Boolean generateInputConnectors = true "When true creates the input connector pins.";
  input Boolean generateOutputConnectors = true "When true creates the output connector pins.";
  output String generatedFileName "Returns the full path of the generated file.";
end importFMUModelDescription;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="filename" hasDefault="false" comment="the fmu file name">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="workdir" hasDefault="true" comment="The output directory for imported FMU files. &lt;default&gt; will put the files to current working directory.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="loglevel" hasDefault="true" comment="loglevel_nothing=0;loglevel_fatal=1;loglevel_error=2;loglevel_warning=3;loglevel_info=4;loglevel_verbose=5;loglevel_debug=6">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="fullPath" hasDefault="true" comment="When true the full output path is returned otherwise only the file name.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="debugLogging" hasDefault="true" comment="When true the FMU's debug output is printed.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="generateInputConnectors" hasDefault="true" comment="When true creates the input connector pins.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="generateOutputConnectors" hasDefault="true" comment="When true creates the output connector pins.">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="generatedFileName" hasDefault="false" comment="Returns the full path of the generated file.">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.translateModelFMU">
          <classes/>
          <code interfaceOnly="true">function translateModelFMU
  input TypeName className "the class that should translated";
  input String version = "2.0" "FMU version, 1.0 or 2.0.";
  input String fmuType = "me" "FMU type, me (model exchange), cs (co-simulation), me_cs (both model exchange and co-simulation)";
  input String fileNamePrefix = "&lt;default&gt;" "fileNamePrefix. &lt;default&gt; = \"className\"";
  input Boolean includeResources = false "include Modelica based resources via loadResource or not";
  output String generatedFileName "Returns the full path of the generated FMU.";
end translateModelFMU;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="the class that should translated">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="version" hasDefault="true" comment="FMU version, 1.0 or 2.0.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="fmuType" hasDefault="true" comment="FMU type, me (model exchange), cs (co-simulation), me_cs (both model exchange and co-simulation)">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="fileNamePrefix" hasDefault="true" comment="fileNamePrefix. &lt;default&gt; = \&quot;className\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="includeResources" hasDefault="true" comment="include Modelica based resources via loadResource or not">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="generatedFileName" hasDefault="false" comment="Returns the full path of the generated FMU.">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.buildModelFMU">
          <classes/>
          <code interfaceOnly="true">function buildModelFMU
  input TypeName className "the class that should translated";
  input String version = "2.0" "FMU version, 1.0 or 2.0.";
  input String fmuType = "me" "FMU type, me (model exchange), cs (co-simulation), me_cs (both model exchange and co-simulation)";
  input String fileNamePrefix = "&lt;default&gt;" "fileNamePrefix. &lt;default&gt; = \"className\"";
  input String platforms[:] = {"static"} "The list of platforms to generate code for. \"dynamic\"=current platform, dynamically link the runtime. \"static\"=current platform, statically link everything. Else, use a host triple, e.g. \"x86_64-linux-gnu\" or \"x86_64-w64-mingw32\"";
  input Boolean includeResources = false "include Modelica based resources via loadResource or not";
  output String generatedFileName "Returns the full path of the generated FMU.";
end buildModelFMU;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="the class that should translated">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="version" hasDefault="true" comment="FMU version, 1.0 or 2.0.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="fmuType" hasDefault="true" comment="FMU type, me (model exchange), cs (co-simulation), me_cs (both model exchange and co-simulation)">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="fileNamePrefix" hasDefault="true" comment="fileNamePrefix. &lt;default&gt; = \&quot;className\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="platforms" hasDefault="true" comment="The list of platforms to generate code for. \&quot;dynamic\&quot;=current platform, dynamically link the runtime. \&quot;static\&quot;=current platform, statically link everything. Else, use a host triple, e.g. \&quot;x86_64-linux-gnu\&quot; or \&quot;x86_64-w64-mingw32\&quot;">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
              <argument inputOutput="input" className="Boolean" name="includeResources" hasDefault="true" comment="include Modelica based resources via loadResource or not">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="generatedFileName" hasDefault="false" comment="Returns the full path of the generated FMU.">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.buildEncryptedPackage">
          <classes/>
          <code interfaceOnly="true">function buildEncryptedPackage
  input TypeName className "the class that should encrypted";
  input Boolean encrypt = true;
  output Boolean success;
end buildEncryptedPackage;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="the class that should encrypted">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="encrypt" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.simulate">
          <classes>
            <record id="OpenModelica.Scripting.simulate.SimulationResult">
              <classes/>
              <code interfaceOnly="false">record SimulationResult
  String resultFile;
  String simulationOptions;
  String messages;
  Real timeFrontend;
  Real timeBackend;
  Real timeSimCode;
  Real timeTemplates;
  Real timeCompile;
  Real timeSimulation;
  Real timeTotal;
end SimulationResult;</code>
              <components>
                <elements>
                  <element className="String" name="resultFile" comment="">
                    <dimensions/>
                  </element>
                  <element className="String" name="simulationOptions" comment="">
                    <dimensions/>
                  </element>
                  <element className="String" name="messages" comment="">
                    <dimensions/>
                  </element>
                  <element className="Real" name="timeFrontend" comment="">
                    <dimensions/>
                  </element>
                  <element className="Real" name="timeBackend" comment="">
                    <dimensions/>
                  </element>
                  <element className="Real" name="timeSimCode" comment="">
                    <dimensions/>
                  </element>
                  <element className="Real" name="timeTemplates" comment="">
                    <dimensions/>
                  </element>
                  <element className="Real" name="timeCompile" comment="">
                    <dimensions/>
                  </element>
                  <element className="Real" name="timeSimulation" comment="">
                    <dimensions/>
                  </element>
                  <element className="Real" name="timeTotal" comment="">
                    <dimensions/>
                  </element>
                </elements>
              </components>
            </record>
          </classes>
          <code interfaceOnly="true">function simulate
  input TypeName className "the class that should simulated";
  input Real startTime = "&lt;default&gt;" "the start time of the simulation. &lt;default&gt; = 0.0";
  input Real stopTime = 1.0 "the stop time of the simulation. &lt;default&gt; = 1.0";
  input Real numberOfIntervals = 500 "number of intervals in the result file. &lt;default&gt; = 500";
  input Real tolerance = 1e-6 "tolerance used by the integration method. &lt;default&gt; = 1e-6";
  input String method = "&lt;default&gt;" "integration method used for simulation. &lt;default&gt; = dassl";
  input String fileNamePrefix = "&lt;default&gt;" "fileNamePrefix. &lt;default&gt; = \"\"";
  input String options = "&lt;default&gt;" "options. &lt;default&gt; = \"\"";
  input String outputFormat = "mat" "Format for the result file. &lt;default&gt; = \"mat\"";
  input String variableFilter = ".*" "Filter for variables that should store in result file. &lt;default&gt; = \".*\"";
  input String cflags = "&lt;default&gt;" "cflags. &lt;default&gt; = \"\"";
  input String simflags = "&lt;default&gt;" "simflags. &lt;default&gt; = \"\"";
  output SimulationResult simulationResults;

  record SimulationResult
    String resultFile;
    String simulationOptions;
    String messages;
    Real timeFrontend;
    Real timeBackend;
    Real timeSimCode;
    Real timeTemplates;
    Real timeCompile;
    Real timeSimulation;
    Real timeTotal;
  end SimulationResult;
end simulate;</code>
          <components>
            <arguments/>
          </components>
        </function>
        <function id="OpenModelica.Scripting.buildModel">
          <classes/>
          <code interfaceOnly="true">function buildModel
  input TypeName className "the class that should be built";
  input Real startTime = "&lt;default&gt;" "the start time of the simulation. &lt;default&gt; = 0.0";
  input Real stopTime = 1.0 "the stop time of the simulation. &lt;default&gt; = 1.0";
  input Real numberOfIntervals = 500 "number of intervals in the result file. &lt;default&gt; = 500";
  input Real tolerance = 1e-6 "tolerance used by the integration method. &lt;default&gt; = 1e-6";
  input String method = "&lt;default&gt;" "integration method used for simulation. &lt;default&gt; = dassl";
  input String fileNamePrefix = "&lt;default&gt;" "fileNamePrefix. &lt;default&gt; = \"\"";
  input String options = "&lt;default&gt;" "options. &lt;default&gt; = \"\"";
  input String outputFormat = "mat" "Format for the result file. &lt;default&gt; = \"mat\"";
  input String variableFilter = ".*" "Filter for variables that should store in result file. &lt;default&gt; = \".*\"";
  input String cflags = "&lt;default&gt;" "cflags. &lt;default&gt; = \"\"";
  input String simflags = "&lt;default&gt;" "simflags. &lt;default&gt; = \"\"";
  output String[2] buildModelResults;
end buildModel;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="the class that should be built">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="startTime" hasDefault="true" comment="the start time of the simulation. &lt;default&gt; = 0.0">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="stopTime" hasDefault="true" comment="the stop time of the simulation. &lt;default&gt; = 1.0">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="numberOfIntervals" hasDefault="true" comment="number of intervals in the result file. &lt;default&gt; = 500">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="tolerance" hasDefault="true" comment="tolerance used by the integration method. &lt;default&gt; = 1e-6">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="method" hasDefault="true" comment="integration method used for simulation. &lt;default&gt; = dassl">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="fileNamePrefix" hasDefault="true" comment="fileNamePrefix. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="options" hasDefault="true" comment="options. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="outputFormat" hasDefault="true" comment="Format for the result file. &lt;default&gt; = \&quot;mat\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="variableFilter" hasDefault="true" comment="Filter for variables that should store in result file. &lt;default&gt; = \&quot;.*\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="cflags" hasDefault="true" comment="cflags. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="simflags" hasDefault="true" comment="simflags. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="buildModelResults" hasDefault="false" comment="">
                <dimensions>
                  <dimension size="2"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.buildLabel">
          <classes/>
          <code interfaceOnly="true">function buildLabel
  input TypeName className "the class that should be built";
  input Real startTime = 0.0 "the start time of the simulation. &lt;default&gt; = 0.0";
  input Real stopTime = 1.0 "the stop time of the simulation. &lt;default&gt; = 1.0";
  input Integer numberOfIntervals = 500 "number of intervals in the result file. &lt;default&gt; = 500";
  input Real tolerance = 1e-6 "tolerance used by the integration method. &lt;default&gt; = 1e-6";
  input String method = "dassl" "integration method used for simulation. &lt;default&gt; = dassl";
  input String fileNamePrefix = "" "fileNamePrefix. &lt;default&gt; = \"\"";
  input String options = "" "options. &lt;default&gt; = \"\"";
  input String outputFormat = "mat" "Format for the result file. &lt;default&gt; = \"mat\"";
  input String variableFilter = ".*" "Filter for variables that should store in result file. &lt;default&gt; = \".*\"";
  input String cflags = "" "cflags. &lt;default&gt; = \"\"";
  input String simflags = "" "simflags. &lt;default&gt; = \"\"";
  output String[2] buildModelResults;
end buildLabel;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="the class that should be built">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="startTime" hasDefault="true" comment="the start time of the simulation. &lt;default&gt; = 0.0">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="stopTime" hasDefault="true" comment="the stop time of the simulation. &lt;default&gt; = 1.0">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="numberOfIntervals" hasDefault="true" comment="number of intervals in the result file. &lt;default&gt; = 500">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="tolerance" hasDefault="true" comment="tolerance used by the integration method. &lt;default&gt; = 1e-6">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="method" hasDefault="true" comment="integration method used for simulation. &lt;default&gt; = dassl">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="fileNamePrefix" hasDefault="true" comment="fileNamePrefix. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="options" hasDefault="true" comment="options. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="outputFormat" hasDefault="true" comment="Format for the result file. &lt;default&gt; = \&quot;mat\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="variableFilter" hasDefault="true" comment="Filter for variables that should store in result file. &lt;default&gt; = \&quot;.*\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="cflags" hasDefault="true" comment="cflags. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="simflags" hasDefault="true" comment="simflags. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="buildModelResults" hasDefault="false" comment="">
                <dimensions>
                  <dimension size="2"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.reduceTerms">
          <classes/>
          <code interfaceOnly="true">function reduceTerms
  input TypeName className "the class that should be built";
  input Real startTime = 0.0 "the start time of the simulation. &lt;default&gt; = 0.0";
  input Real stopTime = 1.0 "the stop time of the simulation. &lt;default&gt; = 1.0";
  input Integer numberOfIntervals = 500 "number of intervals in the result file. &lt;default&gt; = 500";
  input Real tolerance = 1e-6 "tolerance used by the integration method. &lt;default&gt; = 1e-6";
  input String method = "dassl" "integration method used for simulation. &lt;default&gt; = dassl";
  input String fileNamePrefix = "" "fileNamePrefix. &lt;default&gt; = \"\"";
  input String options = "" "options. &lt;default&gt; = \"\"";
  input String outputFormat = "mat" "Format for the result file. &lt;default&gt; = \"mat\"";
  input String variableFilter = ".*" "Filter for variables that should store in result file. &lt;default&gt; = \".*\"";
  input String cflags = "" "cflags. &lt;default&gt; = \"\"";
  input String simflags = "" "simflags. &lt;default&gt; = \"\"";
  input String labelstoCancel = "";
  output String[2] buildModelResults;
end reduceTerms;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="the class that should be built">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="startTime" hasDefault="true" comment="the start time of the simulation. &lt;default&gt; = 0.0">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="stopTime" hasDefault="true" comment="the stop time of the simulation. &lt;default&gt; = 1.0">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="numberOfIntervals" hasDefault="true" comment="number of intervals in the result file. &lt;default&gt; = 500">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="tolerance" hasDefault="true" comment="tolerance used by the integration method. &lt;default&gt; = 1e-6">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="method" hasDefault="true" comment="integration method used for simulation. &lt;default&gt; = dassl">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="fileNamePrefix" hasDefault="true" comment="fileNamePrefix. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="options" hasDefault="true" comment="options. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="outputFormat" hasDefault="true" comment="Format for the result file. &lt;default&gt; = \&quot;mat\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="variableFilter" hasDefault="true" comment="Filter for variables that should store in result file. &lt;default&gt; = \&quot;.*\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="cflags" hasDefault="true" comment="cflags. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="simflags" hasDefault="true" comment="simflags. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="labelstoCancel" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="buildModelResults" hasDefault="false" comment="">
                <dimensions>
                  <dimension size="2"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.moveClass">
          <classes/>
          <code interfaceOnly="true">function moveClass
  input TypeName className "the class that should be moved";
  input Integer offset "Offset in the class list.";
  output Boolean result;
end moveClass;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="the class that should be moved">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="offset" hasDefault="false" comment="Offset in the class list.">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.moveClassToTop">
          <classes/>
          <code interfaceOnly="true">function moveClassToTop
  input TypeName className;
  output Boolean result;
end moveClassToTop;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.moveClassToBottom">
          <classes/>
          <code interfaceOnly="true">function moveClassToBottom
  input TypeName className;
  output Boolean result;
end moveClassToBottom;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.copyClass">
          <classes/>
          <code interfaceOnly="true">function copyClass
  input TypeName className "the class that should be copied";
  input String newClassName "the name for new class";
  input TypeName withIn = $Code(TopLevel) "the with in path for new class";
  output Boolean result;
end copyClass;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="the class that should be copied">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="newClassName" hasDefault="false" comment="the name for new class">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="withIn" hasDefault="true" comment="the with in path for new class">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.linearize">
          <classes/>
          <code interfaceOnly="true">function linearize
  input TypeName className "the class that should simulated";
  input Real startTime = "&lt;default&gt;" "the start time of the simulation. &lt;default&gt; = 0.0";
  input Real stopTime = 1.0 "the stop time of the simulation. &lt;default&gt; = 1.0";
  input Real numberOfIntervals = 500 "number of intervals in the result file. &lt;default&gt; = 500";
  input Real stepSize = 0.002 "step size that is used for the result file. &lt;default&gt; = 0.002";
  input Real tolerance = 1e-6 "tolerance used by the integration method. &lt;default&gt; = 1e-6";
  input String method = "&lt;default&gt;" "integration method used for simulation. &lt;default&gt; = dassl";
  input String fileNamePrefix = "&lt;default&gt;" "fileNamePrefix. &lt;default&gt; = \"\"";
  input Boolean storeInTemp = false "storeInTemp. &lt;default&gt; = false";
  input Boolean noClean = false "noClean. &lt;default&gt; = false";
  input String options = "&lt;default&gt;" "options. &lt;default&gt; = \"\"";
  input String outputFormat = "mat" "Format for the result file. &lt;default&gt; = \"mat\"";
  input String variableFilter = ".*" "Filter for variables that should store in result file. &lt;default&gt; = \".*\"";
  input String cflags = "&lt;default&gt;" "cflags. &lt;default&gt; = \"\"";
  input String simflags = "&lt;default&gt;" "simflags. &lt;default&gt; = \"\"";
  output String linearizationResult;
end linearize;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="the class that should simulated">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="startTime" hasDefault="true" comment="the start time of the simulation. &lt;default&gt; = 0.0">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="stopTime" hasDefault="true" comment="the stop time of the simulation. &lt;default&gt; = 1.0">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="numberOfIntervals" hasDefault="true" comment="number of intervals in the result file. &lt;default&gt; = 500">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="stepSize" hasDefault="true" comment="step size that is used for the result file. &lt;default&gt; = 0.002">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="tolerance" hasDefault="true" comment="tolerance used by the integration method. &lt;default&gt; = 1e-6">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="method" hasDefault="true" comment="integration method used for simulation. &lt;default&gt; = dassl">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="fileNamePrefix" hasDefault="true" comment="fileNamePrefix. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="storeInTemp" hasDefault="true" comment="storeInTemp. &lt;default&gt; = false">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="noClean" hasDefault="true" comment="noClean. &lt;default&gt; = false">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="options" hasDefault="true" comment="options. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="outputFormat" hasDefault="true" comment="Format for the result file. &lt;default&gt; = \&quot;mat\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="variableFilter" hasDefault="true" comment="Filter for variables that should store in result file. &lt;default&gt; = \&quot;.*\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="cflags" hasDefault="true" comment="cflags. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="simflags" hasDefault="true" comment="simflags. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="linearizationResult" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.optimize">
          <classes/>
          <code interfaceOnly="true">function optimize
  input TypeName className "the class that should simulated";
  input Real startTime = "&lt;default&gt;" "the start time of the simulation. &lt;default&gt; = 0.0";
  input Real stopTime = 1.0 "the stop time of the simulation. &lt;default&gt; = 1.0";
  input Real numberOfIntervals = 500 "number of intervals in the result file. &lt;default&gt; = 500";
  input Real stepSize = 0.002 "step size that is used for the result file. &lt;default&gt; = 0.002";
  input Real tolerance = 1e-6 "tolerance used by the integration method. &lt;default&gt; = 1e-6";
  input String method = DAE.SCONST("optimization") "optimize a modelica/optimica model.";
  input String fileNamePrefix = "&lt;default&gt;" "fileNamePrefix. &lt;default&gt; = \"\"";
  input Boolean storeInTemp = false "storeInTemp. &lt;default&gt; = false";
  input Boolean noClean = false "noClean. &lt;default&gt; = false";
  input String options = "&lt;default&gt;" "options. &lt;default&gt; = \"\"";
  input String outputFormat = "mat" "Format for the result file. &lt;default&gt; = \"mat\"";
  input String variableFilter = ".*" "Filter for variables that should store in result file. &lt;default&gt; = \".*\"";
  input String cflags = "&lt;default&gt;" "cflags. &lt;default&gt; = \"\"";
  input String simflags = "&lt;default&gt;" "simflags. &lt;default&gt; = \"\"";
  output String optimizationResults;
end optimize;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="the class that should simulated">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="startTime" hasDefault="true" comment="the start time of the simulation. &lt;default&gt; = 0.0">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="stopTime" hasDefault="true" comment="the stop time of the simulation. &lt;default&gt; = 1.0">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="numberOfIntervals" hasDefault="true" comment="number of intervals in the result file. &lt;default&gt; = 500">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="stepSize" hasDefault="true" comment="step size that is used for the result file. &lt;default&gt; = 0.002">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="tolerance" hasDefault="true" comment="tolerance used by the integration method. &lt;default&gt; = 1e-6">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="method" hasDefault="true" comment="optimize a modelica/optimica model.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="fileNamePrefix" hasDefault="true" comment="fileNamePrefix. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="storeInTemp" hasDefault="true" comment="storeInTemp. &lt;default&gt; = false">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="noClean" hasDefault="true" comment="noClean. &lt;default&gt; = false">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="options" hasDefault="true" comment="options. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="outputFormat" hasDefault="true" comment="Format for the result file. &lt;default&gt; = \&quot;mat\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="variableFilter" hasDefault="true" comment="Filter for variables that should store in result file. &lt;default&gt; = \&quot;.*\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="cflags" hasDefault="true" comment="cflags. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="simflags" hasDefault="true" comment="simflags. &lt;default&gt; = \&quot;\&quot;">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="optimizationResults" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getSourceFile">
          <classes/>
          <code interfaceOnly="true">function getSourceFile
  input TypeName class_;
  output String filename "empty on failure";
end getSourceFile;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="filename" hasDefault="false" comment="empty on failure">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setSourceFile">
          <classes/>
          <code interfaceOnly="true">function setSourceFile
  input TypeName class_;
  input String filename;
  output Boolean success;
end setSourceFile;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="filename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.isShortDefinition">
          <classes/>
          <code interfaceOnly="true">function isShortDefinition
  input TypeName class_;
  output Boolean isShortCls;
end isShortDefinition;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="isShortCls" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setClassComment">
          <classes/>
          <code interfaceOnly="true">function setClassComment
  input TypeName class_;
  input String filename;
  output Boolean success;
end setClassComment;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="filename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getClassNames">
          <classes/>
          <code interfaceOnly="true">function getClassNames
  input TypeName class_ = $Code(AllLoadedClasses);
  input Boolean recursive = false;
  input Boolean qualified = false;
  input Boolean sort = false;
  input Boolean builtin = false "List also builtin classes if true";
  input Boolean showProtected = false "List also protected classes if true";
  input Boolean includeConstants = false "List also constants in the class if true";
  output TypeName classNames[:];
end getClassNames;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="recursive" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="qualified" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="sort" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="builtin" hasDefault="true" comment="List also builtin classes if true">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="showProtected" hasDefault="true" comment="List also protected classes if true">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="includeConstants" hasDefault="true" comment="List also constants in the class if true">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="OpenModelica.$Code.TypeName" name="classNames" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getUsedClassNames">
          <classes/>
          <code interfaceOnly="true">function getUsedClassNames
  input TypeName className;
  output TypeName classNames[:];
end getUsedClassNames;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="OpenModelica.$Code.TypeName" name="classNames" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getPackages">
          <classes/>
          <code interfaceOnly="true">function getPackages
  input TypeName class_ = $Code(AllLoadedClasses);
  output TypeName classNames[:];
end getPackages;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="OpenModelica.$Code.TypeName" name="classNames" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getAllSubtypeOf">
          <classes/>
          <code interfaceOnly="true">function getAllSubtypeOf
  input TypeName parentClass = $Code(AllLoadedClasses);
  input TypeName class_;
  input Boolean qualified = false;
  input Boolean includePartial = false;
  input Boolean sort = false;
  output TypeName classNames[:];
end getAllSubtypeOf;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="parentClass" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="qualified" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="includePartial" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="sort" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="OpenModelica.$Code.TypeName" name="classNames" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.basePlotFunction">
          <classes/>
          <code interfaceOnly="true">partial function basePlotFunction
  input String fileName = "&lt;default&gt;" "The filename containing the variables. &lt;default&gt; will read the last simulation result";
  input String interpolation = "linear" "
      Determines if the simulation data should be interpolated to allow drawing of continuous lines in the diagram.
      \"linear\" results in linear interpolation between data points, \"constant\" keeps the value of the last known
      data point until a new one is found and \"none\" results in a diagram where only known data points are plotted.";
  input String title = "Plot by OpenModelica" "This text will be used as the diagram title.";
  input Boolean legend = true "Determines whether or not the variable legend is shown.";
  input Boolean grid = true "Determines whether or not a grid is shown in the diagram.";
  input Boolean logX = false "Determines whether or not the horizontal axis is logarithmically scaled.";
  input Boolean logY = false "Determines whether or not the vertical axis is logarithmically scaled.";
  input String xLabel = "time" "This text will be used as the horizontal label in the diagram.";
  input String yLabel = "" "This text will be used as the vertical label in the diagram.";
  input Boolean points = false "Determines whether or not the data points should be indicated by a dot in the diagram.";
  input Real xRange[2] = {0.0, 0.0} "Determines the horizontal interval that is visible in the diagram. {0,0} will select a suitable range.";
  input Real yRange[2] = {0.0, 0.0} "Determines the vertical interval that is visible in the diagram. {0,0} will select a suitable range.";
  output Boolean success "Returns true on success";
end basePlotFunction;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="true" comment="The filename containing the variables. &lt;default&gt; will read the last simulation result">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="interpolation" hasDefault="true" comment="&#10;    Determines if the simulation data should be interpolated to allow drawing of continuous lines in the diagram.&#10;    \&quot;linear\&quot; results in linear interpolation between data points, \&quot;constant\&quot; keeps the value of the last known&#10;    data point until a new one is found and \&quot;none\&quot; results in a diagram where only known data points are plotted.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="title" hasDefault="true" comment="This text will be used as the diagram title.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="legend" hasDefault="true" comment="Determines whether or not the variable legend is shown.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="grid" hasDefault="true" comment="Determines whether or not a grid is shown in the diagram.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="logX" hasDefault="true" comment="Determines whether or not the horizontal axis is logarithmically scaled.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="logY" hasDefault="true" comment="Determines whether or not the vertical axis is logarithmically scaled.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="xLabel" hasDefault="true" comment="This text will be used as the horizontal label in the diagram.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="yLabel" hasDefault="true" comment="This text will be used as the vertical label in the diagram.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="points" hasDefault="true" comment="Determines whether or not the data points should be indicated by a dot in the diagram.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="xRange" hasDefault="true" comment="Determines the horizontal interval that is visible in the diagram. {0,0} will select a suitable range.">
                <dimensions>
                  <dimension size="2"/>
                </dimensions>
              </argument>
              <argument inputOutput="input" className="Real" name="yRange" hasDefault="true" comment="Determines the vertical interval that is visible in the diagram. {0,0} will select a suitable range.">
                <dimensions>
                  <dimension size="2"/>
                </dimensions>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="Returns true on success">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.plot">
          <classes/>
          <code interfaceOnly="true">function plot
  input VariableNames vars "The variables you want to plot";
  input Boolean externalWindow = false "Opens the plot in a new plot window";
  input String fileName = "&lt;default&gt;" "The filename containing the variables. &lt;default&gt; will read the last simulation result";
  input String title = "" "This text will be used as the diagram title.";
  input String grid = "detailed" "Sets the grid for the plot i.e simple, detailed, none.";
  input Boolean logX = false "Determines whether or not the horizontal axis is logarithmically scaled.";
  input Boolean logY = false "Determines whether or not the vertical axis is logarithmically scaled.";
  input String xLabel = "time" "This text will be used as the horizontal label in the diagram.";
  input String yLabel = "" "This text will be used as the vertical label in the diagram.";
  input Real xRange[2] = {0.0, 0.0} "Determines the horizontal interval that is visible in the diagram. {0,0} will select a suitable range.";
  input Real yRange[2] = {0.0, 0.0} "Determines the vertical interval that is visible in the diagram. {0,0} will select a suitable range.";
  input Real curveWidth = 1.0 "Sets the width of the curve.";
  input Integer curveStyle = 1 "Sets the style of the curve. SolidLine=1, DashLine=2, DotLine=3, DashDotLine=4, DashDotDotLine=5, Sticks=6, Steps=7.";
  input String legendPosition = "top" "Sets the POSITION of the legend i.e left, right, top, bottom, none.";
  input String footer = "" "This text will be used as the diagram footer.";
  input Boolean autoScale = true "Use auto scale while plotting.";
  input Boolean forceOMPlot = false "if true launches OMPlot and doesn't call callback function even if it is defined.";
  output Boolean success "Returns true on success";
end plot;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.VariableNames" name="vars" hasDefault="false" comment="The variables you want to plot">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="externalWindow" hasDefault="true" comment="Opens the plot in a new plot window">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="true" comment="The filename containing the variables. &lt;default&gt; will read the last simulation result">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="title" hasDefault="true" comment="This text will be used as the diagram title.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="grid" hasDefault="true" comment="Sets the grid for the plot i.e simple, detailed, none.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="logX" hasDefault="true" comment="Determines whether or not the horizontal axis is logarithmically scaled.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="logY" hasDefault="true" comment="Determines whether or not the vertical axis is logarithmically scaled.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="xLabel" hasDefault="true" comment="This text will be used as the horizontal label in the diagram.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="yLabel" hasDefault="true" comment="This text will be used as the vertical label in the diagram.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="xRange" hasDefault="true" comment="Determines the horizontal interval that is visible in the diagram. {0,0} will select a suitable range.">
                <dimensions>
                  <dimension size="2"/>
                </dimensions>
              </argument>
              <argument inputOutput="input" className="Real" name="yRange" hasDefault="true" comment="Determines the vertical interval that is visible in the diagram. {0,0} will select a suitable range.">
                <dimensions>
                  <dimension size="2"/>
                </dimensions>
              </argument>
              <argument inputOutput="input" className="Real" name="curveWidth" hasDefault="true" comment="Sets the width of the curve.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="curveStyle" hasDefault="true" comment="Sets the style of the curve. SolidLine=1, DashLine=2, DotLine=3, DashDotLine=4, DashDotDotLine=5, Sticks=6, Steps=7.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="legendPosition" hasDefault="true" comment="Sets the POSITION of the legend i.e left, right, top, bottom, none.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="footer" hasDefault="true" comment="This text will be used as the diagram footer.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="autoScale" hasDefault="true" comment="Use auto scale while plotting.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="forceOMPlot" hasDefault="true" comment="if true launches OMPlot and doesn't call callback function even if it is defined.">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="Returns true on success">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.plotAll">
          <classes/>
          <code interfaceOnly="true">function plotAll
  input Boolean externalWindow = false "Opens the plot in a new plot window";
  input String fileName = "&lt;default&gt;" "The filename containing the variables. &lt;default&gt; will read the last simulation result";
  input String title = "" "This text will be used as the diagram title.";
  input String grid = "detailed" "Sets the grid for the plot i.e simple, detailed, none.";
  input Boolean logX = false "Determines whether or not the horizontal axis is logarithmically scaled.";
  input Boolean logY = false "Determines whether or not the vertical axis is logarithmically scaled.";
  input String xLabel = "time" "This text will be used as the horizontal label in the diagram.";
  input String yLabel = "" "This text will be used as the vertical label in the diagram.";
  input Real xRange[2] = {0.0, 0.0} "Determines the horizontal interval that is visible in the diagram. {0,0} will select a suitable range.";
  input Real yRange[2] = {0.0, 0.0} "Determines the vertical interval that is visible in the diagram. {0,0} will select a suitable range.";
  input Real curveWidth = 1.0 "Sets the width of the curve.";
  input Integer curveStyle = 1 "Sets the style of the curve. SolidLine=1, DashLine=2, DotLine=3, DashDotLine=4, DashDotDotLine=5, Sticks=6, Steps=7.";
  input String legendPosition = "top" "Sets the POSITION of the legend i.e left, right, top, bottom, none.";
  input String footer = "" "This text will be used as the diagram footer.";
  input Boolean autoScale = true "Use auto scale while plotting.";
  input Boolean forceOMPlot = false "if true launches OMPlot and doesn't call callback function even if it is defined.";
  output Boolean success "Returns true on success";
end plotAll;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="Boolean" name="externalWindow" hasDefault="true" comment="Opens the plot in a new plot window">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="true" comment="The filename containing the variables. &lt;default&gt; will read the last simulation result">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="title" hasDefault="true" comment="This text will be used as the diagram title.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="grid" hasDefault="true" comment="Sets the grid for the plot i.e simple, detailed, none.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="logX" hasDefault="true" comment="Determines whether or not the horizontal axis is logarithmically scaled.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="logY" hasDefault="true" comment="Determines whether or not the vertical axis is logarithmically scaled.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="xLabel" hasDefault="true" comment="This text will be used as the horizontal label in the diagram.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="yLabel" hasDefault="true" comment="This text will be used as the vertical label in the diagram.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="xRange" hasDefault="true" comment="Determines the horizontal interval that is visible in the diagram. {0,0} will select a suitable range.">
                <dimensions>
                  <dimension size="2"/>
                </dimensions>
              </argument>
              <argument inputOutput="input" className="Real" name="yRange" hasDefault="true" comment="Determines the vertical interval that is visible in the diagram. {0,0} will select a suitable range.">
                <dimensions>
                  <dimension size="2"/>
                </dimensions>
              </argument>
              <argument inputOutput="input" className="Real" name="curveWidth" hasDefault="true" comment="Sets the width of the curve.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="curveStyle" hasDefault="true" comment="Sets the style of the curve. SolidLine=1, DashLine=2, DotLine=3, DashDotLine=4, DashDotDotLine=5, Sticks=6, Steps=7.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="legendPosition" hasDefault="true" comment="Sets the POSITION of the legend i.e left, right, top, bottom, none.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="footer" hasDefault="true" comment="This text will be used as the diagram footer.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="autoScale" hasDefault="true" comment="Use auto scale while plotting.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="forceOMPlot" hasDefault="true" comment="if true launches OMPlot and doesn't call callback function even if it is defined.">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="Returns true on success">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.plotParametric">
          <classes/>
          <code interfaceOnly="true">function plotParametric
  input VariableName xVariable;
  input VariableName yVariable;
  input Boolean externalWindow = false "Opens the plot in a new plot window";
  input String fileName = "&lt;default&gt;" "The filename containing the variables. &lt;default&gt; will read the last simulation result";
  input String title = "" "This text will be used as the diagram title.";
  input String grid = "detailed" "Sets the grid for the plot i.e simple, detailed, none.";
  input Boolean logX = false "Determines whether or not the horizontal axis is logarithmically scaled.";
  input Boolean logY = false "Determines whether or not the vertical axis is logarithmically scaled.";
  input String xLabel = "time" "This text will be used as the horizontal label in the diagram.";
  input String yLabel = "" "This text will be used as the vertical label in the diagram.";
  input Real xRange[2] = {0.0, 0.0} "Determines the horizontal interval that is visible in the diagram. {0,0} will select a suitable range.";
  input Real yRange[2] = {0.0, 0.0} "Determines the vertical interval that is visible in the diagram. {0,0} will select a suitable range.";
  input Real curveWidth = 1.0 "Sets the width of the curve.";
  input Integer curveStyle = 1 "Sets the style of the curve. SolidLine=1, DashLine=2, DotLine=3, DashDotLine=4, DashDotDotLine=5, Sticks=6, Steps=7.";
  input String legendPosition = "top" "Sets the POSITION of the legend i.e left, right, top, bottom, none.";
  input String footer = "" "This text will be used as the diagram footer.";
  input Boolean autoScale = true "Use auto scale while plotting.";
  input Boolean forceOMPlot = false "if true launches OMPlot and doesn't call callback function even if it is defined.";
  output Boolean success "Returns true on success";
end plotParametric;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.VariableName" name="xVariable" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.VariableName" name="yVariable" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="externalWindow" hasDefault="true" comment="Opens the plot in a new plot window">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="true" comment="The filename containing the variables. &lt;default&gt; will read the last simulation result">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="title" hasDefault="true" comment="This text will be used as the diagram title.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="grid" hasDefault="true" comment="Sets the grid for the plot i.e simple, detailed, none.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="logX" hasDefault="true" comment="Determines whether or not the horizontal axis is logarithmically scaled.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="logY" hasDefault="true" comment="Determines whether or not the vertical axis is logarithmically scaled.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="xLabel" hasDefault="true" comment="This text will be used as the horizontal label in the diagram.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="yLabel" hasDefault="true" comment="This text will be used as the vertical label in the diagram.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="xRange" hasDefault="true" comment="Determines the horizontal interval that is visible in the diagram. {0,0} will select a suitable range.">
                <dimensions>
                  <dimension size="2"/>
                </dimensions>
              </argument>
              <argument inputOutput="input" className="Real" name="yRange" hasDefault="true" comment="Determines the vertical interval that is visible in the diagram. {0,0} will select a suitable range.">
                <dimensions>
                  <dimension size="2"/>
                </dimensions>
              </argument>
              <argument inputOutput="input" className="Real" name="curveWidth" hasDefault="true" comment="Sets the width of the curve.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="curveStyle" hasDefault="true" comment="Sets the style of the curve. SolidLine=1, DashLine=2, DotLine=3, DashDotLine=4, DashDotDotLine=5, Sticks=6, Steps=7.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="legendPosition" hasDefault="true" comment="Sets the POSITION of the legend i.e left, right, top, bottom, none.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="footer" hasDefault="true" comment="This text will be used as the diagram footer.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="autoScale" hasDefault="true" comment="Use auto scale while plotting.">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="forceOMPlot" hasDefault="true" comment="if true launches OMPlot and doesn't call callback function even if it is defined.">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="Returns true on success">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.readSimulationResult">
          <classes/>
          <code interfaceOnly="true">function readSimulationResult
  input String filename;
  input VariableNames variables;
  input Integer size = 0 "0=read any size... If the size is not the same as the result-file, this function fails";
  output Real result[:, :];
end readSimulationResult;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="filename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.VariableNames" name="variables" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="size" hasDefault="true" comment="0=read any size... If the size is not the same as the result-file, this function fails">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="result" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.readSimulationResultSize">
          <classes/>
          <code interfaceOnly="true">function readSimulationResultSize
  input String fileName;
  output Integer sz;
end readSimulationResultSize;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="sz" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.readSimulationResultVars">
          <classes/>
          <code interfaceOnly="true">function readSimulationResultVars
  input String fileName;
  input Boolean readParameters = true;
  input Boolean openmodelicaStyle = false;
  output String[:] vars;
end readSimulationResultVars;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="readParameters" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="openmodelicaStyle" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="vars" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.filterSimulationResults">
          <classes/>
          <code interfaceOnly="true">function filterSimulationResults
  input String inFile;
  input String outFile;
  input String[:] vars;
  input Integer numberOfIntervals = 0 "0=Do not resample";
  input Boolean removeDescription = false;
  output Boolean success;
end filterSimulationResults;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="inFile" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="outFile" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="vars" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
              <argument inputOutput="input" className="Integer" name="numberOfIntervals" hasDefault="true" comment="0=Do not resample">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="removeDescription" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.compareSimulationResults">
          <classes/>
          <code interfaceOnly="true">function compareSimulationResults
  input String filename;
  input String reffilename;
  input String logfilename;
  input Real relTol = 0.01;
  input Real absTol = 0.0001;
  input String[:] vars = fill("", 0);
  output String[:] result;
end compareSimulationResults;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="filename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="reffilename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="logfilename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="relTol" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="absTol" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="vars" hasDefault="true" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.deltaSimulationResults">
          <classes/>
          <code interfaceOnly="true">function deltaSimulationResults
  input String filename;
  input String reffilename;
  input String method "method to compute then error. choose 1norm, 2norm, maxerr";
  input String[:] vars = fill("", 0);
  output Real result;
end deltaSimulationResults;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="filename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="reffilename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="method" hasDefault="false" comment="method to compute then error. choose 1norm, 2norm, maxerr">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="vars" hasDefault="true" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
              <argument inputOutput="output" className="Real" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.diffSimulationResults">
          <classes/>
          <code interfaceOnly="true">function diffSimulationResults
  input String actualFile;
  input String expectedFile;
  input String diffPrefix;
  input Real relTol = 1e-3 "y tolerance";
  input Real relTolDiffMinMax = 1e-4 "y tolerance based on the difference between the maximum and minimum of the signal";
  input Real rangeDelta = 0.002 "x tolerance";
  input String[:] vars = fill("", 0);
  input Boolean keepEqualResults = false;
  output Boolean success;
  output String[:] failVars;
end diffSimulationResults;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="actualFile" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="expectedFile" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="diffPrefix" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="relTol" hasDefault="true" comment="y tolerance">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="relTolDiffMinMax" hasDefault="true" comment="y tolerance based on the difference between the maximum and minimum of the signal">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="rangeDelta" hasDefault="true" comment="x tolerance">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="vars" hasDefault="true" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
              <argument inputOutput="input" className="Boolean" name="keepEqualResults" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="failVars" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.diffSimulationResultsHtml">
          <classes/>
          <code interfaceOnly="true">function diffSimulationResultsHtml
  input String var;
  input String actualFile;
  input String expectedFile;
  input Real relTol = 1e-3 "y tolerance";
  input Real relTolDiffMinMax = 1e-4 "y tolerance based on the difference between the maximum and minimum of the signal";
  input Real rangeDelta = 0.002 "x tolerance";
  output String html;
end diffSimulationResultsHtml;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="var" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="actualFile" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="expectedFile" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="relTol" hasDefault="true" comment="y tolerance">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="relTolDiffMinMax" hasDefault="true" comment="y tolerance based on the difference between the maximum and minimum of the signal">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="rangeDelta" hasDefault="true" comment="x tolerance">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="html" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.checkTaskGraph">
          <classes/>
          <code interfaceOnly="true">function checkTaskGraph
  input String filename;
  input String reffilename;
  output String[:] result;
end checkTaskGraph;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="filename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="reffilename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.checkCodeGraph">
          <classes/>
          <code interfaceOnly="true">function checkCodeGraph
  input String graphfile;
  input String codefile;
  output String[:] result;
end checkCodeGraph;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="graphfile" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="codefile" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.val">
          <classes/>
          <code interfaceOnly="true">function val
  input VariableName var;
  input Real timePoint = 0.0;
  input String fileName = "&lt;default&gt;" "The contents of the currentSimulationResult variable";
  output Real valAtTime;
end val;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.VariableName" name="var" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="timePoint" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="true" comment="The contents of the currentSimulationResult variable">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="valAtTime" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.closeSimulationResultFile">
          <classes/>
          <code interfaceOnly="true">function closeSimulationResultFile
  output Boolean success;
end closeSimulationResultFile;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.addClassAnnotation">
          <classes/>
          <code interfaceOnly="true">function addClassAnnotation
  input TypeName class_;
  input ExpressionOrModification annotate;
  output Boolean bool;
end addClassAnnotation;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.ExpressionOrModification" name="annotate" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="bool" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getParameterNames">
          <classes/>
          <code interfaceOnly="true">function getParameterNames
  input TypeName class_;
  output String[:] parameters;
end getParameterNames;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="parameters" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getParameterValue">
          <classes/>
          <code interfaceOnly="true">function getParameterValue
  input TypeName class_;
  input String parameterName;
  output String parameterValue;
end getParameterValue;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="parameterName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="parameterValue" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getComponentModifierNames">
          <classes/>
          <code interfaceOnly="true">function getComponentModifierNames
  input TypeName class_;
  input String componentName;
  output String[:] modifiers;
end getComponentModifierNames;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="componentName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="modifiers" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getComponentModifierValue">
          <classes/>
          <code interfaceOnly="true">function getComponentModifierValue
  input TypeName class_;
  input TypeName modifier;
  output String value;
end getComponentModifierValue;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="modifier" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="value" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getComponentModifierValues">
          <classes/>
          <code interfaceOnly="true">function getComponentModifierValues
  input TypeName class_;
  input TypeName modifier;
  output String value;
end getComponentModifierValues;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="modifier" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="value" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getInstantiatedParametersAndValues">
          <classes/>
          <code interfaceOnly="true">function getInstantiatedParametersAndValues
  input TypeName cls;
  output String[:] values;
end getInstantiatedParametersAndValues;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cls" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="values" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.removeComponentModifiers">
          <classes/>
          <code interfaceOnly="true">function removeComponentModifiers
  input TypeName class_;
  input String componentName;
  input Boolean keepRedeclares = false;
  output Boolean success;
end removeComponentModifiers;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="componentName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="keepRedeclares" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.removeExtendsModifiers">
          <classes/>
          <code interfaceOnly="true">function removeExtendsModifiers
  input TypeName className;
  input TypeName baseClassName;
  input Boolean keepRedeclares = false;
  output Boolean success;
end removeExtendsModifiers;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="baseClassName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="keepRedeclares" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.updateConnection">
          <classes/>
          <code interfaceOnly="true">function updateConnection
  input TypeName className;
  input String from;
  input String to;
  input ExpressionOrModification annotate;
  output Boolean result;
end updateConnection;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="from" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="to" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.ExpressionOrModification" name="annotate" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.updateConnectionNames">
          <classes/>
          <code interfaceOnly="true">function updateConnectionNames
  input TypeName className;
  input String from;
  input String to;
  input String fromNew;
  input String toNew;
  output Boolean result;
end updateConnectionNames;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="from" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="to" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="fromNew" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="toNew" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getConnectionCount">
          <classes/>
          <code interfaceOnly="true">function getConnectionCount
  input TypeName className;
  output Integer count;
end getConnectionCount;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="count" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getNthConnection">
          <classes/>
          <code interfaceOnly="true">function getNthConnection
  input TypeName className;
  input Integer index;
  output String[:] result;
end getNthConnection;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="index" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getAlgorithmCount">
          <classes/>
          <code interfaceOnly="true">function getAlgorithmCount
  input TypeName class_;
  output Integer count;
end getAlgorithmCount;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="count" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getNthAlgorithm">
          <classes/>
          <code interfaceOnly="true">function getNthAlgorithm
  input TypeName class_;
  input Integer index;
  output String result;
end getNthAlgorithm;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="index" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getInitialAlgorithmCount">
          <classes/>
          <code interfaceOnly="true">function getInitialAlgorithmCount
  input TypeName class_;
  output Integer count;
end getInitialAlgorithmCount;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="count" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getNthInitialAlgorithm">
          <classes/>
          <code interfaceOnly="true">function getNthInitialAlgorithm
  input TypeName class_;
  input Integer index;
  output String result;
end getNthInitialAlgorithm;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="index" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getAlgorithmItemsCount">
          <classes/>
          <code interfaceOnly="true">function getAlgorithmItemsCount
  input TypeName class_;
  output Integer count;
end getAlgorithmItemsCount;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="count" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getNthAlgorithmItem">
          <classes/>
          <code interfaceOnly="true">function getNthAlgorithmItem
  input TypeName class_;
  input Integer index;
  output String result;
end getNthAlgorithmItem;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="index" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getInitialAlgorithmItemsCount">
          <classes/>
          <code interfaceOnly="true">function getInitialAlgorithmItemsCount
  input TypeName class_;
  output Integer count;
end getInitialAlgorithmItemsCount;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="count" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getNthInitialAlgorithmItem">
          <classes/>
          <code interfaceOnly="true">function getNthInitialAlgorithmItem
  input TypeName class_;
  input Integer index;
  output String result;
end getNthInitialAlgorithmItem;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="index" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getEquationCount">
          <classes/>
          <code interfaceOnly="true">function getEquationCount
  input TypeName class_;
  output Integer count;
end getEquationCount;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="count" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getNthEquation">
          <classes/>
          <code interfaceOnly="true">function getNthEquation
  input TypeName class_;
  input Integer index;
  output String result;
end getNthEquation;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="index" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getInitialEquationCount">
          <classes/>
          <code interfaceOnly="true">function getInitialEquationCount
  input TypeName class_;
  output Integer count;
end getInitialEquationCount;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="count" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getNthInitialEquation">
          <classes/>
          <code interfaceOnly="true">function getNthInitialEquation
  input TypeName class_;
  input Integer index;
  output String result;
end getNthInitialEquation;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="index" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getEquationItemsCount">
          <classes/>
          <code interfaceOnly="true">function getEquationItemsCount
  input TypeName class_;
  output Integer count;
end getEquationItemsCount;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="count" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getNthEquationItem">
          <classes/>
          <code interfaceOnly="true">function getNthEquationItem
  input TypeName class_;
  input Integer index;
  output String result;
end getNthEquationItem;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="index" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getInitialEquationItemsCount">
          <classes/>
          <code interfaceOnly="true">function getInitialEquationItemsCount
  input TypeName class_;
  output Integer count;
end getInitialEquationItemsCount;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="count" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getNthInitialEquationItem">
          <classes/>
          <code interfaceOnly="true">function getNthInitialEquationItem
  input TypeName class_;
  input Integer index;
  output String result;
end getNthInitialEquationItem;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="index" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getAnnotationCount">
          <classes/>
          <code interfaceOnly="true">function getAnnotationCount
  input TypeName class_;
  output Integer count;
end getAnnotationCount;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="count" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getNthAnnotationString">
          <classes/>
          <code interfaceOnly="true">function getNthAnnotationString
  input TypeName class_;
  input Integer index;
  output String result;
end getNthAnnotationString;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="index" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getImportCount">
          <classes/>
          <code interfaceOnly="true">function getImportCount
  input TypeName class_;
  output Integer count;
end getImportCount;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="count" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getNthImport">
          <classes/>
          <code interfaceOnly="true">function getNthImport
  input TypeName class_;
  input Integer index;
  output String out[3] "{\"Path\",\"Id\",\"Kind\"}";
end getNthImport;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="index" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="out" hasDefault="false" comment="{\&quot;Path\&quot;,\&quot;Id\&quot;,\&quot;Kind\&quot;}">
                <dimensions>
                  <dimension size="3"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.iconv">
          <classes/>
          <code interfaceOnly="true">function iconv
  input String string;
  input String from;
  input String to = "UTF-8";
  output String result;
end iconv;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="string" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="from" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="to" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getDocumentationAnnotation">
          <classes/>
          <code interfaceOnly="true">function getDocumentationAnnotation
  input TypeName cl;
  output String out[3] "{info,revision,infoHeader} TODO: Should be changed to have 2 outputs instead of an array of 2 Strings...";
end getDocumentationAnnotation;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="out" hasDefault="false" comment="{info,revision,infoHeader} TODO: Should be changed to have 2 outputs instead of an array of 2 Strings...">
                <dimensions>
                  <dimension size="3"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setDocumentationAnnotation">
          <classes/>
          <code interfaceOnly="true">function setDocumentationAnnotation
  input TypeName class_;
  input String info = "";
  input String revisions = "";
  output Boolean bool;
end setDocumentationAnnotation;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="class_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="info" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="revisions" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="bool" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getTimeStamp">
          <classes/>
          <code interfaceOnly="true">function getTimeStamp
  input TypeName cl;
  output Real timeStamp;
  output String timeStampAsString;
end getTimeStamp;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="timeStamp" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="timeStampAsString" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.stringTypeName">
          <classes/>
          <code interfaceOnly="true">function stringTypeName
  input String str;
  output TypeName cl;
end stringTypeName;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="str" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.stringVariableName">
          <classes/>
          <code interfaceOnly="true">function stringVariableName
  input String str;
  output VariableName cl;
end stringVariableName;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="str" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="OpenModelica.$Code.VariableName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.typeNameString">
          <classes/>
          <code interfaceOnly="true">function typeNameString
  input TypeName cl;
  output String out;
end typeNameString;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="out" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.typeNameStrings">
          <classes/>
          <code interfaceOnly="true">function typeNameStrings
  input TypeName cl;
  output String out[:];
end typeNameStrings;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="out" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getClassComment">
          <classes/>
          <code interfaceOnly="true">function getClassComment
  input TypeName cl;
  output String comment;
end getClassComment;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="comment" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.dirname">
          <classes/>
          <code interfaceOnly="true">function dirname
  input String path;
  output String dirname;
end dirname;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="path" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="dirname" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.basename">
          <classes/>
          <code interfaceOnly="true">function basename
  input String path;
  output String basename;
end basename;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="path" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="basename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getClassRestriction">
          <classes/>
          <code interfaceOnly="true">function getClassRestriction
  input TypeName cl;
  output String restriction;
end getClassRestriction;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="restriction" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.isType">
          <classes/>
          <code interfaceOnly="true">function isType
  input TypeName cl;
  output Boolean b;
end isType;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="b" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.isPackage">
          <classes/>
          <code interfaceOnly="true">function isPackage
  input TypeName cl;
  output Boolean b;
end isPackage;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="b" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.isClass">
          <classes/>
          <code interfaceOnly="true">function isClass
  input TypeName cl;
  output Boolean b;
end isClass;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="b" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.isRecord">
          <classes/>
          <code interfaceOnly="true">function isRecord
  input TypeName cl;
  output Boolean b;
end isRecord;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="b" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.isBlock">
          <classes/>
          <code interfaceOnly="true">function isBlock
  input TypeName cl;
  output Boolean b;
end isBlock;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="b" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.isFunction">
          <classes/>
          <code interfaceOnly="true">function isFunction
  input TypeName cl;
  output Boolean b;
end isFunction;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="b" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.isPartial">
          <classes/>
          <code interfaceOnly="true">function isPartial
  input TypeName cl;
  output Boolean b;
end isPartial;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="b" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.isModel">
          <classes/>
          <code interfaceOnly="true">function isModel
  input TypeName cl;
  output Boolean b;
end isModel;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="b" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.isConnector">
          <classes/>
          <code interfaceOnly="true">function isConnector
  input TypeName cl;
  output Boolean b;
end isConnector;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="b" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.isOptimization">
          <classes/>
          <code interfaceOnly="true">function isOptimization
  input TypeName cl;
  output Boolean b;
end isOptimization;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="b" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.isEnumeration">
          <classes/>
          <code interfaceOnly="true">function isEnumeration
  input TypeName cl;
  output Boolean b;
end isEnumeration;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="b" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.isOperator">
          <classes/>
          <code interfaceOnly="true">function isOperator
  input TypeName cl;
  output Boolean b;
end isOperator;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="b" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.isOperatorRecord">
          <classes/>
          <code interfaceOnly="true">function isOperatorRecord
  input TypeName cl;
  output Boolean b;
end isOperatorRecord;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="b" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.isOperatorFunction">
          <classes/>
          <code interfaceOnly="true">function isOperatorFunction
  input TypeName cl;
  output Boolean b;
end isOperatorFunction;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="b" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.isProtectedClass">
          <classes/>
          <code interfaceOnly="true">function isProtectedClass
  input TypeName cl;
  input String c2;
  output Boolean b;
end isProtectedClass;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="c2" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="b" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getBuiltinType">
          <classes/>
          <code interfaceOnly="true">function getBuiltinType
  input TypeName cl;
  output String name;
end getBuiltinType;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="name" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.setInitXmlStartValue">
          <classes/>
          <code interfaceOnly="true">function setInitXmlStartValue
  input String fileName;
  input String variableName;
  input String startValue;
  input String outputFile;
  output Boolean success = false;
end setInitXmlStartValue;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="variableName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="startValue" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="outputFile" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="true" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.ngspicetoModelica">
          <classes/>
          <code interfaceOnly="true">function ngspicetoModelica
  input String netlistfileName;
  output Boolean success = false;
end ngspicetoModelica;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="netlistfileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="true" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getInheritedClasses">
          <classes/>
          <code interfaceOnly="true">function getInheritedClasses
  input TypeName name;
  output TypeName inheritedClasses[:];
end getInheritedClasses;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="name" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="OpenModelica.$Code.TypeName" name="inheritedClasses" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getComponentsTest">
          <classes>
            <record id="OpenModelica.Scripting.getComponentsTest.Component">
              <classes/>
              <code interfaceOnly="false">record Component
  String className;
  // when building record the constructor. Records are allowed to contain only components of basic types, arrays of basic types or other records.
  String name;
  String comment;
  Boolean isProtected;
  Boolean isFinal;
  Boolean isFlow;
  Boolean isStream;
  Boolean isReplaceable;
  String variability "'constant', 'parameter', 'discrete', ''";
  String innerOuter "'inner', 'outer', ''";
  String inputOutput "'input', 'output', ''";
  String dimensions[:];
end Component;</code>
              <components>
                <elements>
                  <element className="String" name="className" comment="">
                    <dimensions/>
                  </element>
                  <element className="String" name="name" comment="">
                    <dimensions/>
                  </element>
                  <element className="String" name="comment" comment="">
                    <dimensions/>
                  </element>
                  <element className="Boolean" name="isProtected" comment="">
                    <dimensions/>
                  </element>
                  <element className="Boolean" name="isFinal" comment="">
                    <dimensions/>
                  </element>
                  <element className="Boolean" name="isFlow" comment="">
                    <dimensions/>
                  </element>
                  <element className="Boolean" name="isStream" comment="">
                    <dimensions/>
                  </element>
                  <element className="Boolean" name="isReplaceable" comment="">
                    <dimensions/>
                  </element>
                  <element className="String" name="variability" comment="'constant', 'parameter', 'discrete', ''">
                    <dimensions/>
                  </element>
                  <element className="String" name="innerOuter" comment="'inner', 'outer', ''">
                    <dimensions/>
                  </element>
                  <element className="String" name="inputOutput" comment="'input', 'output', ''">
                    <dimensions/>
                  </element>
                  <element className="String" name="dimensions" comment="">
                    <dimensions>
                      <dimension size=":"/>
                    </dimensions>
                  </element>
                </elements>
              </components>
            </record>
          </classes>
          <code interfaceOnly="true">function getComponentsTest
  input TypeName name;
  output Component[:] components;

  record Component
    String className;
    // when building record the constructor. Records are allowed to contain only components of basic types, arrays of basic types or other records.
    String name;
    String comment;
    Boolean isProtected;
    Boolean isFinal;
    Boolean isFlow;
    Boolean isStream;
    Boolean isReplaceable;
    String variability "'constant', 'parameter', 'discrete', ''";
    String innerOuter "'inner', 'outer', ''";
    String inputOutput "'input', 'output', ''";
    String dimensions[:];
  end Component;
end getComponentsTest;</code>
          <components>
            <arguments/>
          </components>
        </function>
        <function id="OpenModelica.Scripting.isExperiment">
          <classes/>
          <code interfaceOnly="true">function isExperiment
  input TypeName name;
  output Boolean res;
end isExperiment;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="name" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="res" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getSimulationOptions">
          <classes/>
          <code interfaceOnly="true">function getSimulationOptions
  input TypeName name;
  input Real defaultStartTime = 0.0;
  input Real defaultStopTime = 1.0;
  input Real defaultTolerance = 1e-6;
  input Integer defaultNumberOfIntervals = 500 "May be overridden by defining defaultInterval instead";
  input Real defaultInterval = 0.0 "If = 0.0, then numberOfIntervals is used to calculate the step size";
  output Real startTime;
  output Real stopTime;
  output Real tolerance;
  output Integer numberOfIntervals;
  output Real interval;
end getSimulationOptions;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="name" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="defaultStartTime" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="defaultStopTime" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="defaultTolerance" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="defaultNumberOfIntervals" hasDefault="true" comment="May be overridden by defining defaultInterval instead">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="defaultInterval" hasDefault="true" comment="If = 0.0, then numberOfIntervals is used to calculate the step size">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="startTime" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="stopTime" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="tolerance" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="numberOfIntervals" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="interval" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getAnnotationNamedModifiers">
          <classes/>
          <code interfaceOnly="true">function getAnnotationNamedModifiers
  input TypeName name;
  input String vendorannotation;
  output String[:] modifiernamelist;
end getAnnotationNamedModifiers;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="name" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="vendorannotation" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="modifiernamelist" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getAnnotationModifierValue">
          <classes/>
          <code interfaceOnly="true">function getAnnotationModifierValue
  input TypeName name;
  input String vendorannotation;
  input String modifiername;
  output String modifiernamevalue;
end getAnnotationModifierValue;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="name" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="vendorannotation" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="modifiername" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="modifiernamevalue" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.classAnnotationExists">
          <classes/>
          <code interfaceOnly="true">function classAnnotationExists
  input TypeName className;
  input TypeName annotationName;
  output Boolean exists;
end classAnnotationExists;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="annotationName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="exists" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getBooleanClassAnnotation">
          <classes/>
          <code interfaceOnly="true">function getBooleanClassAnnotation
  input TypeName className;
  input TypeName annotationName;
  output Boolean value;
end getBooleanClassAnnotation;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="annotationName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="value" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.extendsFrom">
          <classes/>
          <code interfaceOnly="true">function extendsFrom
  input TypeName className;
  input TypeName baseClassName;
  output Boolean res;
end extendsFrom;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="baseClassName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="res" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.loadModelica3D">
          <classes/>
          <code interfaceOnly="true">function loadModelica3D
  input String version = "3.2.1";
  output Boolean status;
end loadModelica3D;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="version" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.searchClassNames">
          <classes/>
          <code interfaceOnly="true">function searchClassNames
  input String searchText;
  input Boolean findInText = false;
  output TypeName classNames[:];
end searchClassNames;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="searchText" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="findInText" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="OpenModelica.$Code.TypeName" name="classNames" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getAvailableLibraries">
          <classes/>
          <code interfaceOnly="true">function getAvailableLibraries
  output String[:] libraries;
end getAvailableLibraries;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="libraries" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getUses">
          <classes/>
          <code interfaceOnly="true">function getUses
  input TypeName pack;
  output String[:, :] uses;
end getUses;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="pack" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="uses" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getDerivedClassModifierNames">
          <classes/>
          <code interfaceOnly="true">function getDerivedClassModifierNames
  input TypeName className;
  output String[:] modifierNames;
end getDerivedClassModifierNames;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="modifierNames" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getDerivedClassModifierValue">
          <classes/>
          <code interfaceOnly="true">function getDerivedClassModifierValue
  input TypeName className;
  input TypeName modifierName;
  output String modifierValue;
end getDerivedClassModifierValue;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="className" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="modifierName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="modifierValue" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.generateEntryPoint">
          <classes/>
          <code interfaceOnly="true">function generateEntryPoint
  input String fileName;
  input TypeName entryPoint;
  input String url = "https://trac.openmodelica.org/OpenModelica/newticket";
end generateEntryPoint;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="entryPoint" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="url" hasDefault="true" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.numProcessors">
          <classes/>
          <code interfaceOnly="true">function numProcessors
  output Integer result;
end numProcessors;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Integer" name="result" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.runScriptParallel">
          <classes/>
          <code interfaceOnly="true">function runScriptParallel
  input String scripts[:];
  input Integer numThreads = numProcessors();
  input Boolean useThreads = false;
  output Boolean results[:];
end runScriptParallel;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="scripts" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
              <argument inputOutput="input" className="Integer" name="numThreads" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="useThreads" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="results" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.exit">
          <classes/>
          <code interfaceOnly="true">function exit
  input Integer status;
end exit;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.threadWorkFailed">
          <classes/>
          <code interfaceOnly="true"></code>
          <components>
            <arguments/>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getMemorySize">
          <classes/>
          <code interfaceOnly="true">function getMemorySize
  output Real memory(unit = "MiB");
end getMemorySize;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Real" name="memory" hasDefault="true" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.GC_gcollect_and_unmap">
          <classes/>
          <code interfaceOnly="true"></code>
          <components>
            <arguments/>
          </components>
        </function>
        <function id="OpenModelica.Scripting.GC_expand_hp">
          <classes/>
          <code interfaceOnly="true">function GC_expand_hp
  input Integer size;
  output Boolean success;
end GC_expand_hp;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="Integer" name="size" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.GC_set_max_heap_size">
          <classes/>
          <code interfaceOnly="true">function GC_set_max_heap_size
  input Integer size;
  output Boolean success;
end GC_set_max_heap_size;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="Integer" name="size" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <record id="OpenModelica.Scripting.GC_PROFSTATS">
          <classes/>
          <code interfaceOnly="false">record GC_PROFSTATS
  Integer heapsize_full;
  Integer free_bytes_full;
  Integer unmapped_bytes;
  Integer bytes_allocd_since_gc;
  Integer allocd_bytes_before_gc;
  Integer non_gc_bytes;
  Integer gc_no;
  Integer markers_m1;
  Integer bytes_reclaimed_since_gc;
  Integer reclaimed_bytes_before_gc;
end GC_PROFSTATS;</code>
          <components>
            <elements>
              <element className="Integer" name="heapsize_full" comment="">
                <dimensions/>
              </element>
              <element className="Integer" name="free_bytes_full" comment="">
                <dimensions/>
              </element>
              <element className="Integer" name="unmapped_bytes" comment="">
                <dimensions/>
              </element>
              <element className="Integer" name="bytes_allocd_since_gc" comment="">
                <dimensions/>
              </element>
              <element className="Integer" name="allocd_bytes_before_gc" comment="">
                <dimensions/>
              </element>
              <element className="Integer" name="non_gc_bytes" comment="">
                <dimensions/>
              </element>
              <element className="Integer" name="gc_no" comment="">
                <dimensions/>
              </element>
              <element className="Integer" name="markers_m1" comment="">
                <dimensions/>
              </element>
              <element className="Integer" name="bytes_reclaimed_since_gc" comment="">
                <dimensions/>
              </element>
              <element className="Integer" name="reclaimed_bytes_before_gc" comment="">
                <dimensions/>
              </element>
            </elements>
          </components>
        </record>
        <function id="OpenModelica.Scripting.GC_get_prof_stats">
          <classes/>
          <code interfaceOnly="true">function GC_get_prof_stats
  output GC_PROFSTATS gcStats;
end GC_get_prof_stats;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="OpenModelica.Scripting.GC_PROFSTATS" name="gcStats" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.checkInterfaceOfPackages">
          <classes/>
          <code interfaceOnly="true">function checkInterfaceOfPackages
  input TypeName cl;
  input String dependencyMatrix[:, :];
  output Boolean success;
end checkInterfaceOfPackages;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="dependencyMatrix" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                  <dimension size=":"/>
                </dimensions>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.sortStrings">
          <classes/>
          <code interfaceOnly="true">function sortStrings
  input String arr[:];
  output String sorted[:];
end sortStrings;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="arr" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
              <argument inputOutput="output" className="String" name="sorted" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getClassInformation">
          <classes/>
          <code interfaceOnly="true">function getClassInformation
  input TypeName cl;
  output String restriction, comment;
  output Boolean partialPrefix, finalPrefix, encapsulatedPrefix;
  output String fileName;
  output Boolean fileReadOnly;
  output Integer lineNumberStart, columnNumberStart, lineNumberEnd, columnNumberEnd;
  output String dimensions[:];
  output Boolean isProtectedClass;
  output Boolean isDocumentationClass;
  output String version;
  output String preferredView;
  output Boolean state;
  output String access;
end getClassInformation;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="comment" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="restriction" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="encapsulatedPrefix" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="finalPrefix" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="partialPrefix" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="fileName" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="fileReadOnly" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="columnNumberEnd" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="lineNumberEnd" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="columnNumberStart" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="lineNumberStart" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="dimensions" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                </dimensions>
              </argument>
              <argument inputOutput="output" className="Boolean" name="isProtectedClass" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="isDocumentationClass" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="version" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="preferredView" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="state" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="access" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getTransitions">
          <classes/>
          <code interfaceOnly="true">function getTransitions
  input TypeName cl;
  output String[:, :] transitions;
end getTransitions;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="transitions" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.addTransition">
          <classes/>
          <code interfaceOnly="true">function addTransition
  input TypeName cl;
  input String from;
  input String to;
  input String condition;
  input Boolean immediate = true;
  input Boolean reset = true;
  input Boolean synchronize = false;
  input Integer priority = 1;
  input ExpressionOrModification annotate;
  output Boolean bool;
end addTransition;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="from" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="to" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="condition" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="immediate" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="reset" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="synchronize" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="priority" hasDefault="true" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.ExpressionOrModification" name="annotate" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="bool" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.deleteTransition">
          <classes/>
          <code interfaceOnly="true">function deleteTransition
  input TypeName cl;
  input String from;
  input String to;
  input String condition;
  input Boolean immediate;
  input Boolean reset;
  input Boolean synchronize;
  input Integer priority;
  output Boolean bool;
end deleteTransition;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="from" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="to" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="condition" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="immediate" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="reset" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="synchronize" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="priority" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="bool" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.updateTransition">
          <classes/>
          <code interfaceOnly="true">function updateTransition
  input TypeName cl;
  input String from;
  input String to;
  input String oldCondition;
  input Boolean oldImmediate;
  input Boolean oldReset;
  input Boolean oldSynchronize;
  input Integer oldPriority;
  input String newCondition;
  input Boolean newImmediate;
  input Boolean newReset;
  input Boolean newSynchronize;
  input Integer newPriority;
  input ExpressionOrModification annotate;
  output Boolean bool;
end updateTransition;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="from" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="to" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="oldCondition" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="oldImmediate" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="oldReset" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="oldSynchronize" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="oldPriority" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="newCondition" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="newImmediate" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="newReset" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="newSynchronize" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="newPriority" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.ExpressionOrModification" name="annotate" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="bool" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.getInitialStates">
          <classes/>
          <code interfaceOnly="true">function getInitialStates
  input TypeName cl;
  output String[:, :] initialStates;
end getInitialStates;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="initialStates" hasDefault="false" comment="">
                <dimensions>
                  <dimension size=":"/>
                  <dimension size=":"/>
                </dimensions>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.addInitialState">
          <classes/>
          <code interfaceOnly="true">function addInitialState
  input TypeName cl;
  input String state;
  input ExpressionOrModification annotate;
  output Boolean bool;
end addInitialState;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="state" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.ExpressionOrModification" name="annotate" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="bool" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.deleteInitialState">
          <classes/>
          <code interfaceOnly="true">function deleteInitialState
  input TypeName cl;
  input String state;
  output Boolean bool;
end deleteInitialState;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="state" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="bool" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.updateInitialState">
          <classes/>
          <code interfaceOnly="true">function updateInitialState
  input TypeName cl;
  input String state;
  input ExpressionOrModification annotate;
  output Boolean bool;
end updateInitialState;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="state" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.$Code.ExpressionOrModification" name="annotate" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="bool" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.generateScriptingAPI">
          <classes/>
          <code interfaceOnly="true">function generateScriptingAPI
  input TypeName cl;
  input String name;
  output Boolean success;
  output String moFile;
  output String qtFile;
  output String qtHeader;
end generateScriptingAPI;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="OpenModelica.$Code.TypeName" name="cl" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="name" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="moFile" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="qtFile" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="qtHeader" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <type id="OpenModelica.Scripting.oms_system">
          <classes/>
          <code interfaceOnly="false">type oms_system = enumeration(oms_system_none, oms_system_tlm, oms_system_wc, oms_system_sc);</code>
          <components>
            <enumerators>
              <enumerator name="oms_system_none" comment=""/>
              <enumerator name="oms_system_tlm" comment=""/>
              <enumerator name="oms_system_wc" comment=""/>
              <enumerator name="oms_system_sc" comment=""/>
            </enumerators>
          </components>
        </type>
        <type id="OpenModelica.Scripting.oms_causality">
          <classes/>
          <code interfaceOnly="false">type oms_causality = enumeration(oms_causality_input, oms_causality_output, oms_causality_parameter, oms_causality_bidir, oms_causality_undefined);</code>
          <components>
            <enumerators>
              <enumerator name="oms_causality_input" comment=""/>
              <enumerator name="oms_causality_output" comment=""/>
              <enumerator name="oms_causality_parameter" comment=""/>
              <enumerator name="oms_causality_bidir" comment=""/>
              <enumerator name="oms_causality_undefined" comment=""/>
            </enumerators>
          </components>
        </type>
        <type id="OpenModelica.Scripting.oms_signal_type">
          <classes/>
          <code interfaceOnly="false">type oms_signal_type = enumeration(oms_signal_type_real, oms_signal_type_integer, oms_signal_type_boolean, oms_signal_type_string, oms_signal_type_enum, oms_signal_type_bus);</code>
          <components>
            <enumerators>
              <enumerator name="oms_signal_type_real" comment=""/>
              <enumerator name="oms_signal_type_integer" comment=""/>
              <enumerator name="oms_signal_type_boolean" comment=""/>
              <enumerator name="oms_signal_type_string" comment=""/>
              <enumerator name="oms_signal_type_enum" comment=""/>
              <enumerator name="oms_signal_type_bus" comment=""/>
            </enumerators>
          </components>
        </type>
        <type id="OpenModelica.Scripting.oms_solver">
          <classes/>
          <code interfaceOnly="false">type oms_solver = enumeration(oms_solver_none, oms_solver_sc_min, oms_solver_sc_explicit_euler, oms_solver_sc_cvode, oms_solver_sc_max, oms_solver_wc_min, oms_solver_wc_ma, oms_solver_wc_mav, oms_solver_wc_assc, oms_solver_wc_mav2, oms_solver_wc_max);</code>
          <components>
            <enumerators>
              <enumerator name="oms_solver_none" comment=""/>
              <enumerator name="oms_solver_sc_min" comment=""/>
              <enumerator name="oms_solver_sc_explicit_euler" comment=""/>
              <enumerator name="oms_solver_sc_cvode" comment=""/>
              <enumerator name="oms_solver_sc_max" comment=""/>
              <enumerator name="oms_solver_wc_min" comment=""/>
              <enumerator name="oms_solver_wc_ma" comment=""/>
              <enumerator name="oms_solver_wc_mav" comment=""/>
              <enumerator name="oms_solver_wc_assc" comment=""/>
              <enumerator name="oms_solver_wc_mav2" comment=""/>
              <enumerator name="oms_solver_wc_max" comment=""/>
            </enumerators>
          </components>
        </type>
        <type id="OpenModelica.Scripting.oms_tlm_domain">
          <classes/>
          <code interfaceOnly="false">type oms_tlm_domain = enumeration(oms_tlm_domain_input, oms_tlm_domain_output, oms_tlm_domain_mechanical, oms_tlm_domain_rotational, oms_tlm_domain_hydraulic, oms_tlm_domain_electric);</code>
          <components>
            <enumerators>
              <enumerator name="oms_tlm_domain_input" comment=""/>
              <enumerator name="oms_tlm_domain_output" comment=""/>
              <enumerator name="oms_tlm_domain_mechanical" comment=""/>
              <enumerator name="oms_tlm_domain_rotational" comment=""/>
              <enumerator name="oms_tlm_domain_hydraulic" comment=""/>
              <enumerator name="oms_tlm_domain_electric" comment=""/>
            </enumerators>
          </components>
        </type>
        <type id="OpenModelica.Scripting.oms_tlm_interpolation">
          <classes/>
          <code interfaceOnly="false">type oms_tlm_interpolation = enumeration(oms_tlm_no_interpolation, oms_tlm_coarse_grained, oms_tlm_fine_grained);</code>
          <components>
            <enumerators>
              <enumerator name="oms_tlm_no_interpolation" comment=""/>
              <enumerator name="oms_tlm_coarse_grained" comment=""/>
              <enumerator name="oms_tlm_fine_grained" comment=""/>
            </enumerators>
          </components>
        </type>
        <function id="OpenModelica.Scripting.loadOMSimulator">
          <classes/>
          <code interfaceOnly="true">function loadOMSimulator
  output Integer status;
end loadOMSimulator;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.unloadOMSimulator">
          <classes/>
          <code interfaceOnly="true">function unloadOMSimulator
  output Integer status;
end unloadOMSimulator;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_addBus">
          <classes/>
          <code interfaceOnly="true">function oms_addBus
  input String cref;
  output Integer status;
end oms_addBus;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_addConnection">
          <classes/>
          <code interfaceOnly="true">function oms_addConnection
  input String crefA;
  input String crefB;
  output Integer status;
end oms_addConnection;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="crefA" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="crefB" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_addConnector">
          <classes/>
          <code interfaceOnly="true">function oms_addConnector
  input String cref;
  input oms_causality causality;
  input oms_signal_type type_;
  output Integer status;
end oms_addConnector;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.Scripting.oms_causality" name="causality" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.Scripting.oms_signal_type" name="type_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_addConnectorToBus">
          <classes/>
          <code interfaceOnly="true">function oms_addConnectorToBus
  input String busCref;
  input String connectorCref;
  output Integer status;
end oms_addConnectorToBus;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="busCref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="connectorCref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_addConnectorToTLMBus">
          <classes/>
          <code interfaceOnly="true">function oms_addConnectorToTLMBus
  input String busCref;
  input String connectorCref;
  input String type_;
  output Integer status;
end oms_addConnectorToTLMBus;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="busCref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="connectorCref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="type_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_addDynamicValueIndicator">
          <classes/>
          <code interfaceOnly="true">function oms_addDynamicValueIndicator
  input String signal;
  input String lower;
  input String upper;
  input Real stepSize;
  output Integer status;
end oms_addDynamicValueIndicator;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="signal" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="lower" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="upper" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="stepSize" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_addEventIndicator">
          <classes/>
          <code interfaceOnly="true">function oms_addEventIndicator
  input String signal;
  output Integer status;
end oms_addEventIndicator;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="signal" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_addExternalModel">
          <classes/>
          <code interfaceOnly="true">function oms_addExternalModel
  input String cref;
  input String path;
  input String startscript;
  output Integer status;
end oms_addExternalModel;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="path" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="startscript" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_addSignalsToResults">
          <classes/>
          <code interfaceOnly="true">function oms_addSignalsToResults
  input String cref;
  input String regex;
  output Integer status;
end oms_addSignalsToResults;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="regex" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_addStaticValueIndicator">
          <classes/>
          <code interfaceOnly="true">function oms_addStaticValueIndicator
  input String signal;
  input Real lower;
  input Real upper;
  input Real stepSize;
  output Integer status;
end oms_addStaticValueIndicator;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="signal" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="lower" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="upper" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="stepSize" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_addSubModel">
          <classes/>
          <code interfaceOnly="true">function oms_addSubModel
  input String cref;
  input String fmuPath;
  output Integer status;
end oms_addSubModel;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="fmuPath" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_addSystem">
          <classes/>
          <code interfaceOnly="true">function oms_addSystem
  input String cref;
  input oms_system type_;
  output Integer status;
end oms_addSystem;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.Scripting.oms_system" name="type_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_addTimeIndicator">
          <classes/>
          <code interfaceOnly="true">function oms_addTimeIndicator
  input String signal;
  output Integer status;
end oms_addTimeIndicator;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="signal" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_addTLMBus">
          <classes/>
          <code interfaceOnly="true">function oms_addTLMBus
  input String cref;
  input oms_tlm_domain domain;
  input Integer dimensions;
  input oms_tlm_interpolation interpolation;
  output Integer status;
end oms_addTLMBus;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.Scripting.oms_tlm_domain" name="domain" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="dimensions" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.Scripting.oms_tlm_interpolation" name="interpolation" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_addTLMConnection">
          <classes/>
          <code interfaceOnly="true">function oms_addTLMConnection
  input String crefA;
  input String crefB;
  input Real delay;
  input Real alpha;
  input Real linearimpedance;
  input Real angularimpedance;
  output Integer status;
end oms_addTLMConnection;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="crefA" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="crefB" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="delay" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="alpha" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="linearimpedance" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="angularimpedance" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_cancelSimulation_asynchronous">
          <classes/>
          <code interfaceOnly="true">function oms_cancelSimulation_asynchronous
  input String cref;
  output Integer status;
end oms_cancelSimulation_asynchronous;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_compareSimulationResults">
          <classes/>
          <code interfaceOnly="true">function oms_compareSimulationResults
  input String filenameA;
  input String filenameB;
  input String var;
  input Real relTol;
  input Real absTol;
  output Integer status;
end oms_compareSimulationResults;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="filenameA" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="filenameB" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="var" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="relTol" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="absTol" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_copySystem">
          <classes/>
          <code interfaceOnly="true">function oms_copySystem
  input String source;
  input String target;
  output Integer status;
end oms_copySystem;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="source" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="target" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_delete">
          <classes/>
          <code interfaceOnly="true">function oms_delete
  input String cref;
  output Integer status;
end oms_delete;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_deleteConnection">
          <classes/>
          <code interfaceOnly="true">function oms_deleteConnection
  input String crefA;
  input String crefB;
  output Integer status;
end oms_deleteConnection;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="crefA" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="crefB" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_deleteConnectorFromBus">
          <classes/>
          <code interfaceOnly="true">function oms_deleteConnectorFromBus
  input String busCref;
  input String connectorCref;
  output Integer status;
end oms_deleteConnectorFromBus;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="busCref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="connectorCref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_deleteConnectorFromTLMBus">
          <classes/>
          <code interfaceOnly="true">function oms_deleteConnectorFromTLMBus
  input String busCref;
  input String connectorCref;
  output Integer status;
end oms_deleteConnectorFromTLMBus;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="busCref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="connectorCref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_export">
          <classes/>
          <code interfaceOnly="true">function oms_export
  input String cref;
  input String filename;
  output Integer status;
end oms_export;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="filename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_exportDependencyGraphs">
          <classes/>
          <code interfaceOnly="true">function oms_exportDependencyGraphs
  input String cref;
  input String initialization;
  input String simulation;
  output Integer status;
end oms_exportDependencyGraphs;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="initialization" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="simulation" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_extractFMIKind">
          <classes/>
          <code interfaceOnly="true">function oms_extractFMIKind
  input String filename;
  output Integer status;
  output Integer kind;
end oms_extractFMIKind;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="filename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="kind" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_getBoolean">
          <classes/>
          <code interfaceOnly="true">function oms_getBoolean
  input String cref;
  output Integer status;
  output Boolean value;
end oms_getBoolean;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Boolean" name="value" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_getFixedStepSize">
          <classes/>
          <code interfaceOnly="true">function oms_getFixedStepSize
  input String cref;
  output Integer status;
  output Real stepSize;
end oms_getFixedStepSize;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="stepSize" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_getInteger">
          <classes/>
          <code interfaceOnly="true">function oms_getInteger
  input String cref;
  output Integer status;
  input Integer value;
end oms_getInteger;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="value" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_getModelState">
          <classes/>
          <code interfaceOnly="true">function oms_getModelState
  input String cref;
  output Integer status;
  output Integer modelState;
end oms_getModelState;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="modelState" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_getReal">
          <classes/>
          <code interfaceOnly="true">function oms_getReal
  input String cref;
  output Integer status;
  output Real value;
end oms_getReal;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="value" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_getSolver">
          <classes/>
          <code interfaceOnly="true">function oms_getSolver
  input String cref;
  output Integer status;
  output Integer solver;
end oms_getSolver;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="solver" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_getStartTime">
          <classes/>
          <code interfaceOnly="true">function oms_getStartTime
  input String cref;
  output Integer status;
  output Real startTime;
end oms_getStartTime;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="startTime" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_getStopTime">
          <classes/>
          <code interfaceOnly="true">function oms_getStopTime
  input String cref;
  output Integer status;
  output Real stopTime;
end oms_getStopTime;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="stopTime" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_getSubModelPath">
          <classes/>
          <code interfaceOnly="true">function oms_getSubModelPath
  input String cref;
  output Integer status;
  output String path;
end oms_getSubModelPath;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="path" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_getSystemType">
          <classes/>
          <code interfaceOnly="true">function oms_getSystemType
  input String cref;
  output Integer status;
  output Integer type_;
end oms_getSystemType;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="type_" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_getTolerance">
          <classes/>
          <code interfaceOnly="true">function oms_getTolerance
  input String cref;
  output Integer status;
  output Real absoluteTolerance;
  output Real relativeTolerance;
end oms_getTolerance;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="absoluteTolerance" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="relativeTolerance" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_getVariableStepSize">
          <classes/>
          <code interfaceOnly="true">function oms_getVariableStepSize
  input String cref;
  output Integer status;
  output Real initialStepSize;
  output Real minimumStepSize;
  output Real maximumStepSize;
end oms_getVariableStepSize;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="initialStepSize" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="minimumStepSize" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Real" name="maximumStepSize" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_faultInjection">
          <classes/>
          <code interfaceOnly="true">function oms_faultInjection
  input String signal;
  input oms_fault_type_enu_t faultType;
  input Real faultValue;
  output Integer status;
end oms_faultInjection;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="signal" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="oms_fault_type_enu_t" name="faultType" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="faultValue" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_importFile">
          <classes/>
          <code interfaceOnly="true">function oms_importFile
  input String filename;
  output Integer status;
  output String cref;
end oms_importFile;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="filename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_initialize">
          <classes/>
          <code interfaceOnly="true">function oms_initialize
  input String cref;
  output Integer status;
end oms_initialize;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_instantiate">
          <classes/>
          <code interfaceOnly="true">function oms_instantiate
  input String cref;
  output Integer status;
end oms_instantiate;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_list">
          <classes/>
          <code interfaceOnly="true">function oms_list
  input String cref;
  output Integer status;
  output String contents;
end oms_list;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="contents" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_listUnconnectedConnectors">
          <classes/>
          <code interfaceOnly="true">function oms_listUnconnectedConnectors
  input String cref;
  output Integer status;
  output String contents;
end oms_listUnconnectedConnectors;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="contents" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_loadSnapshot">
          <classes/>
          <code interfaceOnly="true">function oms_loadSnapshot
  input String cref;
  input String snapshot;
  output Integer status;
end oms_loadSnapshot;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="snapshot" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_newModel">
          <classes/>
          <code interfaceOnly="true">function oms_newModel
  input String cref;
  output Integer status;
end oms_newModel;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_parseModelName">
          <classes/>
          <code interfaceOnly="true">function oms_parseModelName
  input String contents;
  output Integer status;
  output String cref;
end oms_parseModelName;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="contents" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_removeSignalsFromResults">
          <classes/>
          <code interfaceOnly="true">function oms_removeSignalsFromResults
  input String cref;
  input String regex;
  output Integer status;
end oms_removeSignalsFromResults;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="regex" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_rename">
          <classes/>
          <code interfaceOnly="true">function oms_rename
  input String cref;
  input String newCref;
  output Integer status;
end oms_rename;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="newCref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_reset">
          <classes/>
          <code interfaceOnly="true">function oms_reset
  input String cref;
  output Integer status;
end oms_reset;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_RunFile">
          <classes/>
          <code interfaceOnly="true">function oms_RunFile
  input String filename;
  output Integer status;
end oms_RunFile;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="filename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setBoolean">
          <classes/>
          <code interfaceOnly="true">function oms_setBoolean
  input String cref;
  input Boolean value;
  output Integer status;
end oms_setBoolean;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Boolean" name="value" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setCommandLineOption">
          <classes/>
          <code interfaceOnly="true">function oms_setCommandLineOption
  input String cmd;
  output Integer status;
end oms_setCommandLineOption;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cmd" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setFixedStepSize">
          <classes/>
          <code interfaceOnly="true">function oms_setFixedStepSize
  input String cref;
  input Real stepSize;
  output Integer status;
end oms_setFixedStepSize;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="stepSize" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setInteger">
          <classes/>
          <code interfaceOnly="true">function oms_setInteger
  input String cref;
  input Integer value;
  output Integer status;
end oms_setInteger;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="value" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setLogFile">
          <classes/>
          <code interfaceOnly="true">function oms_setLogFile
  input String filename;
  output Integer status;
end oms_setLogFile;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="filename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setLoggingInterval">
          <classes/>
          <code interfaceOnly="true">function oms_setLoggingInterval
  input String cref;
  input Real loggingInterval;
  output Integer status;
end oms_setLoggingInterval;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="loggingInterval" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setLoggingLevel">
          <classes/>
          <code interfaceOnly="true">function oms_setLoggingLevel
  input Integer logLevel;
  output Integer status;
end oms_setLoggingLevel;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="Integer" name="logLevel" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setReal">
          <classes/>
          <code interfaceOnly="true">function oms_setReal
  input String cref;
  input Real value;
  output Integer status;
end oms_setReal;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="value" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setRealInputDerivative">
          <classes/>
          <code interfaceOnly="true">function oms_setRealInputDerivative
  input String cref;
  input Real value;
  output Integer status;
end oms_setRealInputDerivative;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="value" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setResultFile">
          <classes/>
          <code interfaceOnly="true">function oms_setResultFile
  input String cref;
  input String filename;
  input Integer bufferSize;
  output Integer status;
end oms_setResultFile;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="filename" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="bufferSize" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setSignalFilter">
          <classes/>
          <code interfaceOnly="true">function oms_setSignalFilter
  input String cref;
  input String regex;
  output Integer status;
end oms_setSignalFilter;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="regex" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setSolver">
          <classes/>
          <code interfaceOnly="true">function oms_setSolver
  input String cref;
  input oms_solver solver;
  output Integer status;
end oms_setSolver;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="OpenModelica.Scripting.oms_solver" name="solver" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setStartTime">
          <classes/>
          <code interfaceOnly="true">function oms_setStartTime
  input String cref;
  input Real startTime;
  output Integer status;
end oms_setStartTime;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="startTime" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setStopTime">
          <classes/>
          <code interfaceOnly="true">function oms_setStopTime
  input String cref;
  input Real stopTime;
  output Integer status;
end oms_setStopTime;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="stopTime" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setTempDirectory">
          <classes/>
          <code interfaceOnly="true">function oms_setTempDirectory
  input String newTempDir;
  output Integer status;
end oms_setTempDirectory;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="newTempDir" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setTLMPositionAndOrientation">
          <classes/>
          <code interfaceOnly="true">function oms_setTLMPositionAndOrientation
  input String cref;
  input Real x1;
  input Real x2;
  input Real x3;
  input Real A11;
  input Real A12;
  input Real A13;
  input Real A21;
  input Real A22;
  input Real A23;
  input Real A31;
  input Real A32;
  input Real A33;
  output Integer status;
end oms_setTLMPositionAndOrientation;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="x1" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="x2" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="x3" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="A11" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="A12" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="A13" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="A21" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="A22" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="A23" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="A31" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="A32" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="A33" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setTLMSocketData">
          <classes/>
          <code interfaceOnly="true">function oms_setTLMSocketData
  input String cref;
  input String address;
  input Integer managerPort;
  input Integer monitorPort;
  output Integer status;
end oms_setTLMSocketData;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="String" name="address" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="managerPort" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Integer" name="monitorPort" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setTolerance">
          <classes/>
          <code interfaceOnly="true">function oms_setTolerance
  input String cref;
  input Real absoluteTolerance;
  input Real relativeTolerance;
  output Integer status;
end oms_setTolerance;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="absoluteTolerance" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="relativeTolerance" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setVariableStepSize">
          <classes/>
          <code interfaceOnly="true">function oms_setVariableStepSize
  input String cref;
  input Real initialStepSize;
  input Real minimumStepSize;
  input Real maximumStepSize;
  output Integer status;
end oms_setVariableStepSize;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="initialStepSize" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="minimumStepSize" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="maximumStepSize" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_setWorkingDirectory">
          <classes/>
          <code interfaceOnly="true">function oms_setWorkingDirectory
  input String newWorkingDir;
  output Integer status;
end oms_setWorkingDirectory;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="newWorkingDir" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_simulate">
          <classes/>
          <code interfaceOnly="true">function oms_simulate
  input String cref;
  output Integer status;
end oms_simulate;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_stepUntil">
          <classes/>
          <code interfaceOnly="true">function oms_stepUntil
  input String cref;
  input Real stopTime;
  output Integer status;
end oms_stepUntil;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="input" className="Real" name="stopTime" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_terminate">
          <classes/>
          <code interfaceOnly="true">function oms_terminate
  input String cref;
  output Integer status;
end oms_terminate;</code>
          <components>
            <arguments>
              <argument inputOutput="input" className="String" name="cref" hasDefault="false" comment="">
                <dimensions/>
              </argument>
              <argument inputOutput="output" className="Integer" name="status" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <function id="OpenModelica.Scripting.oms_getVersion">
          <classes/>
          <code interfaceOnly="true">function oms_getVersion
  output String version;
end oms_getVersion;</code>
          <components>
            <arguments>
              <argument inputOutput="output" className="String" name="version" hasDefault="false" comment="">
                <dimensions/>
              </argument>
            </arguments>
          </components>
        </function>
        <package id="OpenModelica.Scripting.Experimental">
          <classes>
            <function id="OpenModelica.Scripting.Experimental.relocateFunctions">
              <classes/>
              <code interfaceOnly="true">function relocateFunctions
  input String fileName;
  input String names[:, 2];
  output Boolean success;
end relocateFunctions;</code>
              <components>
                <arguments>
                  <argument inputOutput="input" className="String" name="fileName" hasDefault="false" comment="">
                    <dimensions/>
                  </argument>
                  <argument inputOutput="input" className="String" name="names" hasDefault="false" comment="">
                    <dimensions>
                      <dimension size=":"/>
                      <dimension size="2"/>
                    </dimensions>
                  </argument>
                  <argument inputOutput="output" className="Boolean" name="success" hasDefault="false" comment="">
                    <dimensions/>
                  </argument>
                </arguments>
              </components>
            </function>
            <function id="OpenModelica.Scripting.Experimental.toJulia">
              <classes/>
              <code interfaceOnly="true">function toJulia
  output String res;
end toJulia;</code>
              <components>
                <arguments>
                  <argument inputOutput="output" className="String" name="res" hasDefault="false" comment="">
                    <dimensions/>
                  </argument>
                </arguments>
              </components>
            </function>
            <function id="OpenModelica.Scripting.Experimental.interactiveDumpAbsynToJL">
              <classes/>
              <code interfaceOnly="true">function interactiveDumpAbsynToJL
  output String res;
end interactiveDumpAbsynToJL;</code>
              <components>
                <arguments>
                  <argument inputOutput="output" className="String" name="res" hasDefault="false" comment="">
                    <dimensions/>
                  </argument>
                </arguments>
              </components>
            </function>
          </classes>
        </package>
      </classes>
    </package>
  </classes>
</omcInterface>
