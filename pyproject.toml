[tool.poetry]
name = "OpenModelicaCompiler"
version = "0"
description = "OpenModelica compiler (omc) interface for Python"
repository = "https://github.com/ijknabla/OpenModelicaCompilerForPython"
authors = ["ijknabla <ijknabla@gmail.com>"]
readme = "README.md"
license = "GPL-3.0, OSMC-PL 1.2 (user's choice)"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development :: User Interfaces",
]
packages = [
    { include = "omc4py"},
]

[tool.poetry.dependencies]
python = "^3.8"
arpeggio = ">=1.6"
exceptiongroup = ">=1.0"
pyzmq = ">=17.0.0"
typing-extensions = ">=3.7.4"
modelicalang = "^0.1.0a2"
tornado = [
    { platform ="win32", version = ">=6.1" },
]

[tool.poetry.group.bootstrap.dependencies]
click = "^8.1.7"
pyyaml = "^6.0.1"
tqdm = "^4.66.1"
pydantic = "^2.4.2"
frozendict = "^2.3.8"
importlib-resources = ">=5.10"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.5"
ruff = "^0.3.7"

[tool.poetry.group.lint.dependencies]
mypy = "^1.6.1"
pyproject-flake8 = "^5.0.4"
types-arpeggio = {git = "https://github.com/ijknabla/types-arpeggio.git", rev = "0.2.0.0a0.dev4"}
types-pyyaml = "^6.0.12.12"
types-setuptools = "^68.2.0.0"
types-tqdm = "^4.66.0.2"

[tool.poetry.group.test.dependencies]
pytest = "^7.2"
pytest-asyncio = "^0.23.2"
pytest-cov = "^4.0.0"
typing-extensions = ">=4.1.0"
importlib-resources = "^6.1.1"

[tool.poetry-version-plugin]
source = "init"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.report]
exclude_lines = [
    "^\\s*class \\w+\\(Protocol",
    "^\\s*@overload$",
    "^\\s*if TYPE_CHECKING",
    "^\\s*raise NotImplementedError",
    "#\\s*pragma\\s*:\\s*no\\s*cover",
]

[tool.flake8]
exclude = ".venv"

# Allow too-long line in auto-generated modules
per-file-ignores = """
    omc4py/v_*_*/:E501,
"""

[tool.ruff]
line-length = 79

[tool.ruff.lint]
# https://docs.astral.sh/ruff/rules/
select = ["ALL"]
ignore = [
    "D203", "D212",  # not compatible with other rules
    "ANN101", "ANN102",  # not a problem in mypy
    # TODO: Apply more rules
    "ANN401",
    "ARG001",
    "ARG002",
    "ASYNC101",
    "B028",
    "B904",
    "BLE001",
    "C401",
    "C901",
    "COM812",
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D200",
    "D212",
    "D400",
    "D415",
    "EM101",
    "EM102",
    "ERA001",
    "FA102",
    "FBT001",
    "FBT003",
    "FIX002",
    "G004",
    "INP001",
    "ISC001",
    "N801",
    "N802",
    "N803",
    "N806",
    "N813",
    "N815",
    "N818",
    "PGH003",
    "PLC0105",
    "PLR0124",
    "PLR0911",
    "PLR0912",
    "PLR0915",
    "PLR2004",
    "PLR5501",
    "PLW0120",
    "PT001",
    "PT005",
    "PT006",
    "PT011",
    "PT023",
    "PTH103",
    "PTH201",
    "PTH207",
    "PYI018",
    "PYI020",
    "PYI032",
    "PYI036",
    "PYI055",
    "RET505",
    "RET506",
    "RSE102",
    "RUF005",
    "RUF100",
    "S101",
    "S102",
    "S112",
    "S301",
    "S307",
    "S603",
    "S607",
    "SIM102",
    "SIM103",
    "SIM108",
    "SIM114",
    "SIM300",
    "SLF001",
    "T201",
    "TCH001",
    "TCH003",
    "TD002",
    "TD003",
    "TD005",
    "TID252",
    "TRY003",
    "UP006",
    "UP007",
    "UP008",
]

[tool.ruff.lint.per-file-ignores]
"omc4py/v_*_*/" = [
    "A001", "A002", "ARG001", "PLR0913",  #  consistent with signature in OpenModelica
    "D208",  # breaks inline code in docstring
    "D301",  # inevitable due to the `ast.unparse`
    "E501",  # consistent with documentation in OpenModelica
]
