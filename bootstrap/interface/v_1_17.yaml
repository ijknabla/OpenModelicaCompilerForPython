'1.17':
  OpenModelica:
    restriction: package
    isPackage: true
  OpenModelica.threadData:
    restriction: function
    isFunction: true
    code: "function threadData\n  output ThreadData threadData;\nend threadData;"
    components:
      threadData:
        className: OpenModelica.threadData.ThreadData
        inputOutput: output
  OpenModelica.threadData.ThreadData:
    restriction: record
    isRecord: true
    code: 'record ThreadData

      end ThreadData;'
    components: {}
  OpenModelica.Internal:
    restriction: package
    isPackage: true
  OpenModelica.Internal.BuiltinType:
    restriction: type
    isType: true
  OpenModelica.Internal.ClockConstructor:
    restriction: function
    isFunction: true
    components: {}
  OpenModelica.Internal.inferredClock:
    restriction: function
    isFunction: true
    code: "function inferredClock\n  output Clock c;\nend inferredClock;"
    components:
      c:
        className: Clock
        inputOutput: output
  OpenModelica.Internal.rationalClock:
    restriction: function
    isFunction: true
    code: "function rationalClock\n  input Integer intervalCounter(min = 0);\n  parameter\
      \ input Integer resolution(min = 1) = 1;\n  output Clock c;\nend rationalClock;"
    components:
      intervalCounter:
        className: Integer
        inputOutput: input
      resolution:
        className: Integer
        inputOutput: input
      c:
        className: Clock
        inputOutput: output
  OpenModelica.Internal.realClock:
    restriction: function
    isFunction: true
    code: "function realClock\n  input Real interval(unit = \"s\", min = 0);\n  output\
      \ Clock c;\nend realClock;"
    components:
      interval:
        className: Real
        inputOutput: input
      c:
        className: Clock
        inputOutput: output
  OpenModelica.Internal.booleanClock:
    restriction: function
    isFunction: true
    code: "function booleanClock\n  input Boolean condition;\n  input Real startInterval\
      \ = 0.0;\n  output Clock c;\nend booleanClock;"
    components:
      condition:
        className: Boolean
        inputOutput: input
      startInterval:
        className: Real
        inputOutput: input
      c:
        className: Clock
        inputOutput: output
  OpenModelica.Internal.solverClock:
    restriction: function
    isFunction: true
    code: "function solverClock\n  input Clock c;\n  input String solverMethod;\n\
      \  output Clock clk;\nend solverClock;"
    components:
      c:
        className: Clock
        inputOutput: input
      solverMethod:
        className: String
        inputOutput: input
      clk:
        className: Clock
        inputOutput: output
  OpenModelica.Internal.subSampleExpression:
    restriction: impure function
    isFunction: true
    code: "impure function subSampleExpression<T>\n  input T u;\n  parameter input\
      \ Integer factor(min = 0) = 0;\n  output T y;\nend subSampleExpression;"
    components:
      u:
        className: OpenModelica.Internal.subSampleExpression.T
        inputOutput: input
      factor:
        className: Integer
        inputOutput: input
      y:
        className: OpenModelica.Internal.subSampleExpression.T
        inputOutput: output
  OpenModelica.Internal.subSampleClock:
    restriction: impure function
    isFunction: true
    code: "impure function subSampleClock\n  input Clock u;\n  parameter input Integer\
      \ factor(min = 0) = 0;\n  output Clock y;\nend subSampleClock;"
    components:
      u:
        className: Clock
        inputOutput: input
      factor:
        className: Integer
        inputOutput: input
      y:
        className: Clock
        inputOutput: output
  OpenModelica.Internal.superSampleExpression:
    restriction: impure function
    isFunction: true
    code: "impure function superSampleExpression<T>\n  input T u;\n  parameter input\
      \ Integer factor(min = 0) = 0;\n  output T y;\nend superSampleExpression;"
    components:
      u:
        className: OpenModelica.Internal.superSampleExpression.T
        inputOutput: input
      factor:
        className: Integer
        inputOutput: input
      y:
        className: OpenModelica.Internal.superSampleExpression.T
        inputOutput: output
  OpenModelica.Internal.superSampleClock:
    restriction: impure function
    isFunction: true
    code: "impure function superSampleClock\n  input Clock u;\n  parameter input Integer\
      \ factor(min = 0) = 0;\n  output Clock y;\nend superSampleClock;"
    components:
      u:
        className: Clock
        inputOutput: input
      factor:
        className: Integer
        inputOutput: input
      y:
        className: Clock
        inputOutput: output
  OpenModelica.Internal.delay2:
    restriction: impure function
    isFunction: true
    code: "impure function delay2\n  input Real expr;\n  parameter input Real delayTime;\n\
      \  output Real value;\nend delay2;"
    components:
      expr:
        className: Real
        inputOutput: input
      delayTime:
        className: Real
        inputOutput: input
      value:
        className: Real
        inputOutput: output
  OpenModelica.Internal.delay3:
    restriction: impure function
    isFunction: true
    code: "impure function delay3\n  input Real expr, delayTime;\n  parameter input\
      \ Real delayMax;\n  output Real value;\nend delay3;"
    components:
      expr:
        className: Real
        inputOutput: input
      delayTime:
        className: Real
        inputOutput: input
      delayMax:
        className: Real
        inputOutput: input
      value:
        className: Real
        inputOutput: output
  OpenModelica.Internal.intAbs:
    restriction: function
    isFunction: true
    code: "function intAbs\n  input Integer v;\n  output Integer o;\nend intAbs;"
    components:
      v:
        className: Integer
        inputOutput: input
      o:
        className: Integer
        inputOutput: output
  OpenModelica.Internal.realAbs:
    restriction: function
    isFunction: true
    code: "function realAbs\n  input Real v;\n  output Real o;\nend realAbs;"
    components:
      v:
        className: Real
        inputOutput: input
      o:
        className: Real
        inputOutput: output
  OpenModelica.Internal.intDiv:
    restriction: function
    isFunction: true
    code: "function intDiv\n  input Integer x;\n  input Integer y;\n  output Integer\
      \ z;\nend intDiv;"
    components:
      x:
        className: Integer
        inputOutput: input
      y:
        className: Integer
        inputOutput: input
      z:
        className: Integer
        inputOutput: output
  OpenModelica.Internal.realDiv:
    restriction: function
    isFunction: true
    code: "function realDiv\n  input Real x;\n  input Real y;\n  output Real z;\n\
      end realDiv;"
    components:
      x:
        className: Real
        inputOutput: input
      y:
        className: Real
        inputOutput: input
      z:
        className: Real
        inputOutput: output
  OpenModelica.Internal.intMod:
    restriction: function
    isFunction: true
    code: "function intMod\n  input Integer x;\n  input Integer y;\n  output Integer\
      \ z;\nend intMod;"
    components:
      x:
        className: Integer
        inputOutput: input
      y:
        className: Integer
        inputOutput: input
      z:
        className: Integer
        inputOutput: output
  OpenModelica.Internal.realMod:
    restriction: function
    isFunction: true
    code: "function realMod\n  input Real x;\n  input Real y;\n  output Real z;\n\
      end realMod;"
    components:
      x:
        className: Real
        inputOutput: input
      y:
        className: Real
        inputOutput: input
      z:
        className: Real
        inputOutput: output
  OpenModelica.Internal.intRem:
    restriction: function
    isFunction: true
    code: "function intRem\n  input Integer x;\n  input Integer y;\n  output Integer\
      \ z;\nend intRem;"
    components:
      x:
        className: Integer
        inputOutput: input
      y:
        className: Integer
        inputOutput: input
      z:
        className: Integer
        inputOutput: output
  OpenModelica.Internal.realRem:
    restriction: function
    isFunction: true
    code: "function realRem\n  input Real x;\n  input Real y;\n  output Real z;\n\
      end realRem;"
    components:
      x:
        className: Real
        inputOutput: input
      y:
        className: Real
        inputOutput: input
      z:
        className: Real
        inputOutput: output
  OpenModelica.Internal.scalarMax:
    restriction: function
    isFunction: true
    code: "function scalarMax<ScalarBasicType>\n  input ScalarBasicType a;\n  input\
      \ ScalarBasicType b;\n  output ScalarBasicType m;\nend scalarMax;"
    components:
      a:
        className: OpenModelica.Internal.scalarMax.ScalarBasicType
        inputOutput: input
      b:
        className: OpenModelica.Internal.scalarMax.ScalarBasicType
        inputOutput: input
      m:
        className: OpenModelica.Internal.scalarMax.ScalarBasicType
        inputOutput: output
  OpenModelica.Internal.arrayMax:
    restriction: function
    isFunction: true
    code: "function arrayMax<ArrayType, ScalarBasicType>\n  input ArrayType a;\n \
      \ output ScalarBasicType b;\nend arrayMax;"
    components:
      a:
        className: OpenModelica.Internal.arrayMax.ArrayType
        inputOutput: input
      b:
        className: OpenModelica.Internal.arrayMax.ScalarBasicType
        inputOutput: output
  OpenModelica.Internal.scalarMin:
    restriction: function
    isFunction: true
    code: "function scalarMin<ScalarBasicType>\n  input ScalarBasicType a;\n  input\
      \ ScalarBasicType b;\n  output ScalarBasicType m;\nend scalarMin;"
    components:
      a:
        className: OpenModelica.Internal.scalarMin.ScalarBasicType
        inputOutput: input
      b:
        className: OpenModelica.Internal.scalarMin.ScalarBasicType
        inputOutput: input
      m:
        className: OpenModelica.Internal.scalarMin.ScalarBasicType
        inputOutput: output
  OpenModelica.Internal.arrayMin:
    restriction: function
    isFunction: true
    code: "function arrayMin<ArrayType, ScalarBasicType>\n  input ArrayType a;\n \
      \ output ScalarBasicType b;\nend arrayMin;"
    components:
      a:
        className: OpenModelica.Internal.arrayMin.ArrayType
        inputOutput: input
      b:
        className: OpenModelica.Internal.arrayMin.ScalarBasicType
        inputOutput: output
  OpenModelica.Internal.Architecture:
    restriction: package
    isPackage: true
  OpenModelica.Internal.Architecture.numBits:
    restriction: function
    isFunction: true
    code: "function numBits\n  output Integer numBit;\nend numBits;"
    components:
      numBit:
        className: Integer
        inputOutput: output
  OpenModelica.Internal.Architecture.integerMax:
    restriction: function
    isFunction: true
    code: "function integerMax\n  output Integer max;\nend integerMax;"
    components:
      max:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting:
    restriction: package
    isPackage: true
  OpenModelica.Scripting.CheckSettingsResult:
    restriction: record
    isRecord: true
    code: "record CheckSettingsResult\n  String OPENMODELICAHOME, OPENMODELICALIBRARY,\
      \ OMC_PATH, SYSTEM_PATH, OMDEV_PATH;\n  Boolean OMC_FOUND;\n  String MODELICAUSERCFLAGS,\
      \ WORKING_DIRECTORY;\n  Boolean CREATE_FILE_WORKS, REMOVE_FILE_WORKS;\n  String\
      \ OS, SYSTEM_INFO, SENDDATALIBS, C_COMPILER, C_COMPILER_VERSION;\n  Boolean\
      \ C_COMPILER_RESPONDING, HAVE_CORBA;\n  String CONFIGURE_CMDLINE;\n  annotation(\n\
      \    preferredView = \"text\");\nend CheckSettingsResult;"
    components:
      OPENMODELICAHOME:
        className: String
      OPENMODELICALIBRARY:
        className: String
      OMC_PATH:
        className: String
      SYSTEM_PATH:
        className: String
      OMDEV_PATH:
        className: String
      OMC_FOUND:
        className: Boolean
      MODELICAUSERCFLAGS:
        className: String
      WORKING_DIRECTORY:
        className: String
      CREATE_FILE_WORKS:
        className: Boolean
      REMOVE_FILE_WORKS:
        className: Boolean
      OS:
        className: String
      SYSTEM_INFO:
        className: String
      SENDDATALIBS:
        className: String
      C_COMPILER:
        className: String
      C_COMPILER_VERSION:
        className: String
      C_COMPILER_RESPONDING:
        className: Boolean
      HAVE_CORBA:
        className: Boolean
      CONFIGURE_CMDLINE:
        className: String
  OpenModelica.Scripting.Internal:
    restriction: package
    isPackage: true
  OpenModelica.Scripting.Internal.Time:
    restriction: package
    isPackage: true
  OpenModelica.Scripting.Internal.Time.readableTime:
    restriction: function
    isFunction: true
    code: "function readableTime\n  input Real sec;\n  output String str;\nend readableTime;"
    components:
      sec:
        className: Real
        inputOutput: input
      str:
        className: String
        inputOutput: output
  OpenModelica.Scripting.Internal.Time.timerTick:
    restriction: function
    isFunction: true
    code: "function timerTick\n  input Integer index;\nend timerTick;"
    components:
      index:
        className: Integer
        inputOutput: input
  OpenModelica.Scripting.Internal.Time.timerTock:
    restriction: function
    isFunction: true
    code: "function timerTock\n  input Integer index;\n  output Real elapsed;\nend\
      \ timerTock;"
    components:
      index:
        className: Integer
        inputOutput: input
      elapsed:
        className: Real
        inputOutput: output
  OpenModelica.Scripting.Internal.Time.timerClear:
    restriction: function
    isFunction: true
    code: "function timerClear\n  input Integer index;\nend timerClear;"
    components:
      index:
        className: Integer
        inputOutput: input
  OpenModelica.Scripting.Internal.FileType:
    restriction: type
    isType: true
    isEnumeration: true
    code: type FileType = enumeration(NoFile, RegularFile, Directory, SpecialFile);
  OpenModelica.Scripting.Internal.stat:
    restriction: function
    isFunction: true
    code: "function stat\n  input String name;\n  output FileType fileType;\nend stat;"
    components:
      name:
        className: String
        inputOutput: input
      fileType:
        className: OpenModelica.Scripting.Internal.FileType
        inputOutput: output
  OpenModelica.Scripting.checkSettings:
    restriction: function
    isFunction: true
    code: "function checkSettings\n  output CheckSettingsResult result;\nend checkSettings;"
    components:
      result:
        className: OpenModelica.Scripting.CheckSettingsResult
        inputOutput: output
  OpenModelica.Scripting.loadFile:
    restriction: function
    isFunction: true
    code: "function loadFile\n  input String fileName;\n  input String encoding =\
      \ \"UTF-8\";\n  input Boolean uses = true;\n  input Boolean notify = true \"\
      Give a notification of the libraries and versions that were loaded\";\n  input\
      \ Boolean requireExactVersion = false \"If the version is required to be exact,\
      \ if there is a uses Modelica(version=\\\"3.2\\\"), Modelica 3.2.1 will not\
      \ match it.\";\n  output Boolean success;\nend loadFile;"
    components:
      fileName:
        className: String
        inputOutput: input
      encoding:
        className: String
        inputOutput: input
      uses:
        className: Boolean
        inputOutput: input
      notify:
        className: Boolean
        inputOutput: input
      requireExactVersion:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.loadFiles:
    restriction: function
    isFunction: true
    code: "function loadFiles\n  input String[:] fileNames;\n  input String encoding\
      \ = \"UTF-8\";\n  input Integer numThreads = OpenModelica.Scripting.numProcessors();\n\
      \  input Boolean uses = true;\n  input Boolean notify = true \"Give a notification\
      \ of the libraries and versions that were loaded\";\n  input Boolean requireExactVersion\
      \ = false \"If the version is required to be exact, if there is a uses Modelica(version=\\\
      \"3.2\\\"), Modelica 3.2.1 will not match it.\";\n  output Boolean success;\n\
      end loadFiles;"
    components:
      fileNames:
        className: String
        inputOutput: input
        dimensions:
        - ':'
      encoding:
        className: String
        inputOutput: input
      numThreads:
        className: Integer
        inputOutput: input
      uses:
        className: Boolean
        inputOutput: input
      notify:
        className: Boolean
        inputOutput: input
      requireExactVersion:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.parseEncryptedPackage:
    restriction: function
    isFunction: true
    code: "function parseEncryptedPackage\n  input String fileName;\n  input String\
      \ workdir = \"<default>\" \"The output directory for imported encrypted files.\
      \ <default> will put the files to current working directory.\";\n  output TypeName\
      \ names[:];\nend parseEncryptedPackage;"
    components:
      fileName:
        className: String
        inputOutput: input
      workdir:
        className: String
        inputOutput: input
      names:
        className: OpenModelica.$Code.TypeName
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.loadEncryptedPackage:
    restriction: function
    isFunction: true
    code: "function loadEncryptedPackage\n  input String fileName;\n  input String\
      \ workdir = \"<default>\" \"The output directory for imported encrypted files.\
      \ <default> will put the files to current working directory.\";\n  input Boolean\
      \ skipUnzip = false \"Skips the unzip of .mol if true. In that case we expect\
      \ the files are already extracted e.g., because of parseEncryptedPackage() call.\"\
      ;\n  input Boolean uses = true;\n  input Boolean notify = true \"Give a notification\
      \ of the libraries and versions that were loaded\";\n  input Boolean requireExactVersion\
      \ = false \"If the version is required to be exact, if there is a uses Modelica(version=\\\
      \"3.2\\\"), Modelica 3.2.1 will not match it.\";\n  output Boolean success;\n\
      end loadEncryptedPackage;"
    components:
      fileName:
        className: String
        inputOutput: input
      workdir:
        className: String
        inputOutput: input
      skipUnzip:
        className: Boolean
        inputOutput: input
      uses:
        className: Boolean
        inputOutput: input
      notify:
        className: Boolean
        inputOutput: input
      requireExactVersion:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.reloadClass:
    restriction: function
    isFunction: true
    code: "function reloadClass\n  input TypeName name;\n  input String encoding =\
      \ \"UTF-8\";\n  output Boolean success;\nend reloadClass;"
    components:
      name:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      encoding:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.loadString:
    restriction: function
    isFunction: true
    code: "function loadString\n  input String data;\n  input String filename = \"\
      <interactive>\";\n  input String encoding = \"UTF-8\";\n  input Boolean merge\
      \ = false \"if merge is true the parsed AST is merged with the existing AST,\
      \ default to false which means that is replaced, not merged\";\n  output Boolean\
      \ success;\nend loadString;"
    components:
      data:
        className: String
        inputOutput: input
      filename:
        className: String
        inputOutput: input
      encoding:
        className: String
        inputOutput: input
      merge:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.parseString:
    restriction: function
    isFunction: true
    code: "function parseString\n  input String data;\n  input String filename = \"\
      <interactive>\";\n  output TypeName names[:];\nend parseString;"
    components:
      data:
        className: String
        inputOutput: input
      filename:
        className: String
        inputOutput: input
      names:
        className: OpenModelica.$Code.TypeName
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.parseFile:
    restriction: function
    isFunction: true
    code: "function parseFile\n  input String filename;\n  input String encoding =\
      \ \"UTF-8\";\n  output TypeName names[:];\nend parseFile;"
    components:
      filename:
        className: String
        inputOutput: input
      encoding:
        className: String
        inputOutput: input
      names:
        className: OpenModelica.$Code.TypeName
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.loadFileInteractiveQualified:
    restriction: function
    isFunction: true
    code: "function loadFileInteractiveQualified\n  input String filename;\n  input\
      \ String encoding = \"UTF-8\";\n  input Boolean uses = true;\n  input Boolean\
      \ notify = true \"Give a notification of the libraries and versions that were\
      \ loaded\";\n  input Boolean requireExactVersion = false \"If the version is\
      \ required to be exact, if there is a uses Modelica(version=\\\"3.2\\\"), Modelica\
      \ 3.2.1 will not match it.\";\n  output TypeName names[:];\nend loadFileInteractiveQualified;"
    components:
      filename:
        className: String
        inputOutput: input
      encoding:
        className: String
        inputOutput: input
      uses:
        className: Boolean
        inputOutput: input
      notify:
        className: Boolean
        inputOutput: input
      requireExactVersion:
        className: Boolean
        inputOutput: input
      names:
        className: OpenModelica.$Code.TypeName
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.loadFileInteractive:
    restriction: function
    isFunction: true
    code: "function loadFileInteractive\n  input String filename;\n  input String\
      \ encoding = \"UTF-8\";\n  output TypeName names[:];\nend loadFileInteractive;"
    components:
      filename:
        className: String
        inputOutput: input
      encoding:
        className: String
        inputOutput: input
      names:
        className: OpenModelica.$Code.TypeName
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.system:
    restriction: impure function
    isFunction: true
    code: "impure function system\n  input String callStr \"String to call: sh -c\
      \ $callStr\";\n  input String outputFile = \"\" \"The output is redirected to\
      \ this file (unless already done by callStr)\";\n  output Integer retval \"\
      Return value of the system call; usually 0 on success\";\nend system;"
    components:
      callStr:
        className: String
        inputOutput: input
      outputFile:
        className: String
        inputOutput: input
      retval:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.system_parallel:
    restriction: impure function
    isFunction: true
    code: "impure function system_parallel\n  input String callStr[:] \"String to\
      \ call: sh -c $callStr\";\n  input Integer numThreads = numProcessors();\n \
      \ output Integer retval[:] \"Return value of the system call; usually 0 on success\"\
      ;\nend system_parallel;"
    components:
      callStr:
        className: String
        inputOutput: input
        dimensions:
        - ':'
      numThreads:
        className: Integer
        inputOutput: input
      retval:
        className: Integer
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.saveAll:
    restriction: function
    isFunction: true
    code: "function saveAll\n  input String fileName;\n  output Boolean success;\n\
      end saveAll;"
    components:
      fileName:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.help:
    restriction: function
    isFunction: true
    code: "function help\n  input String topic = \"topics\";\n  output String helpText;\n\
      end help;"
    components:
      topic:
        className: String
        inputOutput: input
      helpText:
        className: String
        inputOutput: output
  OpenModelica.Scripting.clear:
    restriction: function
    isFunction: true
    code: "function clear\n  output Boolean success;\nend clear;"
    components:
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.clearProgram:
    restriction: function
    isFunction: true
    code: "function clearProgram\n  output Boolean success;\nend clearProgram;"
    components:
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.clearVariables:
    restriction: function
    isFunction: true
    code: "function clearVariables\n  output Boolean success;\nend clearVariables;"
    components:
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.generateHeader:
    restriction: function
    isFunction: true
    code: "function generateHeader\n  input String fileName;\n  output Boolean success;\n\
      end generateHeader;"
    components:
      fileName:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.generateJuliaHeader:
    restriction: function
    isFunction: true
    code: "function generateJuliaHeader\n  input String fileName;\n  output Boolean\
      \ success;\nend generateJuliaHeader;"
    components:
      fileName:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.generateSeparateCode:
    restriction: function
    isFunction: true
    code: "function generateSeparateCode\n  input TypeName className;\n  input Boolean\
      \ cleanCache = false \"If true, the cache is reset between each generated package.\
      \ This conserves memory at the cost of speed.\";\n  output Boolean success;\n\
      end generateSeparateCode;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      cleanCache:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.generateSeparateCodeDependencies:
    restriction: function
    isFunction: true
    code: "function generateSeparateCodeDependencies\n  input String stampSuffix =\
      \ \".c\" \"Suffix to add to dependencies (often .c.stamp)\";\n  output String[:]\
      \ dependencies;\nend generateSeparateCodeDependencies;"
    components:
      stampSuffix:
        className: String
        inputOutput: input
      dependencies:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.generateSeparateCodeDependenciesMakefile:
    restriction: function
    isFunction: true
    code: "function generateSeparateCodeDependenciesMakefile\n  input String filename\
      \ \"The file to write the makefile to\";\n  input String directory = \"\" \"\
      The relative path of the generated files\";\n  input String suffix = \".c\"\
      \ \"Often .stamp since we do not update all the files\";\n  output Boolean success;\n\
      end generateSeparateCodeDependenciesMakefile;"
    components:
      filename:
        className: String
        inputOutput: input
      directory:
        className: String
        inputOutput: input
      suffix:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getLinker:
    restriction: function
    isFunction: true
    code: "function getLinker\n  output String linker;\nend getLinker;"
    components:
      linker:
        className: String
        inputOutput: output
  OpenModelica.Scripting.setLinker:
    restriction: function
    isFunction: true
    code: "function setLinker\n  input String linker;\n  output Boolean success;\n\
      end setLinker;"
    components:
      linker:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getLinkerFlags:
    restriction: function
    isFunction: true
    code: "function getLinkerFlags\n  output String linkerFlags;\nend getLinkerFlags;"
    components:
      linkerFlags:
        className: String
        inputOutput: output
  OpenModelica.Scripting.setLinkerFlags:
    restriction: function
    isFunction: true
    code: "function setLinkerFlags\n  input String linkerFlags;\n  output Boolean\
      \ success;\nend setLinkerFlags;"
    components:
      linkerFlags:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getCompiler:
    restriction: function
    isFunction: true
    code: "function getCompiler\n  output String compiler;\nend getCompiler;"
    components:
      compiler:
        className: String
        inputOutput: output
  OpenModelica.Scripting.setCompiler:
    restriction: function
    isFunction: true
    code: "function setCompiler\n  input String compiler;\n  output Boolean success;\n\
      end setCompiler;"
    components:
      compiler:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.setCFlags:
    restriction: function
    isFunction: true
    code: "function setCFlags\n  input String inString;\n  output Boolean success;\n\
      end setCFlags;"
    components:
      inString:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getCFlags:
    restriction: function
    isFunction: true
    code: "function getCFlags\n  output String outString;\nend getCFlags;"
    components:
      outString:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getCXXCompiler:
    restriction: function
    isFunction: true
    code: "function getCXXCompiler\n  output String compiler;\nend getCXXCompiler;"
    components:
      compiler:
        className: String
        inputOutput: output
  OpenModelica.Scripting.setCXXCompiler:
    restriction: function
    isFunction: true
    code: "function setCXXCompiler\n  input String compiler;\n  output Boolean success;\n\
      end setCXXCompiler;"
    components:
      compiler:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.verifyCompiler:
    restriction: function
    isFunction: true
    code: "function verifyCompiler\n  output Boolean compilerWorks;\nend verifyCompiler;"
    components:
      compilerWorks:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.setCompilerPath:
    restriction: function
    isFunction: true
    code: "function setCompilerPath\n  input String compilerPath;\n  output Boolean\
      \ success;\nend setCompilerPath;"
    components:
      compilerPath:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getCompileCommand:
    restriction: function
    isFunction: true
    code: "function getCompileCommand\n  output String compileCommand;\nend getCompileCommand;"
    components:
      compileCommand:
        className: String
        inputOutput: output
  OpenModelica.Scripting.setCompileCommand:
    restriction: function
    isFunction: true
    code: "function setCompileCommand\n  input String compileCommand;\n  output Boolean\
      \ success;\nend setCompileCommand;"
    components:
      compileCommand:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.setPlotCommand:
    restriction: function
    isFunction: true
    code: "function setPlotCommand\n  input String plotCommand;\n  output Boolean\
      \ success;\nend setPlotCommand;"
    components:
      plotCommand:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getSettings:
    restriction: function
    isFunction: true
    code: "function getSettings\n  output String settings;\nend getSettings;"
    components:
      settings:
        className: String
        inputOutput: output
  OpenModelica.Scripting.setTempDirectoryPath:
    restriction: function
    isFunction: true
    code: "function setTempDirectoryPath\n  input String tempDirectoryPath;\n  output\
      \ Boolean success;\nend setTempDirectoryPath;"
    components:
      tempDirectoryPath:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getTempDirectoryPath:
    restriction: function
    isFunction: true
    code: "function getTempDirectoryPath\n  output String tempDirectoryPath;\nend\
      \ getTempDirectoryPath;"
    components:
      tempDirectoryPath:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getEnvironmentVar:
    restriction: function
    isFunction: true
    code: "function getEnvironmentVar\n  input String var;\n  output String value\
      \ \"returns empty string on failure\";\nend getEnvironmentVar;"
    components:
      var:
        className: String
        inputOutput: input
      value:
        className: String
        inputOutput: output
  OpenModelica.Scripting.setEnvironmentVar:
    restriction: function
    isFunction: true
    code: "function setEnvironmentVar\n  input String var;\n  input String value;\n\
      \  output Boolean success;\nend setEnvironmentVar;"
    components:
      var:
        className: String
        inputOutput: input
      value:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.appendEnvironmentVar:
    restriction: function
    isFunction: true
    code: "function appendEnvironmentVar\n  input String var;\n  input String value;\n\
      \  output String result \"returns \\\"error\\\" if the variable could not be\
      \ appended\";\nend appendEnvironmentVar;"
    components:
      var:
        className: String
        inputOutput: input
      value:
        className: String
        inputOutput: input
      result:
        className: String
        inputOutput: output
  OpenModelica.Scripting.setInstallationDirectoryPath:
    restriction: function
    isFunction: true
    code: "function setInstallationDirectoryPath\n  input String installationDirectoryPath;\n\
      \  output Boolean success;\nend setInstallationDirectoryPath;"
    components:
      installationDirectoryPath:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getInstallationDirectoryPath:
    restriction: function
    isFunction: true
    code: "function getInstallationDirectoryPath\n  output String installationDirectoryPath;\n\
      end getInstallationDirectoryPath;"
    components:
      installationDirectoryPath:
        className: String
        inputOutput: output
  OpenModelica.Scripting.setModelicaPath:
    restriction: function
    isFunction: true
    code: "function setModelicaPath\n  input String modelicaPath;\n  output Boolean\
      \ success;\nend setModelicaPath;"
    components:
      modelicaPath:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getModelicaPath:
    restriction: function
    isFunction: true
    code: "function getModelicaPath\n  output String modelicaPath;\nend getModelicaPath;"
    components:
      modelicaPath:
        className: String
        inputOutput: output
  OpenModelica.Scripting.setCompilerFlags:
    restriction: function
    isFunction: true
    code: "function setCompilerFlags\n  input String compilerFlags;\n  output Boolean\
      \ success;\nend setCompilerFlags;"
    components:
      compilerFlags:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.enableNewInstantiation:
    restriction: function
    isFunction: true
    code: "function enableNewInstantiation\n  output Boolean success;\nend enableNewInstantiation;"
    components:
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.disableNewInstantiation:
    restriction: function
    isFunction: true
    code: "function disableNewInstantiation\n  output Boolean success;\nend disableNewInstantiation;"
    components:
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.setDebugFlags:
    restriction: function
    isFunction: true
    code: "function setDebugFlags\n  input String debugFlags;\n  output Boolean success;\n\
      end setDebugFlags;"
    components:
      debugFlags:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.clearDebugFlags:
    restriction: function
    isFunction: true
    code: "function clearDebugFlags\n  output Boolean success;\nend clearDebugFlags;"
    components:
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.setPreOptModules:
    restriction: function
    isFunction: true
    code: "function setPreOptModules\n  input String modules;\n  output Boolean success;\n\
      end setPreOptModules;"
    components:
      modules:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.setCheapMatchingAlgorithm:
    restriction: function
    isFunction: true
    code: "function setCheapMatchingAlgorithm\n  input Integer matchingAlgorithm;\n\
      \  output Boolean success;\nend setCheapMatchingAlgorithm;"
    components:
      matchingAlgorithm:
        className: Integer
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getMatchingAlgorithm:
    restriction: function
    isFunction: true
    code: "function getMatchingAlgorithm\n  output String selected;\nend getMatchingAlgorithm;"
    components:
      selected:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getAvailableMatchingAlgorithms:
    restriction: function
    isFunction: true
    code: "function getAvailableMatchingAlgorithms\n  output String[:] allChoices;\n\
      \  output String[:] allComments;\nend getAvailableMatchingAlgorithms;"
    components:
      allChoices:
        className: String
        inputOutput: output
        dimensions:
        - ':'
      allComments:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.setMatchingAlgorithm:
    restriction: function
    isFunction: true
    code: "function setMatchingAlgorithm\n  input String matchingAlgorithm;\n  output\
      \ Boolean success;\nend setMatchingAlgorithm;"
    components:
      matchingAlgorithm:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getIndexReductionMethod:
    restriction: function
    isFunction: true
    code: "function getIndexReductionMethod\n  output String selected;\nend getIndexReductionMethod;"
    components:
      selected:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getAvailableIndexReductionMethods:
    restriction: function
    isFunction: true
    code: "function getAvailableIndexReductionMethods\n  output String[:] allChoices;\n\
      \  output String[:] allComments;\nend getAvailableIndexReductionMethods;"
    components:
      allChoices:
        className: String
        inputOutput: output
        dimensions:
        - ':'
      allComments:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.setIndexReductionMethod:
    restriction: function
    isFunction: true
    code: "function setIndexReductionMethod\n  input String method;\n  output Boolean\
      \ success;\nend setIndexReductionMethod;"
    components:
      method:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.setPostOptModules:
    restriction: function
    isFunction: true
    code: "function setPostOptModules\n  input String modules;\n  output Boolean success;\n\
      end setPostOptModules;"
    components:
      modules:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getTearingMethod:
    restriction: function
    isFunction: true
    code: "function getTearingMethod\n  output String selected;\nend getTearingMethod;"
    components:
      selected:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getAvailableTearingMethods:
    restriction: function
    isFunction: true
    code: "function getAvailableTearingMethods\n  output String[:] allChoices;\n \
      \ output String[:] allComments;\nend getAvailableTearingMethods;"
    components:
      allChoices:
        className: String
        inputOutput: output
        dimensions:
        - ':'
      allComments:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.setTearingMethod:
    restriction: function
    isFunction: true
    code: "function setTearingMethod\n  input String tearingMethod;\n  output Boolean\
      \ success;\nend setTearingMethod;"
    components:
      tearingMethod:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.setCommandLineOptions:
    restriction: function
    isFunction: true
    code: "function setCommandLineOptions\n  input String option;\n  output Boolean\
      \ success;\nend setCommandLineOptions;"
    components:
      option:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getCommandLineOptions:
    restriction: function
    isFunction: true
    code: "function getCommandLineOptions\n  output String[:] flags;\nend getCommandLineOptions;"
    components:
      flags:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.getConfigFlagValidOptions:
    restriction: function
    isFunction: true
    code: "function getConfigFlagValidOptions\n  input String flag;\n  output String\
      \ validOptions[:];\n  output String mainDescription;\n  output String descriptions[:];\n\
      end getConfigFlagValidOptions;"
    components:
      flag:
        className: String
        inputOutput: input
      validOptions:
        className: String
        inputOutput: output
        dimensions:
        - ':'
      mainDescription:
        className: String
        inputOutput: output
      descriptions:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.clearCommandLineOptions:
    restriction: function
    isFunction: true
    code: "function clearCommandLineOptions\n  output Boolean success;\nend clearCommandLineOptions;"
    components:
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getVersion:
    restriction: function
    isFunction: true
    code: "function getVersion\n  input TypeName cl = $Code(OpenModelica);\n  output\
      \ String version;\nend getVersion;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      version:
        className: String
        inputOutput: output
  OpenModelica.Scripting.regularFileExists:
    restriction: function
    isFunction: true
    code: "function regularFileExists\n  input String fileName;\n  output Boolean\
      \ exists;\nend regularFileExists;"
    components:
      fileName:
        className: String
        inputOutput: input
      exists:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.directoryExists:
    restriction: function
    isFunction: true
    code: "function directoryExists\n  input String dirName;\n  output Boolean exists;\n\
      end directoryExists;"
    components:
      dirName:
        className: String
        inputOutput: input
      exists:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.stat:
    restriction: impure function
    isFunction: true
    code: "impure function stat\n  input String fileName;\n  output Boolean success;\n\
      \  output Real fileSize;\n  output Real mtime;\nend stat;"
    components:
      fileName:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
      fileSize:
        className: Real
        inputOutput: output
      mtime:
        className: Real
        inputOutput: output
  OpenModelica.Scripting.readFile:
    restriction: impure function
    isFunction: true
    code: "impure function readFile\n  input String fileName;\n  output String contents;\n\
      end readFile;"
    components:
      fileName:
        className: String
        inputOutput: input
      contents:
        className: String
        inputOutput: output
  OpenModelica.Scripting.writeFile:
    restriction: impure function
    isFunction: true
    code: "impure function writeFile\n  input String fileName;\n  input String data;\n\
      \  input Boolean append = false;\n  output Boolean success;\nend writeFile;"
    components:
      fileName:
        className: String
        inputOutput: input
      data:
        className: String
        inputOutput: input
      append:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.compareFilesAndMove:
    restriction: impure function
    isFunction: true
    code: "impure function compareFilesAndMove\n  input String newFile;\n  input String\
      \ oldFile;\n  output Boolean success;\nend compareFilesAndMove;"
    components:
      newFile:
        className: String
        inputOutput: input
      oldFile:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.compareFiles:
    restriction: impure function
    isFunction: true
    code: "impure function compareFiles\n  input String file1;\n  input String file2;\n\
      \  output Boolean isEqual;\nend compareFiles;"
    components:
      file1:
        className: String
        inputOutput: input
      file2:
        className: String
        inputOutput: input
      isEqual:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.alarm:
    restriction: impure function
    isFunction: true
    code: "impure function alarm\n  input Integer seconds;\n  output Integer previousSeconds;\n\
      end alarm;"
    components:
      seconds:
        className: Integer
        inputOutput: input
      previousSeconds:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.regex:
    restriction: function
    isFunction: true
    code: "function regex\n  input String str;\n  input String re;\n  input Integer\
      \ maxMatches = 1 \"The maximum number of matches that will be returned\";\n\
      \  input Boolean extended = true \"Use POSIX extended or regular syntax\";\n\
      \  input Boolean caseInsensitive = false;\n  output Integer numMatches \"-1\
      \ is an error, 0 means no match, else returns a number 1..maxMatches\";\n  output\
      \ String matchedSubstrings[maxMatches] \"unmatched strings are returned as empty\"\
      ;\nend regex;"
    components:
      str:
        className: String
        inputOutput: input
      re:
        className: String
        inputOutput: input
      maxMatches:
        className: Integer
        inputOutput: input
      extended:
        className: Boolean
        inputOutput: input
      caseInsensitive:
        className: Boolean
        inputOutput: input
      numMatches:
        className: Integer
        inputOutput: output
      matchedSubstrings:
        className: String
        inputOutput: output
        dimensions:
        - maxMatches
  OpenModelica.Scripting.regexBool:
    restriction: function
    isFunction: true
    code: "function regexBool\n  input String str;\n  input String re;\n  input Boolean\
      \ extended = true \"Use POSIX extended or regular syntax\";\n  input Boolean\
      \ caseInsensitive = false;\n  output Boolean matches;\nend regexBool;"
    components:
      str:
        className: String
        inputOutput: input
      re:
        className: String
        inputOutput: input
      extended:
        className: Boolean
        inputOutput: input
      caseInsensitive:
        className: Boolean
        inputOutput: input
      matches:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.testsuiteFriendlyName:
    restriction: function
    isFunction: true
    code: "function testsuiteFriendlyName\n  input String path;\n  output String fixed;\n\
      end testsuiteFriendlyName;"
    components:
      path:
        className: String
        inputOutput: input
      fixed:
        className: String
        inputOutput: output
  OpenModelica.Scripting.readFileNoNumeric:
    restriction: function
    isFunction: true
    code: "function readFileNoNumeric\n  input String fileName;\n  output String contents;\n\
      end readFileNoNumeric;"
    components:
      fileName:
        className: String
        inputOutput: input
      contents:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getErrorString:
    restriction: impure function
    isFunction: true
    code: "impure function getErrorString\n  input Boolean warningsAsErrors = false;\n\
      \  output String errorString;\nend getErrorString;"
    components:
      warningsAsErrors:
        className: Boolean
        inputOutput: input
      errorString:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getMessagesString:
    restriction: function
    isFunction: true
    code: "function getMessagesString\n  output String messagesString;\nend getMessagesString;"
    components:
      messagesString:
        className: String
        inputOutput: output
  OpenModelica.Scripting.SourceInfo:
    restriction: record
    isRecord: true
    code: "record SourceInfo\n  String fileName;\n  Boolean readonly;\n  Integer lineStart;\n\
      \  Integer columnStart;\n  Integer lineEnd;\n  Integer columnEnd;\n  annotation(\n\
      \    preferredView = \"text\");\nend SourceInfo;"
    components:
      fileName:
        className: String
      readonly:
        className: Boolean
      lineStart:
        className: Integer
      columnStart:
        className: Integer
      lineEnd:
        className: Integer
      columnEnd:
        className: Integer
  OpenModelica.Scripting.ErrorKind:
    restriction: type
    isType: true
    isEnumeration: true
    code: 'type ErrorKind = enumeration(syntax "syntax errors", grammar "grammatical
      errors", translation "instantiation errors: up to flat modelica", symbolic "symbolic
      manipulation error, simcodegen, up to executable file", runtime "simulation/function
      runtime error", scripting "runtime scripting /interpretation error");'
  OpenModelica.Scripting.ErrorLevel:
    restriction: type
    isType: true
    isEnumeration: true
    code: type ErrorLevel = enumeration(internal, notification, warning, error);
  OpenModelica.Scripting.ErrorMessage:
    restriction: record
    isRecord: true
    code: "record ErrorMessage\n  SourceInfo info;\n  String message \"After applying\
      \ the individual arguments\";\n  ErrorKind kind;\n  ErrorLevel level;\n  Integer\
      \ id \"Internal ID of the error (just ignore this)\";\n  annotation(\n    preferredView\
      \ = \"text\");\nend ErrorMessage;"
    components:
      info:
        className: OpenModelica.Scripting.SourceInfo
      message:
        className: String
      kind:
        className: OpenModelica.Scripting.ErrorKind
      level:
        className: OpenModelica.Scripting.ErrorLevel
      id:
        className: Integer
  OpenModelica.Scripting.getMessagesStringInternal:
    restriction: function
    isFunction: true
    code: "function getMessagesStringInternal\n  input Boolean unique = true;\n  output\
      \ ErrorMessage[:] messagesString;\nend getMessagesStringInternal;"
    components:
      unique:
        className: Boolean
        inputOutput: input
      messagesString:
        className: OpenModelica.Scripting.ErrorMessage
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.countMessages:
    restriction: function
    isFunction: true
    code: "function countMessages\n  output Integer numMessages;\n  output Integer\
      \ numErrors;\n  output Integer numWarnings;\nend countMessages;"
    components:
      numMessages:
        className: Integer
        inputOutput: output
      numErrors:
        className: Integer
        inputOutput: output
      numWarnings:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.clearMessages:
    restriction: function
    isFunction: true
    code: "function clearMessages\n  output Boolean success;\nend clearMessages;"
    components:
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.runScript:
    restriction: impure function
    isFunction: true
    code: "impure function runScript\n  input String fileName \"*.mos\";\n  output\
      \ String result;\nend runScript;"
    components:
      fileName:
        className: String
        inputOutput: input
      result:
        className: String
        inputOutput: output
  OpenModelica.Scripting.echo:
    restriction: function
    isFunction: true
    code: "function echo\n  input Boolean setEcho;\n  output Boolean newEcho;\nend\
      \ echo;"
    components:
      setEcho:
        className: Boolean
        inputOutput: input
      newEcho:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getClassesInModelicaPath:
    restriction: function
    isFunction: true
    code: "function getClassesInModelicaPath\n  output String classesInModelicaPath;\n\
      end getClassesInModelicaPath;"
    components:
      classesInModelicaPath:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getAnnotationVersion:
    restriction: function
    isFunction: true
    code: "function getAnnotationVersion\n  output String annotationVersion;\nend\
      \ getAnnotationVersion;"
    components:
      annotationVersion:
        className: String
        inputOutput: output
  OpenModelica.Scripting.setAnnotationVersion:
    restriction: function
    isFunction: true
    code: "function setAnnotationVersion\n  input String annotationVersion;\n  output\
      \ Boolean success;\nend setAnnotationVersion;"
    components:
      annotationVersion:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getNoSimplify:
    restriction: function
    isFunction: true
    code: "function getNoSimplify\n  output Boolean noSimplify;\nend getNoSimplify;"
    components:
      noSimplify:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.setNoSimplify:
    restriction: function
    isFunction: true
    code: "function setNoSimplify\n  input Boolean noSimplify;\n  output Boolean success;\n\
      end setNoSimplify;"
    components:
      noSimplify:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getVectorizationLimit:
    restriction: function
    isFunction: true
    code: "function getVectorizationLimit\n  output Integer vectorizationLimit;\n\
      end getVectorizationLimit;"
    components:
      vectorizationLimit:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.setVectorizationLimit:
    restriction: function
    isFunction: true
    code: "function setVectorizationLimit\n  input Integer vectorizationLimit;\n \
      \ output Boolean success;\nend setVectorizationLimit;"
    components:
      vectorizationLimit:
        className: Integer
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getDefaultOpenCLDevice:
    restriction: function
    isFunction: true
    code: "function getDefaultOpenCLDevice\n  output Integer defdevid;\nend getDefaultOpenCLDevice;"
    components:
      defdevid:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.setDefaultOpenCLDevice:
    restriction: function
    isFunction: true
    code: "function setDefaultOpenCLDevice\n  input Integer defdevid;\n  output Boolean\
      \ success;\nend setDefaultOpenCLDevice;"
    components:
      defdevid:
        className: Integer
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.setShowAnnotations:
    restriction: function
    isFunction: true
    code: "function setShowAnnotations\n  input Boolean show;\n  output Boolean success;\n\
      end setShowAnnotations;"
    components:
      show:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getShowAnnotations:
    restriction: function
    isFunction: true
    code: "function getShowAnnotations\n  output Boolean show;\nend getShowAnnotations;"
    components:
      show:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.setOrderConnections:
    restriction: function
    isFunction: true
    code: "function setOrderConnections\n  input Boolean orderConnections;\n  output\
      \ Boolean success;\nend setOrderConnections;"
    components:
      orderConnections:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getOrderConnections:
    restriction: function
    isFunction: true
    code: "function getOrderConnections\n  output Boolean orderConnections;\nend getOrderConnections;"
    components:
      orderConnections:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.setLanguageStandard:
    restriction: function
    isFunction: true
    code: "function setLanguageStandard\n  input String inVersion;\n  output Boolean\
      \ success;\nend setLanguageStandard;"
    components:
      inVersion:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getLanguageStandard:
    restriction: function
    isFunction: true
    code: "function getLanguageStandard\n  output String outVersion;\nend getLanguageStandard;"
    components:
      outVersion:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getAstAsCorbaString:
    restriction: function
    isFunction: true
    code: "function getAstAsCorbaString\n  input String fileName = \"<interactive>\"\
      ;\n  output String result \"returns the string if fileName is interactive; else\
      \ it returns ok or error depending on if writing the file succeeded\";\nend\
      \ getAstAsCorbaString;"
    components:
      fileName:
        className: String
        inputOutput: input
      result:
        className: String
        inputOutput: output
  OpenModelica.Scripting.cd:
    restriction: function
    isFunction: true
    code: "function cd\n  input String newWorkingDirectory = \"\";\n  output String\
      \ workingDirectory;\nend cd;"
    components:
      newWorkingDirectory:
        className: String
        inputOutput: input
      workingDirectory:
        className: String
        inputOutput: output
  OpenModelica.Scripting.mkdir:
    restriction: function
    isFunction: true
    code: "function mkdir\n  input String newDirectory;\n  output Boolean success;\n\
      end mkdir;"
    components:
      newDirectory:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.copy:
    restriction: function
    isFunction: true
    code: "function copy\n  input String source;\n  input String destination;\n  output\
      \ Boolean success;\nend copy;"
    components:
      source:
        className: String
        inputOutput: input
      destination:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.remove:
    restriction: function
    isFunction: true
    code: "function remove\n  input String path;\n  output Boolean success \"Returns\
      \ true on success.\";\nend remove;"
    components:
      path:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.checkModel:
    restriction: function
    isFunction: true
    code: "function checkModel\n  input TypeName className;\n  output String result;\n\
      end checkModel;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      result:
        className: String
        inputOutput: output
  OpenModelica.Scripting.checkAllModelsRecursive:
    restriction: function
    isFunction: true
    code: "function checkAllModelsRecursive\n  input TypeName className;\n  input\
      \ Boolean checkProtected = false \"Checks also protected classes if true\";\n\
      \  output String result;\nend checkAllModelsRecursive;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      checkProtected:
        className: Boolean
        inputOutput: input
      result:
        className: String
        inputOutput: output
  OpenModelica.Scripting.typeOf:
    restriction: function
    isFunction: true
    code: "function typeOf\n  input VariableName variableName;\n  output String result;\n\
      end typeOf;"
    components:
      variableName:
        className: OpenModelica.$Code.VariableName
        inputOutput: input
      result:
        className: String
        inputOutput: output
  OpenModelica.Scripting.instantiateModel:
    restriction: function
    isFunction: true
    code: "function instantiateModel\n  input TypeName className;\n  output String\
      \ result;\nend instantiateModel;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      result:
        className: String
        inputOutput: output
  OpenModelica.Scripting.buildOpenTURNSInterface:
    restriction: function
    isFunction: true
    code: "function buildOpenTURNSInterface\n  input TypeName className;\n  input\
      \ String pythonTemplateFile;\n  input Boolean showFlatModelica = false;\n  output\
      \ String outPythonScript;\nend buildOpenTURNSInterface;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      pythonTemplateFile:
        className: String
        inputOutput: input
      showFlatModelica:
        className: Boolean
        inputOutput: input
      outPythonScript:
        className: String
        inputOutput: output
  OpenModelica.Scripting.runOpenTURNSPythonScript:
    restriction: function
    isFunction: true
    code: "function runOpenTURNSPythonScript\n  input String pythonScriptFile;\n \
      \ output String logOutputFile;\nend runOpenTURNSPythonScript;"
    components:
      pythonScriptFile:
        className: String
        inputOutput: input
      logOutputFile:
        className: String
        inputOutput: output
  OpenModelica.Scripting.generateCode:
    restriction: function
    isFunction: true
    code: "function generateCode\n  input TypeName className;\n  output Boolean success;\n\
      end generateCode;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.loadModel:
    restriction: function
    isFunction: true
    code: "function loadModel\n  input TypeName className;\n  input String[:] priorityVersion\
      \ = {\"default\"};\n  input Boolean notify = false \"Give a notification of\
      \ the libraries and versions that were loaded\";\n  input String languageStandard\
      \ = \"\" \"Override the set language standard. Parse with the given setting,\
      \ but do not change it permanently.\";\n  input Boolean requireExactVersion\
      \ = false \"If the version is required to be exact, if there is a uses Modelica(version=\\\
      \"3.2\\\"), Modelica 3.2.1 will not match it.\";\n  output Boolean success;\n\
      end loadModel;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      priorityVersion:
        className: String
        inputOutput: input
        dimensions:
        - ':'
      notify:
        className: Boolean
        inputOutput: input
      languageStandard:
        className: String
        inputOutput: input
      requireExactVersion:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.deleteFile:
    restriction: function
    isFunction: true
    code: "function deleteFile\n  input String fileName;\n  output Boolean success;\n\
      end deleteFile;"
    components:
      fileName:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.saveModel:
    restriction: function
    isFunction: true
    code: "function saveModel\n  input String fileName;\n  input TypeName className;\n\
      \  output Boolean success;\nend saveModel;"
    components:
      fileName:
        className: String
        inputOutput: input
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.saveTotalModel:
    restriction: function
    isFunction: true
    code: "function saveTotalModel\n  input String fileName;\n  input TypeName className;\n\
      \  input Boolean stripAnnotations = false;\n  input Boolean stripComments =\
      \ false;\n  output Boolean success;\nend saveTotalModel;"
    components:
      fileName:
        className: String
        inputOutput: input
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      stripAnnotations:
        className: Boolean
        inputOutput: input
      stripComments:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.save:
    restriction: function
    isFunction: true
    code: "function save\n  input TypeName className;\n  output Boolean success;\n\
      end save;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.saveTotalSCode:
    restriction: function
    isFunction: true
    components: {}
  OpenModelica.Scripting.translateGraphics:
    restriction: function
    isFunction: true
    code: "function translateGraphics\n  input TypeName className;\n  output String\
      \ result;\nend translateGraphics;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      result:
        className: String
        inputOutput: output
  OpenModelica.Scripting.codeToString:
    restriction: function
    isFunction: true
    code: "function codeToString\n  input $Code className;\n  output String string;\n\
      end codeToString;"
    components:
      className:
        className: OpenModelica.$Code
        inputOutput: input
      string:
        className: String
        inputOutput: output
  OpenModelica.Scripting.dumpXMLDAE:
    restriction: function
    isFunction: true
    code: "function dumpXMLDAE\n  input TypeName className;\n  input String translationLevel\
      \ = \"flat\" \"flat, optimiser, backEnd, or stateSpace\";\n  input Boolean addOriginalAdjacencyMatrix\
      \ = false;\n  input Boolean addSolvingInfo = false;\n  input Boolean addMathMLCode\
      \ = false;\n  input Boolean dumpResiduals = false;\n  input String fileNamePrefix\
      \ = \"<default>\" \"this is the className in string form by default\";\n  input\
      \ String rewriteRulesFile = \"\" \"the file from where the rewiteRules are read,\
      \ default is empty which means no rewrite rules\";\n  output Boolean success\
      \ \"if the function succeeded true/false\";\n  output String xmlfileName \"\
      the Xml file\";\nend dumpXMLDAE;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      translationLevel:
        className: String
        inputOutput: input
      addOriginalAdjacencyMatrix:
        className: Boolean
        inputOutput: input
      addSolvingInfo:
        className: Boolean
        inputOutput: input
      addMathMLCode:
        className: Boolean
        inputOutput: input
      dumpResiduals:
        className: Boolean
        inputOutput: input
      fileNamePrefix:
        className: String
        inputOutput: input
      rewriteRulesFile:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
      xmlfileName:
        className: String
        inputOutput: output
  OpenModelica.Scripting.convertUnits:
    restriction: function
    isFunction: true
    code: "function convertUnits\n  input String s1;\n  input String s2;\n  output\
      \ Boolean unitsCompatible;\n  output Real scaleFactor;\n  output Real offset;\n\
      end convertUnits;"
    components:
      s1:
        className: String
        inputOutput: input
      s2:
        className: String
        inputOutput: input
      unitsCompatible:
        className: Boolean
        inputOutput: output
      scaleFactor:
        className: Real
        inputOutput: output
      offset:
        className: Real
        inputOutput: output
  OpenModelica.Scripting.getDerivedUnits:
    restriction: function
    isFunction: true
    code: "function getDerivedUnits\n  input String baseUnit;\n  output String[:]\
      \ derivedUnits;\nend getDerivedUnits;"
    components:
      baseUnit:
        className: String
        inputOutput: input
      derivedUnits:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.listVariables:
    restriction: function
    isFunction: true
    code: "function listVariables\n  output TypeName variables[:];\nend listVariables;"
    components:
      variables:
        className: OpenModelica.$Code.TypeName
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.strtok:
    restriction: function
    isFunction: true
    code: "function strtok\n  input String string;\n  input String token;\n  output\
      \ String[:] strings;\nend strtok;"
    components:
      string:
        className: String
        inputOutput: input
      token:
        className: String
        inputOutput: input
      strings:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.stringSplit:
    restriction: function
    isFunction: true
    code: "function stringSplit\n  input String string;\n  input String token \"single\
      \ character only\";\n  output String[:] strings;\nend stringSplit;"
    components:
      string:
        className: String
        inputOutput: input
      token:
        className: String
        inputOutput: input
      strings:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.stringReplace:
    restriction: function
    isFunction: true
    code: "function stringReplace\n  input String str;\n  input String source;\n \
      \ input String target;\n  output String res;\nend stringReplace;"
    components:
      str:
        className: String
        inputOutput: input
      source:
        className: String
        inputOutput: input
      target:
        className: String
        inputOutput: input
      res:
        className: String
        inputOutput: output
  OpenModelica.Scripting.escapeXML:
    restriction: function
    isFunction: true
    code: "function escapeXML\n  input String inStr;\n  output String outStr;\nend\
      \ escapeXML;"
    components:
      inStr:
        className: String
        inputOutput: input
      outStr:
        className: String
        inputOutput: output
  OpenModelica.Scripting.ExportKind:
    restriction: type
    isType: true
    isEnumeration: true
    code: type ExportKind = enumeration(Absyn "Normal Absyn", SCode "Normal SCode",
      MetaModelicaInterface "A restricted MetaModelica package interface (protected
      parts are stripped)", Internal "True unparsing of the Absyn");
  OpenModelica.Scripting.list:
    restriction: function
    isFunction: true
    code: "function list\n  input TypeName class_ = $Code(AllLoadedClasses);\n  input\
      \ Boolean interfaceOnly = false;\n  input Boolean shortOnly = false \"only short\
      \ class definitions\";\n  input ExportKind exportKind = ExportKind.Absyn;\n\
      \  output String contents;\nend list;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      interfaceOnly:
        className: Boolean
        inputOutput: input
      shortOnly:
        className: Boolean
        inputOutput: input
      exportKind:
        className: OpenModelica.Scripting.ExportKind
        inputOutput: input
      contents:
        className: String
        inputOutput: output
  OpenModelica.Scripting.listFile:
    restriction: function
    isFunction: true
    code: "function listFile\n  input TypeName class_;\n  input Boolean nestedClasses\
      \ = true;\n  output String contents;\nend listFile;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      nestedClasses:
        className: Boolean
        inputOutput: input
      contents:
        className: String
        inputOutput: output
  OpenModelica.Scripting.DiffFormat:
    restriction: type
    isType: true
    isEnumeration: true
    code: type DiffFormat = enumeration(plain "no deletions, no markup", color "terminal
      escape sequences", xml "XML tags");
  OpenModelica.Scripting.diffModelicaFileListings:
    restriction: function
    isFunction: true
    code: "function diffModelicaFileListings\n  input String before, after;\n  input\
      \ DiffFormat diffFormat = DiffFormat.color;\n  output String result;\nend diffModelicaFileListings;"
    components:
      before:
        className: String
        inputOutput: input
      after:
        className: String
        inputOutput: input
      diffFormat:
        className: OpenModelica.Scripting.DiffFormat
        inputOutput: input
      result:
        className: String
        inputOutput: output
  OpenModelica.Scripting.exportToFigaro:
    restriction: function
    isFunction: true
    code: "function exportToFigaro\n  input TypeName path;\n  input String directory\
      \ = cd();\n  input String database;\n  input String mode;\n  input String options;\n\
      \  input String processor;\n  output Boolean success;\nend exportToFigaro;"
    components:
      path:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      directory:
        className: String
        inputOutput: input
      database:
        className: String
        inputOutput: input
      mode:
        className: String
        inputOutput: input
      options:
        className: String
        inputOutput: input
      processor:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.inferBindings:
    restriction: function
    isFunction: true
    code: "function inferBindings\n  input TypeName path;\n  output Boolean success;\n\
      end inferBindings;"
    components:
      path:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.generateVerificationScenarios:
    restriction: function
    isFunction: true
    code: "function generateVerificationScenarios\n  input TypeName path;\n  output\
      \ Boolean success;\nend generateVerificationScenarios;"
    components:
      path:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.rewriteBlockCall:
    restriction: function
    isFunction: true
    code: "function rewriteBlockCall\n  input TypeName className;\n  input TypeName\
      \ inDefs;\n  output Boolean success;\nend rewriteBlockCall;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      inDefs:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.realpath:
    restriction: function
    isFunction: true
    code: "function realpath\n  input String name \"Absolute or relative file or directory\
      \ name\";\n  output String fullName \"Full path of 'name'\";\nend realpath;"
    components:
      name:
        className: String
        inputOutput: input
      fullName:
        className: String
        inputOutput: output
  OpenModelica.Scripting.uriToFilename:
    restriction: function
    isFunction: true
    code: "function uriToFilename\n  input String uri;\n  output String filename =\
      \ \"\";\nend uriToFilename;"
    components:
      uri:
        className: String
        inputOutput: input
      filename:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getLoadedLibraries:
    restriction: function
    isFunction: true
    code: "function getLoadedLibraries\n  output String[:, 2] libraries;\nend getLoadedLibraries;"
    components:
      libraries:
        className: String
        inputOutput: output
        dimensions:
        - ':'
        - '2'
  OpenModelica.Scripting.LinearSystemSolver:
    restriction: type
    isType: true
    isEnumeration: true
    code: type LinearSystemSolver = enumeration(dgesv, lpsolve55);
  OpenModelica.Scripting.solveLinearSystem:
    restriction: function
    isFunction: true
    code: "function solveLinearSystem\n  input Real[size(B, 1), size(B, 1)] A;\n \
      \ input Real[:] B;\n  input LinearSystemSolver solver = LinearSystemSolver.dgesv;\n\
      \  input Integer[:] isInt = {-1} \"list of indices that are integers\";\n  output\
      \ Real[size(B, 1)] X;\n  output Integer info;\nend solveLinearSystem;"
    components:
      A:
        className: Real
        inputOutput: input
        dimensions:
        - size(B,1)
        - size(B,1)
      B:
        className: Real
        inputOutput: input
        dimensions:
        - ':'
      solver:
        className: OpenModelica.Scripting.LinearSystemSolver
        inputOutput: input
      isInt:
        className: Integer
        inputOutput: input
        dimensions:
        - ':'
      X:
        className: Real
        inputOutput: output
        dimensions:
        - size(B,1)
      info:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.StandardStream:
    restriction: type
    isType: true
    isEnumeration: true
    code: type StandardStream = enumeration(stdin, stdout, stderr);
  OpenModelica.Scripting.reopenStandardStream:
    restriction: function
    isFunction: true
    code: "function reopenStandardStream\n  input StandardStream _stream;\n  input\
      \ String filename;\n  output Boolean success;\nend reopenStandardStream;"
    components:
      _stream:
        className: OpenModelica.Scripting.StandardStream
        inputOutput: input
      filename:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.importFMU:
    restriction: function
    isFunction: true
    code: "function importFMU\n  input String filename \"the fmu file name\";\n  input\
      \ String workdir = \"<default>\" \"The output directory for imported FMU files.\
      \ <default> will put the files to current working directory.\";\n  input Integer\
      \ loglevel = 3 \"loglevel_nothing=0;loglevel_fatal=1;loglevel_error=2;loglevel_warning=3;loglevel_info=4;loglevel_verbose=5;loglevel_debug=6\"\
      ;\n  input Boolean fullPath = false \"When true the full output path is returned\
      \ otherwise only the file name.\";\n  input Boolean debugLogging = false \"\
      When true the FMU's debug output is printed.\";\n  input Boolean generateInputConnectors\
      \ = true \"When true creates the input connector pins.\";\n  input Boolean generateOutputConnectors\
      \ = true \"When true creates the output connector pins.\";\n  output String\
      \ generatedFileName \"Returns the full path of the generated file.\";\nend importFMU;"
    components:
      filename:
        className: String
        inputOutput: input
      workdir:
        className: String
        inputOutput: input
      loglevel:
        className: Integer
        inputOutput: input
      fullPath:
        className: Boolean
        inputOutput: input
      debugLogging:
        className: Boolean
        inputOutput: input
      generateInputConnectors:
        className: Boolean
        inputOutput: input
      generateOutputConnectors:
        className: Boolean
        inputOutput: input
      generatedFileName:
        className: String
        inputOutput: output
  OpenModelica.Scripting.importFMUModelDescription:
    restriction: function
    isFunction: true
    code: "function importFMUModelDescription\n  input String filename \"the fmu file\
      \ name\";\n  input String workdir = \"<default>\" \"The output directory for\
      \ imported FMU files. <default> will put the files to current working directory.\"\
      ;\n  input Integer loglevel = 3 \"loglevel_nothing=0;loglevel_fatal=1;loglevel_error=2;loglevel_warning=3;loglevel_info=4;loglevel_verbose=5;loglevel_debug=6\"\
      ;\n  input Boolean fullPath = false \"When true the full output path is returned\
      \ otherwise only the file name.\";\n  input Boolean debugLogging = false \"\
      When true the FMU's debug output is printed.\";\n  input Boolean generateInputConnectors\
      \ = true \"When true creates the input connector pins.\";\n  input Boolean generateOutputConnectors\
      \ = true \"When true creates the output connector pins.\";\n  output String\
      \ generatedFileName \"Returns the full path of the generated file.\";\nend importFMUModelDescription;"
    components:
      filename:
        className: String
        inputOutput: input
      workdir:
        className: String
        inputOutput: input
      loglevel:
        className: Integer
        inputOutput: input
      fullPath:
        className: Boolean
        inputOutput: input
      debugLogging:
        className: Boolean
        inputOutput: input
      generateInputConnectors:
        className: Boolean
        inputOutput: input
      generateOutputConnectors:
        className: Boolean
        inputOutput: input
      generatedFileName:
        className: String
        inputOutput: output
  OpenModelica.Scripting.translateModelFMU:
    restriction: function
    isFunction: true
    code: "function translateModelFMU\n  input TypeName className \"the class that\
      \ should translated\";\n  input String version = \"2.0\" \"FMU version, 1.0\
      \ or 2.0.\";\n  input String fmuType = \"me\" \"FMU type, me (model exchange),\
      \ cs (co-simulation), me_cs (both model exchange and co-simulation)\";\n  input\
      \ String fileNamePrefix = \"<default>\" \"fileNamePrefix. <default> = \\\"className\\\
      \"\";\n  input Boolean includeResources = false \"include Modelica based resources\
      \ via loadResource or not\";\n  output String generatedFileName \"Returns the\
      \ full path of the generated FMU.\";\nend translateModelFMU;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      version:
        className: String
        inputOutput: input
      fmuType:
        className: String
        inputOutput: input
      fileNamePrefix:
        className: String
        inputOutput: input
      includeResources:
        className: Boolean
        inputOutput: input
      generatedFileName:
        className: String
        inputOutput: output
  OpenModelica.Scripting.buildModelFMU:
    restriction: function
    isFunction: true
    code: "function buildModelFMU\n  input TypeName className \"the class that should\
      \ translated\";\n  input String version = \"2.0\" \"FMU version, 1.0 or 2.0.\"\
      ;\n  input String fmuType = \"me\" \"FMU type, me (model exchange), cs (co-simulation),\
      \ me_cs (both model exchange and co-simulation)\";\n  input String fileNamePrefix\
      \ = \"<default>\" \"fileNamePrefix. <default> = \\\"className\\\"\";\n  input\
      \ String platforms[:] = {\"static\"} \"The list of platforms to generate code\
      \ for. \\\"dynamic\\\"=current platform, dynamically link the runtime. \\\"\
      static\\\"=current platform, statically link everything. Else, use a host triple,\
      \ e.g. \\\"x86_64-linux-gnu\\\" or \\\"x86_64-w64-mingw32\\\"\";\n  input Boolean\
      \ includeResources = false \"include Modelica based resources via loadResource\
      \ or not\";\n  output String generatedFileName \"Returns the full path of the\
      \ generated FMU.\";\nend buildModelFMU;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      version:
        className: String
        inputOutput: input
      fmuType:
        className: String
        inputOutput: input
      fileNamePrefix:
        className: String
        inputOutput: input
      platforms:
        className: String
        inputOutput: input
        dimensions:
        - ':'
      includeResources:
        className: Boolean
        inputOutput: input
      generatedFileName:
        className: String
        inputOutput: output
  OpenModelica.Scripting.buildEncryptedPackage:
    restriction: function
    isFunction: true
    code: "function buildEncryptedPackage\n  input TypeName className \"the class\
      \ that should encrypted\";\n  input Boolean encrypt = true;\n  output Boolean\
      \ success;\nend buildEncryptedPackage;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      encrypt:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.simulate:
    restriction: function
    isFunction: true
    code: "function simulate\n  input TypeName className \"the class that should simulated\"\
      ;\n  input Real startTime = \"<default>\" \"the start time of the simulation.\
      \ <default> = 0.0\";\n  input Real stopTime = 1.0 \"the stop time of the simulation.\
      \ <default> = 1.0\";\n  input Real numberOfIntervals = 500 \"number of intervals\
      \ in the result file. <default> = 500\";\n  input Real tolerance = 1e-6 \"tolerance\
      \ used by the integration method. <default> = 1e-6\";\n  input String method\
      \ = \"<default>\" \"integration method used for simulation. <default> = dassl\"\
      ;\n  input String fileNamePrefix = \"<default>\" \"fileNamePrefix. <default>\
      \ = \\\"\\\"\";\n  input String options = \"<default>\" \"options. <default>\
      \ = \\\"\\\"\";\n  input String outputFormat = \"mat\" \"Format for the result\
      \ file. <default> = \\\"mat\\\"\";\n  input String variableFilter = \".*\" \"\
      Filter for variables that should store in result file. <default> = \\\".*\\\"\
      \";\n  input String cflags = \"<default>\" \"cflags. <default> = \\\"\\\"\"\
      ;\n  input String simflags = \"<default>\" \"simflags. <default> = \\\"\\\"\"\
      ;\n  output SimulationResult simulationResults;\n\n  record SimulationResult\n\
      \    String resultFile;\n    String simulationOptions;\n    String messages;\n\
      \    Real timeFrontend;\n    Real timeBackend;\n    Real timeSimCode;\n    Real\
      \ timeTemplates;\n    Real timeCompile;\n    Real timeSimulation;\n    Real\
      \ timeTotal;\n  end SimulationResult;\nend simulate;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      startTime:
        className: Real
        inputOutput: input
      stopTime:
        className: Real
        inputOutput: input
      numberOfIntervals:
        className: Real
        inputOutput: input
      tolerance:
        className: Real
        inputOutput: input
      method:
        className: String
        inputOutput: input
      fileNamePrefix:
        className: String
        inputOutput: input
      options:
        className: String
        inputOutput: input
      outputFormat:
        className: String
        inputOutput: input
      variableFilter:
        className: String
        inputOutput: input
      cflags:
        className: String
        inputOutput: input
      simflags:
        className: String
        inputOutput: input
      simulationResults:
        className: OpenModelica.Scripting.simulate.SimulationResult
        inputOutput: output
  OpenModelica.Scripting.simulate.SimulationResult:
    restriction: record
    isRecord: true
    code: "record SimulationResult\n  String resultFile;\n  String simulationOptions;\n\
      \  String messages;\n  Real timeFrontend;\n  Real timeBackend;\n  Real timeSimCode;\n\
      \  Real timeTemplates;\n  Real timeCompile;\n  Real timeSimulation;\n  Real\
      \ timeTotal;\nend SimulationResult;"
    components:
      resultFile:
        className: String
      simulationOptions:
        className: String
      messages:
        className: String
      timeFrontend:
        className: Real
      timeBackend:
        className: Real
      timeSimCode:
        className: Real
      timeTemplates:
        className: Real
      timeCompile:
        className: Real
      timeSimulation:
        className: Real
      timeTotal:
        className: Real
  OpenModelica.Scripting.buildModel:
    restriction: function
    isFunction: true
    code: "function buildModel\n  input TypeName className \"the class that should\
      \ be built\";\n  input Real startTime = \"<default>\" \"the start time of the\
      \ simulation. <default> = 0.0\";\n  input Real stopTime = 1.0 \"the stop time\
      \ of the simulation. <default> = 1.0\";\n  input Real numberOfIntervals = 500\
      \ \"number of intervals in the result file. <default> = 500\";\n  input Real\
      \ tolerance = 1e-6 \"tolerance used by the integration method. <default> = 1e-6\"\
      ;\n  input String method = \"<default>\" \"integration method used for simulation.\
      \ <default> = dassl\";\n  input String fileNamePrefix = \"<default>\" \"fileNamePrefix.\
      \ <default> = \\\"\\\"\";\n  input String options = \"<default>\" \"options.\
      \ <default> = \\\"\\\"\";\n  input String outputFormat = \"mat\" \"Format for\
      \ the result file. <default> = \\\"mat\\\"\";\n  input String variableFilter\
      \ = \".*\" \"Filter for variables that should store in result file. <default>\
      \ = \\\".*\\\"\";\n  input String cflags = \"<default>\" \"cflags. <default>\
      \ = \\\"\\\"\";\n  input String simflags = \"<default>\" \"simflags. <default>\
      \ = \\\"\\\"\";\n  output String[2] buildModelResults;\nend buildModel;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      startTime:
        className: Real
        inputOutput: input
      stopTime:
        className: Real
        inputOutput: input
      numberOfIntervals:
        className: Real
        inputOutput: input
      tolerance:
        className: Real
        inputOutput: input
      method:
        className: String
        inputOutput: input
      fileNamePrefix:
        className: String
        inputOutput: input
      options:
        className: String
        inputOutput: input
      outputFormat:
        className: String
        inputOutput: input
      variableFilter:
        className: String
        inputOutput: input
      cflags:
        className: String
        inputOutput: input
      simflags:
        className: String
        inputOutput: input
      buildModelResults:
        className: String
        inputOutput: output
        dimensions:
        - '2'
  OpenModelica.Scripting.buildLabel:
    restriction: function
    isFunction: true
    code: "function buildLabel\n  input TypeName className \"the class that should\
      \ be built\";\n  input Real startTime = 0.0 \"the start time of the simulation.\
      \ <default> = 0.0\";\n  input Real stopTime = 1.0 \"the stop time of the simulation.\
      \ <default> = 1.0\";\n  input Integer numberOfIntervals = 500 \"number of intervals\
      \ in the result file. <default> = 500\";\n  input Real tolerance = 1e-6 \"tolerance\
      \ used by the integration method. <default> = 1e-6\";\n  input String method\
      \ = \"dassl\" \"integration method used for simulation. <default> = dassl\"\
      ;\n  input String fileNamePrefix = \"\" \"fileNamePrefix. <default> = \\\"\\\
      \"\";\n  input String options = \"\" \"options. <default> = \\\"\\\"\";\n  input\
      \ String outputFormat = \"mat\" \"Format for the result file. <default> = \\\
      \"mat\\\"\";\n  input String variableFilter = \".*\" \"Filter for variables\
      \ that should store in result file. <default> = \\\".*\\\"\";\n  input String\
      \ cflags = \"\" \"cflags. <default> = \\\"\\\"\";\n  input String simflags =\
      \ \"\" \"simflags. <default> = \\\"\\\"\";\n  output String[2] buildModelResults;\n\
      end buildLabel;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      startTime:
        className: Real
        inputOutput: input
      stopTime:
        className: Real
        inputOutput: input
      numberOfIntervals:
        className: Integer
        inputOutput: input
      tolerance:
        className: Real
        inputOutput: input
      method:
        className: String
        inputOutput: input
      fileNamePrefix:
        className: String
        inputOutput: input
      options:
        className: String
        inputOutput: input
      outputFormat:
        className: String
        inputOutput: input
      variableFilter:
        className: String
        inputOutput: input
      cflags:
        className: String
        inputOutput: input
      simflags:
        className: String
        inputOutput: input
      buildModelResults:
        className: String
        inputOutput: output
        dimensions:
        - '2'
  OpenModelica.Scripting.reduceTerms:
    restriction: function
    isFunction: true
    code: "function reduceTerms\n  input TypeName className \"the class that should\
      \ be built\";\n  input Real startTime = 0.0 \"the start time of the simulation.\
      \ <default> = 0.0\";\n  input Real stopTime = 1.0 \"the stop time of the simulation.\
      \ <default> = 1.0\";\n  input Integer numberOfIntervals = 500 \"number of intervals\
      \ in the result file. <default> = 500\";\n  input Real tolerance = 1e-6 \"tolerance\
      \ used by the integration method. <default> = 1e-6\";\n  input String method\
      \ = \"dassl\" \"integration method used for simulation. <default> = dassl\"\
      ;\n  input String fileNamePrefix = \"\" \"fileNamePrefix. <default> = \\\"\\\
      \"\";\n  input String options = \"\" \"options. <default> = \\\"\\\"\";\n  input\
      \ String outputFormat = \"mat\" \"Format for the result file. <default> = \\\
      \"mat\\\"\";\n  input String variableFilter = \".*\" \"Filter for variables\
      \ that should store in result file. <default> = \\\".*\\\"\";\n  input String\
      \ cflags = \"\" \"cflags. <default> = \\\"\\\"\";\n  input String simflags =\
      \ \"\" \"simflags. <default> = \\\"\\\"\";\n  input String labelstoCancel =\
      \ \"\";\n  output String[2] buildModelResults;\nend reduceTerms;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      startTime:
        className: Real
        inputOutput: input
      stopTime:
        className: Real
        inputOutput: input
      numberOfIntervals:
        className: Integer
        inputOutput: input
      tolerance:
        className: Real
        inputOutput: input
      method:
        className: String
        inputOutput: input
      fileNamePrefix:
        className: String
        inputOutput: input
      options:
        className: String
        inputOutput: input
      outputFormat:
        className: String
        inputOutput: input
      variableFilter:
        className: String
        inputOutput: input
      cflags:
        className: String
        inputOutput: input
      simflags:
        className: String
        inputOutput: input
      labelstoCancel:
        className: String
        inputOutput: input
      buildModelResults:
        className: String
        inputOutput: output
        dimensions:
        - '2'
  OpenModelica.Scripting.moveClass:
    restriction: function
    isFunction: true
    code: "function moveClass\n  input TypeName className \"the class that should\
      \ be moved\";\n  input Integer offset \"Offset in the class list.\";\n  output\
      \ Boolean result;\nend moveClass;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      offset:
        className: Integer
        inputOutput: input
      result:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.moveClassToTop:
    restriction: function
    isFunction: true
    code: "function moveClassToTop\n  input TypeName className;\n  output Boolean\
      \ result;\nend moveClassToTop;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      result:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.moveClassToBottom:
    restriction: function
    isFunction: true
    code: "function moveClassToBottom\n  input TypeName className;\n  output Boolean\
      \ result;\nend moveClassToBottom;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      result:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.copyClass:
    restriction: function
    isFunction: true
    code: "function copyClass\n  input TypeName className \"the class that should\
      \ be copied\";\n  input String newClassName \"the name for new class\";\n  input\
      \ TypeName withIn = $Code(TopLevel) \"the with in path for new class\";\n  output\
      \ Boolean result;\nend copyClass;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      newClassName:
        className: String
        inputOutput: input
      withIn:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      result:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.linearize:
    restriction: function
    isFunction: true
    code: "function linearize\n  input TypeName className \"the class that should\
      \ simulated\";\n  input Real startTime = \"<default>\" \"the start time of the\
      \ simulation. <default> = 0.0\";\n  input Real stopTime = 1.0 \"the stop time\
      \ of the simulation. <default> = 1.0\";\n  input Real numberOfIntervals = 500\
      \ \"number of intervals in the result file. <default> = 500\";\n  input Real\
      \ stepSize = 0.002 \"step size that is used for the result file. <default> =\
      \ 0.002\";\n  input Real tolerance = 1e-6 \"tolerance used by the integration\
      \ method. <default> = 1e-6\";\n  input String method = \"<default>\" \"integration\
      \ method used for simulation. <default> = dassl\";\n  input String fileNamePrefix\
      \ = \"<default>\" \"fileNamePrefix. <default> = \\\"\\\"\";\n  input Boolean\
      \ storeInTemp = false \"storeInTemp. <default> = false\";\n  input Boolean noClean\
      \ = false \"noClean. <default> = false\";\n  input String options = \"<default>\"\
      \ \"options. <default> = \\\"\\\"\";\n  input String outputFormat = \"mat\"\
      \ \"Format for the result file. <default> = \\\"mat\\\"\";\n  input String variableFilter\
      \ = \".*\" \"Filter for variables that should store in result file. <default>\
      \ = \\\".*\\\"\";\n  input String cflags = \"<default>\" \"cflags. <default>\
      \ = \\\"\\\"\";\n  input String simflags = \"<default>\" \"simflags. <default>\
      \ = \\\"\\\"\";\n  output String linearizationResult;\nend linearize;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      startTime:
        className: Real
        inputOutput: input
      stopTime:
        className: Real
        inputOutput: input
      numberOfIntervals:
        className: Real
        inputOutput: input
      stepSize:
        className: Real
        inputOutput: input
      tolerance:
        className: Real
        inputOutput: input
      method:
        className: String
        inputOutput: input
      fileNamePrefix:
        className: String
        inputOutput: input
      storeInTemp:
        className: Boolean
        inputOutput: input
      noClean:
        className: Boolean
        inputOutput: input
      options:
        className: String
        inputOutput: input
      outputFormat:
        className: String
        inputOutput: input
      variableFilter:
        className: String
        inputOutput: input
      cflags:
        className: String
        inputOutput: input
      simflags:
        className: String
        inputOutput: input
      linearizationResult:
        className: String
        inputOutput: output
  OpenModelica.Scripting.optimize:
    restriction: function
    isFunction: true
    code: "function optimize\n  input TypeName className \"the class that should simulated\"\
      ;\n  input Real startTime = \"<default>\" \"the start time of the simulation.\
      \ <default> = 0.0\";\n  input Real stopTime = 1.0 \"the stop time of the simulation.\
      \ <default> = 1.0\";\n  input Real numberOfIntervals = 500 \"number of intervals\
      \ in the result file. <default> = 500\";\n  input Real stepSize = 0.002 \"step\
      \ size that is used for the result file. <default> = 0.002\";\n  input Real\
      \ tolerance = 1e-6 \"tolerance used by the integration method. <default> = 1e-6\"\
      ;\n  input String method = DAE.SCONST(\"optimization\") \"optimize a modelica/optimica\
      \ model.\";\n  input String fileNamePrefix = \"<default>\" \"fileNamePrefix.\
      \ <default> = \\\"\\\"\";\n  input Boolean storeInTemp = false \"storeInTemp.\
      \ <default> = false\";\n  input Boolean noClean = false \"noClean. <default>\
      \ = false\";\n  input String options = \"<default>\" \"options. <default> =\
      \ \\\"\\\"\";\n  input String outputFormat = \"mat\" \"Format for the result\
      \ file. <default> = \\\"mat\\\"\";\n  input String variableFilter = \".*\" \"\
      Filter for variables that should store in result file. <default> = \\\".*\\\"\
      \";\n  input String cflags = \"<default>\" \"cflags. <default> = \\\"\\\"\"\
      ;\n  input String simflags = \"<default>\" \"simflags. <default> = \\\"\\\"\"\
      ;\n  output String optimizationResults;\nend optimize;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      startTime:
        className: Real
        inputOutput: input
      stopTime:
        className: Real
        inputOutput: input
      numberOfIntervals:
        className: Real
        inputOutput: input
      stepSize:
        className: Real
        inputOutput: input
      tolerance:
        className: Real
        inputOutput: input
      method:
        className: String
        inputOutput: input
      fileNamePrefix:
        className: String
        inputOutput: input
      storeInTemp:
        className: Boolean
        inputOutput: input
      noClean:
        className: Boolean
        inputOutput: input
      options:
        className: String
        inputOutput: input
      outputFormat:
        className: String
        inputOutput: input
      variableFilter:
        className: String
        inputOutput: input
      cflags:
        className: String
        inputOutput: input
      simflags:
        className: String
        inputOutput: input
      optimizationResults:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getSourceFile:
    restriction: function
    isFunction: true
    code: "function getSourceFile\n  input TypeName class_;\n  output String filename\
      \ \"empty on failure\";\nend getSourceFile;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      filename:
        className: String
        inputOutput: output
  OpenModelica.Scripting.setSourceFile:
    restriction: function
    isFunction: true
    code: "function setSourceFile\n  input TypeName class_;\n  input String filename;\n\
      \  output Boolean success;\nend setSourceFile;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      filename:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.isShortDefinition:
    restriction: function
    isFunction: true
    code: "function isShortDefinition\n  input TypeName class_;\n  output Boolean\
      \ isShortCls;\nend isShortDefinition;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      isShortCls:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.setClassComment:
    restriction: function
    isFunction: true
    code: "function setClassComment\n  input TypeName class_;\n  input String filename;\n\
      \  output Boolean success;\nend setClassComment;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      filename:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getClassNames:
    restriction: function
    isFunction: true
    code: "function getClassNames\n  input TypeName class_ = $Code(AllLoadedClasses);\n\
      \  input Boolean recursive = false;\n  input Boolean qualified = false;\n  input\
      \ Boolean sort = false;\n  input Boolean builtin = false \"List also builtin\
      \ classes if true\";\n  input Boolean showProtected = false \"List also protected\
      \ classes if true\";\n  input Boolean includeConstants = false \"List also constants\
      \ in the class if true\";\n  output TypeName classNames[:];\nend getClassNames;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      recursive:
        className: Boolean
        inputOutput: input
      qualified:
        className: Boolean
        inputOutput: input
      sort:
        className: Boolean
        inputOutput: input
      builtin:
        className: Boolean
        inputOutput: input
      showProtected:
        className: Boolean
        inputOutput: input
      includeConstants:
        className: Boolean
        inputOutput: input
      classNames:
        className: OpenModelica.$Code.TypeName
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.getUsedClassNames:
    restriction: function
    isFunction: true
    code: "function getUsedClassNames\n  input TypeName className;\n  output TypeName\
      \ classNames[:];\nend getUsedClassNames;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      classNames:
        className: OpenModelica.$Code.TypeName
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.getPackages:
    restriction: function
    isFunction: true
    code: "function getPackages\n  input TypeName class_ = $Code(AllLoadedClasses);\n\
      \  output TypeName classNames[:];\nend getPackages;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      classNames:
        className: OpenModelica.$Code.TypeName
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.getAllSubtypeOf:
    restriction: function
    isFunction: true
    code: "function getAllSubtypeOf\n  input TypeName className;\n  input TypeName\
      \ parentClass = $Code(AllLoadedClasses);\n  input Boolean qualified = false;\n\
      \  input Boolean includePartial = false;\n  input Boolean sort = false;\n  output\
      \ TypeName classNames[:];\nend getAllSubtypeOf;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      parentClass:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      qualified:
        className: Boolean
        inputOutput: input
      includePartial:
        className: Boolean
        inputOutput: input
      sort:
        className: Boolean
        inputOutput: input
      classNames:
        className: OpenModelica.$Code.TypeName
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.basePlotFunction:
    restriction: function
    isFunction: true
    code: "partial function basePlotFunction\n  input String fileName = \"<default>\"\
      \ \"The filename containing the variables. <default> will read the last simulation\
      \ result\";\n  input String interpolation = \"linear\" \"\n      Determines\
      \ if the simulation data should be interpolated to allow drawing of continuous\
      \ lines in the diagram.\n      \\\"linear\\\" results in linear interpolation\
      \ between data points, \\\"constant\\\" keeps the value of the last known\n\
      \      data point until a new one is found and \\\"none\\\" results in a diagram\
      \ where only known data points are plotted.\";\n  input String title = \"Plot\
      \ by OpenModelica\" \"This text will be used as the diagram title.\";\n  input\
      \ Boolean legend = true \"Determines whether or not the variable legend is shown.\"\
      ;\n  input Boolean grid = true \"Determines whether or not a grid is shown in\
      \ the diagram.\";\n  input Boolean logX = false \"Determines whether or not\
      \ the horizontal axis is logarithmically scaled.\";\n  input Boolean logY =\
      \ false \"Determines whether or not the vertical axis is logarithmically scaled.\"\
      ;\n  input String xLabel = \"time\" \"This text will be used as the horizontal\
      \ label in the diagram.\";\n  input String yLabel = \"\" \"This text will be\
      \ used as the vertical label in the diagram.\";\n  input Boolean points = false\
      \ \"Determines whether or not the data points should be indicated by a dot in\
      \ the diagram.\";\n  input Real xRange[2] = {0.0, 0.0} \"Determines the horizontal\
      \ interval that is visible in the diagram. {0,0} will select a suitable range.\"\
      ;\n  input Real yRange[2] = {0.0, 0.0} \"Determines the vertical interval that\
      \ is visible in the diagram. {0,0} will select a suitable range.\";\n  output\
      \ Boolean success \"Returns true on success\";\nend basePlotFunction;"
    components:
      fileName:
        className: String
        inputOutput: input
      interpolation:
        className: String
        inputOutput: input
      title:
        className: String
        inputOutput: input
      legend:
        className: Boolean
        inputOutput: input
      grid:
        className: Boolean
        inputOutput: input
      logX:
        className: Boolean
        inputOutput: input
      logY:
        className: Boolean
        inputOutput: input
      xLabel:
        className: String
        inputOutput: input
      yLabel:
        className: String
        inputOutput: input
      points:
        className: Boolean
        inputOutput: input
      xRange:
        className: Real
        inputOutput: input
        dimensions:
        - '2'
      yRange:
        className: Real
        inputOutput: input
        dimensions:
        - '2'
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.plot:
    restriction: function
    isFunction: true
    code: "function plot\n  input VariableNames vars \"The variables you want to plot\"\
      ;\n  input Boolean externalWindow = false \"Opens the plot in a new plot window\"\
      ;\n  input String fileName = \"<default>\" \"The filename containing the variables.\
      \ <default> will read the last simulation result\";\n  input String title =\
      \ \"\" \"This text will be used as the diagram title.\";\n  input String grid\
      \ = \"detailed\" \"Sets the grid for the plot i.e simple, detailed, none.\"\
      ;\n  input Boolean logX = false \"Determines whether or not the horizontal axis\
      \ is logarithmically scaled.\";\n  input Boolean logY = false \"Determines whether\
      \ or not the vertical axis is logarithmically scaled.\";\n  input String xLabel\
      \ = \"time\" \"This text will be used as the horizontal label in the diagram.\"\
      ;\n  input String yLabel = \"\" \"This text will be used as the vertical label\
      \ in the diagram.\";\n  input Real xRange[2] = {0.0, 0.0} \"Determines the horizontal\
      \ interval that is visible in the diagram. {0,0} will select a suitable range.\"\
      ;\n  input Real yRange[2] = {0.0, 0.0} \"Determines the vertical interval that\
      \ is visible in the diagram. {0,0} will select a suitable range.\";\n  input\
      \ Real curveWidth = 1.0 \"Sets the width of the curve.\";\n  input Integer curveStyle\
      \ = 1 \"Sets the style of the curve. SolidLine=1, DashLine=2, DotLine=3, DashDotLine=4,\
      \ DashDotDotLine=5, Sticks=6, Steps=7.\";\n  input String legendPosition = \"\
      top\" \"Sets the POSITION of the legend i.e left, right, top, bottom, none.\"\
      ;\n  input String footer = \"\" \"This text will be used as the diagram footer.\"\
      ;\n  input Boolean autoScale = true \"Use auto scale while plotting.\";\n  input\
      \ Boolean forceOMPlot = false \"if true launches OMPlot and doesn't call callback\
      \ function even if it is defined.\";\n  output Boolean success \"Returns true\
      \ on success\";\nend plot;"
    components:
      vars:
        className: OpenModelica.$Code.VariableNames
        inputOutput: input
      externalWindow:
        className: Boolean
        inputOutput: input
      fileName:
        className: String
        inputOutput: input
      title:
        className: String
        inputOutput: input
      grid:
        className: String
        inputOutput: input
      logX:
        className: Boolean
        inputOutput: input
      logY:
        className: Boolean
        inputOutput: input
      xLabel:
        className: String
        inputOutput: input
      yLabel:
        className: String
        inputOutput: input
      xRange:
        className: Real
        inputOutput: input
        dimensions:
        - '2'
      yRange:
        className: Real
        inputOutput: input
        dimensions:
        - '2'
      curveWidth:
        className: Real
        inputOutput: input
      curveStyle:
        className: Integer
        inputOutput: input
      legendPosition:
        className: String
        inputOutput: input
      footer:
        className: String
        inputOutput: input
      autoScale:
        className: Boolean
        inputOutput: input
      forceOMPlot:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.plotAll:
    restriction: function
    isFunction: true
    code: "function plotAll\n  input Boolean externalWindow = false \"Opens the plot\
      \ in a new plot window\";\n  input String fileName = \"<default>\" \"The filename\
      \ containing the variables. <default> will read the last simulation result\"\
      ;\n  input String title = \"\" \"This text will be used as the diagram title.\"\
      ;\n  input String grid = \"detailed\" \"Sets the grid for the plot i.e simple,\
      \ detailed, none.\";\n  input Boolean logX = false \"Determines whether or not\
      \ the horizontal axis is logarithmically scaled.\";\n  input Boolean logY =\
      \ false \"Determines whether or not the vertical axis is logarithmically scaled.\"\
      ;\n  input String xLabel = \"time\" \"This text will be used as the horizontal\
      \ label in the diagram.\";\n  input String yLabel = \"\" \"This text will be\
      \ used as the vertical label in the diagram.\";\n  input Real xRange[2] = {0.0,\
      \ 0.0} \"Determines the horizontal interval that is visible in the diagram.\
      \ {0,0} will select a suitable range.\";\n  input Real yRange[2] = {0.0, 0.0}\
      \ \"Determines the vertical interval that is visible in the diagram. {0,0} will\
      \ select a suitable range.\";\n  input Real curveWidth = 1.0 \"Sets the width\
      \ of the curve.\";\n  input Integer curveStyle = 1 \"Sets the style of the curve.\
      \ SolidLine=1, DashLine=2, DotLine=3, DashDotLine=4, DashDotDotLine=5, Sticks=6,\
      \ Steps=7.\";\n  input String legendPosition = \"top\" \"Sets the POSITION of\
      \ the legend i.e left, right, top, bottom, none.\";\n  input String footer =\
      \ \"\" \"This text will be used as the diagram footer.\";\n  input Boolean autoScale\
      \ = true \"Use auto scale while plotting.\";\n  input Boolean forceOMPlot =\
      \ false \"if true launches OMPlot and doesn't call callback function even if\
      \ it is defined.\";\n  output Boolean success \"Returns true on success\";\n\
      end plotAll;"
    components:
      externalWindow:
        className: Boolean
        inputOutput: input
      fileName:
        className: String
        inputOutput: input
      title:
        className: String
        inputOutput: input
      grid:
        className: String
        inputOutput: input
      logX:
        className: Boolean
        inputOutput: input
      logY:
        className: Boolean
        inputOutput: input
      xLabel:
        className: String
        inputOutput: input
      yLabel:
        className: String
        inputOutput: input
      xRange:
        className: Real
        inputOutput: input
        dimensions:
        - '2'
      yRange:
        className: Real
        inputOutput: input
        dimensions:
        - '2'
      curveWidth:
        className: Real
        inputOutput: input
      curveStyle:
        className: Integer
        inputOutput: input
      legendPosition:
        className: String
        inputOutput: input
      footer:
        className: String
        inputOutput: input
      autoScale:
        className: Boolean
        inputOutput: input
      forceOMPlot:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.plotParametric:
    restriction: function
    isFunction: true
    code: "function plotParametric\n  input VariableName xVariable;\n  input VariableName\
      \ yVariable;\n  input Boolean externalWindow = false \"Opens the plot in a new\
      \ plot window\";\n  input String fileName = \"<default>\" \"The filename containing\
      \ the variables. <default> will read the last simulation result\";\n  input\
      \ String title = \"\" \"This text will be used as the diagram title.\";\n  input\
      \ String grid = \"detailed\" \"Sets the grid for the plot i.e simple, detailed,\
      \ none.\";\n  input Boolean logX = false \"Determines whether or not the horizontal\
      \ axis is logarithmically scaled.\";\n  input Boolean logY = false \"Determines\
      \ whether or not the vertical axis is logarithmically scaled.\";\n  input String\
      \ xLabel = \"time\" \"This text will be used as the horizontal label in the\
      \ diagram.\";\n  input String yLabel = \"\" \"This text will be used as the\
      \ vertical label in the diagram.\";\n  input Real xRange[2] = {0.0, 0.0} \"\
      Determines the horizontal interval that is visible in the diagram. {0,0} will\
      \ select a suitable range.\";\n  input Real yRange[2] = {0.0, 0.0} \"Determines\
      \ the vertical interval that is visible in the diagram. {0,0} will select a\
      \ suitable range.\";\n  input Real curveWidth = 1.0 \"Sets the width of the\
      \ curve.\";\n  input Integer curveStyle = 1 \"Sets the style of the curve. SolidLine=1,\
      \ DashLine=2, DotLine=3, DashDotLine=4, DashDotDotLine=5, Sticks=6, Steps=7.\"\
      ;\n  input String legendPosition = \"top\" \"Sets the POSITION of the legend\
      \ i.e left, right, top, bottom, none.\";\n  input String footer = \"\" \"This\
      \ text will be used as the diagram footer.\";\n  input Boolean autoScale = true\
      \ \"Use auto scale while plotting.\";\n  input Boolean forceOMPlot = false \"\
      if true launches OMPlot and doesn't call callback function even if it is defined.\"\
      ;\n  output Boolean success \"Returns true on success\";\nend plotParametric;"
    components:
      xVariable:
        className: OpenModelica.$Code.VariableName
        inputOutput: input
      yVariable:
        className: OpenModelica.$Code.VariableName
        inputOutput: input
      externalWindow:
        className: Boolean
        inputOutput: input
      fileName:
        className: String
        inputOutput: input
      title:
        className: String
        inputOutput: input
      grid:
        className: String
        inputOutput: input
      logX:
        className: Boolean
        inputOutput: input
      logY:
        className: Boolean
        inputOutput: input
      xLabel:
        className: String
        inputOutput: input
      yLabel:
        className: String
        inputOutput: input
      xRange:
        className: Real
        inputOutput: input
        dimensions:
        - '2'
      yRange:
        className: Real
        inputOutput: input
        dimensions:
        - '2'
      curveWidth:
        className: Real
        inputOutput: input
      curveStyle:
        className: Integer
        inputOutput: input
      legendPosition:
        className: String
        inputOutput: input
      footer:
        className: String
        inputOutput: input
      autoScale:
        className: Boolean
        inputOutput: input
      forceOMPlot:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.readSimulationResult:
    restriction: function
    isFunction: true
    code: "function readSimulationResult\n  input String filename;\n  input VariableNames\
      \ variables;\n  input Integer size = 0 \"0=read any size... If the size is not\
      \ the same as the result-file, this function fails\";\n  output Real result[:,\
      \ :];\nend readSimulationResult;"
    components:
      filename:
        className: String
        inputOutput: input
      variables:
        className: OpenModelica.$Code.VariableNames
        inputOutput: input
      size:
        className: Integer
        inputOutput: input
      result:
        className: Real
        inputOutput: output
        dimensions:
        - ':'
        - ':'
  OpenModelica.Scripting.readSimulationResultSize:
    restriction: function
    isFunction: true
    code: "function readSimulationResultSize\n  input String fileName;\n  output Integer\
      \ sz;\nend readSimulationResultSize;"
    components:
      fileName:
        className: String
        inputOutput: input
      sz:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.readSimulationResultVars:
    restriction: function
    isFunction: true
    code: "function readSimulationResultVars\n  input String fileName;\n  input Boolean\
      \ readParameters = true;\n  input Boolean openmodelicaStyle = false;\n  output\
      \ String[:] vars;\nend readSimulationResultVars;"
    components:
      fileName:
        className: String
        inputOutput: input
      readParameters:
        className: Boolean
        inputOutput: input
      openmodelicaStyle:
        className: Boolean
        inputOutput: input
      vars:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.filterSimulationResults:
    restriction: function
    isFunction: true
    code: "function filterSimulationResults\n  input String inFile;\n  input String\
      \ outFile;\n  input String[:] vars;\n  input Integer numberOfIntervals = 0 \"\
      0=Do not resample\";\n  input Boolean removeDescription = false;\n  output Boolean\
      \ success;\nend filterSimulationResults;"
    components:
      inFile:
        className: String
        inputOutput: input
      outFile:
        className: String
        inputOutput: input
      vars:
        className: String
        inputOutput: input
        dimensions:
        - ':'
      numberOfIntervals:
        className: Integer
        inputOutput: input
      removeDescription:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.compareSimulationResults:
    restriction: function
    isFunction: true
    code: "function compareSimulationResults\n  input String filename;\n  input String\
      \ reffilename;\n  input String logfilename;\n  input Real relTol = 0.01;\n \
      \ input Real absTol = 0.0001;\n  input String[:] vars = fill(\"\", 0);\n  output\
      \ String[:] result;\nend compareSimulationResults;"
    components:
      filename:
        className: String
        inputOutput: input
      reffilename:
        className: String
        inputOutput: input
      logfilename:
        className: String
        inputOutput: input
      relTol:
        className: Real
        inputOutput: input
      absTol:
        className: Real
        inputOutput: input
      vars:
        className: String
        inputOutput: input
        dimensions:
        - ':'
      result:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.deltaSimulationResults:
    restriction: function
    isFunction: true
    code: "function deltaSimulationResults\n  input String filename;\n  input String\
      \ reffilename;\n  input String method \"method to compute then error. choose\
      \ 1norm, 2norm, maxerr\";\n  input String[:] vars = fill(\"\", 0);\n  output\
      \ Real result;\nend deltaSimulationResults;"
    components:
      filename:
        className: String
        inputOutput: input
      reffilename:
        className: String
        inputOutput: input
      method:
        className: String
        inputOutput: input
      vars:
        className: String
        inputOutput: input
        dimensions:
        - ':'
      result:
        className: Real
        inputOutput: output
  OpenModelica.Scripting.diffSimulationResults:
    restriction: function
    isFunction: true
    code: "function diffSimulationResults\n  input String actualFile;\n  input String\
      \ expectedFile;\n  input String diffPrefix;\n  input Real relTol = 1e-3 \"y\
      \ tolerance\";\n  input Real relTolDiffMinMax = 1e-4 \"y tolerance based on\
      \ the difference between the maximum and minimum of the signal\";\n  input Real\
      \ rangeDelta = 0.002 \"x tolerance\";\n  input String[:] vars = fill(\"\", 0);\n\
      \  input Boolean keepEqualResults = false;\n  output Boolean success;\n  output\
      \ String[:] failVars;\nend diffSimulationResults;"
    components:
      actualFile:
        className: String
        inputOutput: input
      expectedFile:
        className: String
        inputOutput: input
      diffPrefix:
        className: String
        inputOutput: input
      relTol:
        className: Real
        inputOutput: input
      relTolDiffMinMax:
        className: Real
        inputOutput: input
      rangeDelta:
        className: Real
        inputOutput: input
      vars:
        className: String
        inputOutput: input
        dimensions:
        - ':'
      keepEqualResults:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
      failVars:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.diffSimulationResultsHtml:
    restriction: function
    isFunction: true
    code: "function diffSimulationResultsHtml\n  input String var;\n  input String\
      \ actualFile;\n  input String expectedFile;\n  input Real relTol = 1e-3 \"y\
      \ tolerance\";\n  input Real relTolDiffMinMax = 1e-4 \"y tolerance based on\
      \ the difference between the maximum and minimum of the signal\";\n  input Real\
      \ rangeDelta = 0.002 \"x tolerance\";\n  output String html;\nend diffSimulationResultsHtml;"
    components:
      var:
        className: String
        inputOutput: input
      actualFile:
        className: String
        inputOutput: input
      expectedFile:
        className: String
        inputOutput: input
      relTol:
        className: Real
        inputOutput: input
      relTolDiffMinMax:
        className: Real
        inputOutput: input
      rangeDelta:
        className: Real
        inputOutput: input
      html:
        className: String
        inputOutput: output
  OpenModelica.Scripting.checkTaskGraph:
    restriction: function
    isFunction: true
    code: "function checkTaskGraph\n  input String filename;\n  input String reffilename;\n\
      \  output String[:] result;\nend checkTaskGraph;"
    components:
      filename:
        className: String
        inputOutput: input
      reffilename:
        className: String
        inputOutput: input
      result:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.checkCodeGraph:
    restriction: function
    isFunction: true
    code: "function checkCodeGraph\n  input String graphfile;\n  input String codefile;\n\
      \  output String[:] result;\nend checkCodeGraph;"
    components:
      graphfile:
        className: String
        inputOutput: input
      codefile:
        className: String
        inputOutput: input
      result:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.val:
    restriction: function
    isFunction: true
    code: "function val\n  input VariableName var;\n  input Real timePoint = 0.0;\n\
      \  input String fileName = \"<default>\" \"The contents of the currentSimulationResult\
      \ variable\";\n  output Real valAtTime;\nend val;"
    components:
      var:
        className: OpenModelica.$Code.VariableName
        inputOutput: input
      timePoint:
        className: Real
        inputOutput: input
      fileName:
        className: String
        inputOutput: input
      valAtTime:
        className: Real
        inputOutput: output
  OpenModelica.Scripting.closeSimulationResultFile:
    restriction: function
    isFunction: true
    code: "function closeSimulationResultFile\n  output Boolean success;\nend closeSimulationResultFile;"
    components:
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.addClassAnnotation:
    restriction: function
    isFunction: true
    code: "function addClassAnnotation\n  input TypeName class_;\n  input ExpressionOrModification\
      \ annotate;\n  output Boolean bool;\nend addClassAnnotation;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      annotate:
        className: OpenModelica.$Code.ExpressionOrModification
        inputOutput: input
      bool:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getParameterNames:
    restriction: function
    isFunction: true
    code: "function getParameterNames\n  input TypeName class_;\n  output String[:]\
      \ parameters;\nend getParameterNames;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      parameters:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.getParameterValue:
    restriction: function
    isFunction: true
    code: "function getParameterValue\n  input TypeName class_;\n  input String parameterName;\n\
      \  output String parameterValue;\nend getParameterValue;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      parameterName:
        className: String
        inputOutput: input
      parameterValue:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getComponentModifierNames:
    restriction: function
    isFunction: true
    code: "function getComponentModifierNames\n  input TypeName class_;\n  input String\
      \ componentName;\n  output String[:] modifiers;\nend getComponentModifierNames;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      componentName:
        className: String
        inputOutput: input
      modifiers:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.getComponentModifierValue:
    restriction: function
    isFunction: true
    code: "function getComponentModifierValue\n  input TypeName class_;\n  input TypeName\
      \ modifier;\n  output String value;\nend getComponentModifierValue;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      modifier:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      value:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getComponentModifierValues:
    restriction: function
    isFunction: true
    code: "function getComponentModifierValues\n  input TypeName class_;\n  input\
      \ TypeName modifier;\n  output String value;\nend getComponentModifierValues;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      modifier:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      value:
        className: String
        inputOutput: output
  OpenModelica.Scripting.removeComponentModifiers:
    restriction: function
    isFunction: true
    code: "function removeComponentModifiers\n  input TypeName class_;\n  input String\
      \ componentName;\n  input Boolean keepRedeclares = false;\n  output Boolean\
      \ success;\nend removeComponentModifiers;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      componentName:
        className: String
        inputOutput: input
      keepRedeclares:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getElementModifierNames:
    restriction: function
    isFunction: true
    code: "function getElementModifierNames\n  input TypeName className;\n  input\
      \ String elementName;\n  output String[:] modifiers;\nend getElementModifierNames;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      elementName:
        className: String
        inputOutput: input
      modifiers:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.getElementModifierValue:
    restriction: function
    isFunction: true
    code: "function getElementModifierValue\n  input TypeName className;\n  input\
      \ TypeName modifier;\n  output String value;\nend getElementModifierValue;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      modifier:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      value:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getElementModifierValues:
    restriction: function
    isFunction: true
    code: "function getElementModifierValues\n  input TypeName className;\n  input\
      \ TypeName modifier;\n  output String value;\nend getElementModifierValues;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      modifier:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      value:
        className: String
        inputOutput: output
  OpenModelica.Scripting.removeElementModifiers:
    restriction: function
    isFunction: true
    code: "function removeElementModifiers\n  input TypeName className;\n  input String\
      \ componentName;\n  input Boolean keepRedeclares = false;\n  output Boolean\
      \ success;\nend removeElementModifiers;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      componentName:
        className: String
        inputOutput: input
      keepRedeclares:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getInstantiatedParametersAndValues:
    restriction: function
    isFunction: true
    code: "function getInstantiatedParametersAndValues\n  input TypeName cls;\n  output\
      \ String[:] values;\nend getInstantiatedParametersAndValues;"
    components:
      cls:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      values:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.removeExtendsModifiers:
    restriction: function
    isFunction: true
    code: "function removeExtendsModifiers\n  input TypeName className;\n  input TypeName\
      \ baseClassName;\n  input Boolean keepRedeclares = false;\n  output Boolean\
      \ success;\nend removeExtendsModifiers;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      baseClassName:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      keepRedeclares:
        className: Boolean
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.updateConnection:
    restriction: function
    isFunction: true
    code: "function updateConnection\n  input TypeName className;\n  input String\
      \ from;\n  input String to;\n  input ExpressionOrModification annotate;\n  output\
      \ Boolean result;\nend updateConnection;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      from:
        className: String
        inputOutput: input
      to:
        className: String
        inputOutput: input
      annotate:
        className: OpenModelica.$Code.ExpressionOrModification
        inputOutput: input
      result:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.updateConnectionAnnotation:
    restriction: function
    isFunction: true
    code: "function updateConnectionAnnotation\n  input TypeName className;\n  input\
      \ String from;\n  input String to;\n  input String annotate;\n  output Boolean\
      \ result;\nend updateConnectionAnnotation;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      from:
        className: String
        inputOutput: input
      to:
        className: String
        inputOutput: input
      annotate:
        className: String
        inputOutput: input
      result:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.updateConnectionNames:
    restriction: function
    isFunction: true
    code: "function updateConnectionNames\n  input TypeName className;\n  input String\
      \ from;\n  input String to;\n  input String fromNew;\n  input String toNew;\n\
      \  output Boolean result;\nend updateConnectionNames;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      from:
        className: String
        inputOutput: input
      to:
        className: String
        inputOutput: input
      fromNew:
        className: String
        inputOutput: input
      toNew:
        className: String
        inputOutput: input
      result:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getConnectionCount:
    restriction: function
    isFunction: true
    code: "function getConnectionCount\n  input TypeName className;\n  output Integer\
      \ count;\nend getConnectionCount;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      count:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.getNthConnection:
    restriction: function
    isFunction: true
    code: "function getNthConnection\n  input TypeName className;\n  input Integer\
      \ index;\n  output String[:] result;\nend getNthConnection;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      index:
        className: Integer
        inputOutput: input
      result:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.getAlgorithmCount:
    restriction: function
    isFunction: true
    code: "function getAlgorithmCount\n  input TypeName class_;\n  output Integer\
      \ count;\nend getAlgorithmCount;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      count:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.getNthAlgorithm:
    restriction: function
    isFunction: true
    code: "function getNthAlgorithm\n  input TypeName class_;\n  input Integer index;\n\
      \  output String result;\nend getNthAlgorithm;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      index:
        className: Integer
        inputOutput: input
      result:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getInitialAlgorithmCount:
    restriction: function
    isFunction: true
    code: "function getInitialAlgorithmCount\n  input TypeName class_;\n  output Integer\
      \ count;\nend getInitialAlgorithmCount;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      count:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.getNthInitialAlgorithm:
    restriction: function
    isFunction: true
    code: "function getNthInitialAlgorithm\n  input TypeName class_;\n  input Integer\
      \ index;\n  output String result;\nend getNthInitialAlgorithm;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      index:
        className: Integer
        inputOutput: input
      result:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getAlgorithmItemsCount:
    restriction: function
    isFunction: true
    code: "function getAlgorithmItemsCount\n  input TypeName class_;\n  output Integer\
      \ count;\nend getAlgorithmItemsCount;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      count:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.getNthAlgorithmItem:
    restriction: function
    isFunction: true
    code: "function getNthAlgorithmItem\n  input TypeName class_;\n  input Integer\
      \ index;\n  output String result;\nend getNthAlgorithmItem;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      index:
        className: Integer
        inputOutput: input
      result:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getInitialAlgorithmItemsCount:
    restriction: function
    isFunction: true
    code: "function getInitialAlgorithmItemsCount\n  input TypeName class_;\n  output\
      \ Integer count;\nend getInitialAlgorithmItemsCount;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      count:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.getNthInitialAlgorithmItem:
    restriction: function
    isFunction: true
    code: "function getNthInitialAlgorithmItem\n  input TypeName class_;\n  input\
      \ Integer index;\n  output String result;\nend getNthInitialAlgorithmItem;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      index:
        className: Integer
        inputOutput: input
      result:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getEquationCount:
    restriction: function
    isFunction: true
    code: "function getEquationCount\n  input TypeName class_;\n  output Integer count;\n\
      end getEquationCount;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      count:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.getNthEquation:
    restriction: function
    isFunction: true
    code: "function getNthEquation\n  input TypeName class_;\n  input Integer index;\n\
      \  output String result;\nend getNthEquation;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      index:
        className: Integer
        inputOutput: input
      result:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getInitialEquationCount:
    restriction: function
    isFunction: true
    code: "function getInitialEquationCount\n  input TypeName class_;\n  output Integer\
      \ count;\nend getInitialEquationCount;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      count:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.getNthInitialEquation:
    restriction: function
    isFunction: true
    code: "function getNthInitialEquation\n  input TypeName class_;\n  input Integer\
      \ index;\n  output String result;\nend getNthInitialEquation;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      index:
        className: Integer
        inputOutput: input
      result:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getEquationItemsCount:
    restriction: function
    isFunction: true
    code: "function getEquationItemsCount\n  input TypeName class_;\n  output Integer\
      \ count;\nend getEquationItemsCount;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      count:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.getNthEquationItem:
    restriction: function
    isFunction: true
    code: "function getNthEquationItem\n  input TypeName class_;\n  input Integer\
      \ index;\n  output String result;\nend getNthEquationItem;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      index:
        className: Integer
        inputOutput: input
      result:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getInitialEquationItemsCount:
    restriction: function
    isFunction: true
    code: "function getInitialEquationItemsCount\n  input TypeName class_;\n  output\
      \ Integer count;\nend getInitialEquationItemsCount;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      count:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.getNthInitialEquationItem:
    restriction: function
    isFunction: true
    code: "function getNthInitialEquationItem\n  input TypeName class_;\n  input Integer\
      \ index;\n  output String result;\nend getNthInitialEquationItem;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      index:
        className: Integer
        inputOutput: input
      result:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getAnnotationCount:
    restriction: function
    isFunction: true
    code: "function getAnnotationCount\n  input TypeName class_;\n  output Integer\
      \ count;\nend getAnnotationCount;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      count:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.getNthAnnotationString:
    restriction: function
    isFunction: true
    code: "function getNthAnnotationString\n  input TypeName class_;\n  input Integer\
      \ index;\n  output String result;\nend getNthAnnotationString;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      index:
        className: Integer
        inputOutput: input
      result:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getImportCount:
    restriction: function
    isFunction: true
    code: "function getImportCount\n  input TypeName class_;\n  output Integer count;\n\
      end getImportCount;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      count:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.getNthImport:
    restriction: function
    isFunction: true
    code: "function getNthImport\n  input TypeName class_;\n  input Integer index;\n\
      \  output String out[3] \"{\\\"Path\\\",\\\"Id\\\",\\\"Kind\\\"}\";\nend getNthImport;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      index:
        className: Integer
        inputOutput: input
      out:
        className: String
        inputOutput: output
        dimensions:
        - '3'
  OpenModelica.Scripting.iconv:
    restriction: function
    isFunction: true
    code: "function iconv\n  input String string;\n  input String from;\n  input String\
      \ to = \"UTF-8\";\n  output String result;\nend iconv;"
    components:
      string:
        className: String
        inputOutput: input
      from:
        className: String
        inputOutput: input
      to:
        className: String
        inputOutput: input
      result:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getDocumentationAnnotation:
    restriction: function
    isFunction: true
    code: "function getDocumentationAnnotation\n  input TypeName cl;\n  output String\
      \ out[3] \"{info,revision,infoHeader} TODO: Should be changed to have 2 outputs\
      \ instead of an array of 2 Strings...\";\nend getDocumentationAnnotation;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      out:
        className: String
        inputOutput: output
        dimensions:
        - '3'
  OpenModelica.Scripting.setDocumentationAnnotation:
    restriction: function
    isFunction: true
    code: "function setDocumentationAnnotation\n  input TypeName class_;\n  input\
      \ String info = \"\";\n  input String revisions = \"\";\n  output Boolean bool;\n\
      end setDocumentationAnnotation;"
    components:
      class_:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      info:
        className: String
        inputOutput: input
      revisions:
        className: String
        inputOutput: input
      bool:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getTimeStamp:
    restriction: function
    isFunction: true
    code: "function getTimeStamp\n  input TypeName cl;\n  output Real timeStamp;\n\
      \  output String timeStampAsString;\nend getTimeStamp;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      timeStamp:
        className: Real
        inputOutput: output
      timeStampAsString:
        className: String
        inputOutput: output
  OpenModelica.Scripting.stringTypeName:
    restriction: function
    isFunction: true
    code: "function stringTypeName\n  input String str;\n  output TypeName cl;\nend\
      \ stringTypeName;"
    components:
      str:
        className: String
        inputOutput: input
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: output
  OpenModelica.Scripting.stringVariableName:
    restriction: function
    isFunction: true
    code: "function stringVariableName\n  input String str;\n  output VariableName\
      \ cl;\nend stringVariableName;"
    components:
      str:
        className: String
        inputOutput: input
      cl:
        className: OpenModelica.$Code.VariableName
        inputOutput: output
  OpenModelica.Scripting.typeNameString:
    restriction: function
    isFunction: true
    code: "function typeNameString\n  input TypeName cl;\n  output String out;\nend\
      \ typeNameString;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      out:
        className: String
        inputOutput: output
  OpenModelica.Scripting.typeNameStrings:
    restriction: function
    isFunction: true
    code: "function typeNameStrings\n  input TypeName cl;\n  output String out[:];\n\
      end typeNameStrings;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      out:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.getClassComment:
    restriction: function
    isFunction: true
    code: "function getClassComment\n  input TypeName cl;\n  output String comment;\n\
      end getClassComment;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      comment:
        className: String
        inputOutput: output
  OpenModelica.Scripting.dirname:
    restriction: function
    isFunction: true
    code: "function dirname\n  input String path;\n  output String dirname;\nend dirname;"
    components:
      path:
        className: String
        inputOutput: input
      dirname:
        className: String
        inputOutput: output
  OpenModelica.Scripting.basename:
    restriction: function
    isFunction: true
    code: "function basename\n  input String path;\n  output String basename;\nend\
      \ basename;"
    components:
      path:
        className: String
        inputOutput: input
      basename:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getClassRestriction:
    restriction: function
    isFunction: true
    code: "function getClassRestriction\n  input TypeName cl;\n  output String restriction;\n\
      end getClassRestriction;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      restriction:
        className: String
        inputOutput: output
  OpenModelica.Scripting.isType:
    restriction: function
    isFunction: true
    code: "function isType\n  input TypeName cl;\n  output Boolean b;\nend isType;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      b:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.isPackage:
    restriction: function
    isFunction: true
    code: "function isPackage\n  input TypeName cl;\n  output Boolean b;\nend isPackage;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      b:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.isClass:
    restriction: function
    isFunction: true
    code: "function isClass\n  input TypeName cl;\n  output Boolean b;\nend isClass;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      b:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.isRecord:
    restriction: function
    isFunction: true
    code: "function isRecord\n  input TypeName cl;\n  output Boolean b;\nend isRecord;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      b:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.isBlock:
    restriction: function
    isFunction: true
    code: "function isBlock\n  input TypeName cl;\n  output Boolean b;\nend isBlock;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      b:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.isFunction:
    restriction: function
    isFunction: true
    code: "function isFunction\n  input TypeName cl;\n  output Boolean b;\nend isFunction;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      b:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.isPartial:
    restriction: function
    isFunction: true
    code: "function isPartial\n  input TypeName cl;\n  output Boolean b;\nend isPartial;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      b:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.isModel:
    restriction: function
    isFunction: true
    code: "function isModel\n  input TypeName cl;\n  output Boolean b;\nend isModel;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      b:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.isConnector:
    restriction: function
    isFunction: true
    code: "function isConnector\n  input TypeName cl;\n  output Boolean b;\nend isConnector;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      b:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.isOptimization:
    restriction: function
    isFunction: true
    code: "function isOptimization\n  input TypeName cl;\n  output Boolean b;\nend\
      \ isOptimization;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      b:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.isEnumeration:
    restriction: function
    isFunction: true
    code: "function isEnumeration\n  input TypeName cl;\n  output Boolean b;\nend\
      \ isEnumeration;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      b:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.isOperator:
    restriction: function
    isFunction: true
    code: "function isOperator\n  input TypeName cl;\n  output Boolean b;\nend isOperator;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      b:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.isOperatorRecord:
    restriction: function
    isFunction: true
    code: "function isOperatorRecord\n  input TypeName cl;\n  output Boolean b;\n\
      end isOperatorRecord;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      b:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.isOperatorFunction:
    restriction: function
    isFunction: true
    code: "function isOperatorFunction\n  input TypeName cl;\n  output Boolean b;\n\
      end isOperatorFunction;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      b:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.isProtectedClass:
    restriction: function
    isFunction: true
    code: "function isProtectedClass\n  input TypeName cl;\n  input String c2;\n \
      \ output Boolean b;\nend isProtectedClass;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      c2:
        className: String
        inputOutput: input
      b:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getBuiltinType:
    restriction: function
    isFunction: true
    code: "function getBuiltinType\n  input TypeName cl;\n  output String name;\n\
      end getBuiltinType;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      name:
        className: String
        inputOutput: output
  OpenModelica.Scripting.setInitXmlStartValue:
    restriction: function
    isFunction: true
    code: "function setInitXmlStartValue\n  input String fileName;\n  input String\
      \ variableName;\n  input String startValue;\n  input String outputFile;\n  output\
      \ Boolean success = false;\nend setInitXmlStartValue;"
    components:
      fileName:
        className: String
        inputOutput: input
      variableName:
        className: String
        inputOutput: input
      startValue:
        className: String
        inputOutput: input
      outputFile:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.ngspicetoModelica:
    restriction: function
    isFunction: true
    code: "function ngspicetoModelica\n  input String netlistfileName;\n  output Boolean\
      \ success = false;\nend ngspicetoModelica;"
    components:
      netlistfileName:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getInheritedClasses:
    restriction: function
    isFunction: true
    code: "function getInheritedClasses\n  input TypeName name;\n  output TypeName\
      \ inheritedClasses[:];\nend getInheritedClasses;"
    components:
      name:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      inheritedClasses:
        className: OpenModelica.$Code.TypeName
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.getComponentsTest:
    restriction: function
    isFunction: true
    code: "function getComponentsTest\n  input TypeName name;\n  output Component[:]\
      \ components;\n\n  record Component\n    String className;\n    // when building\
      \ record the constructor. Records are allowed to contain only components of\
      \ basic types, arrays of basic types or other records.\n    String name;\n \
      \   String comment;\n    Boolean isProtected;\n    Boolean isFinal;\n    Boolean\
      \ isFlow;\n    Boolean isStream;\n    Boolean isReplaceable;\n    String variability\
      \ \"'constant', 'parameter', 'discrete', ''\";\n    String innerOuter \"'inner',\
      \ 'outer', ''\";\n    String inputOutput \"'input', 'output', ''\";\n    String\
      \ dimensions[:];\n  end Component;\nend getComponentsTest;"
    components:
      name:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      components:
        className: OpenModelica.Scripting.getComponentsTest.Component
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.getComponentsTest.Component:
    restriction: record
    isRecord: true
    code: "record Component\n  String className;\n  // when building record the constructor.\
      \ Records are allowed to contain only components of basic types, arrays of basic\
      \ types or other records.\n  String name;\n  String comment;\n  Boolean isProtected;\n\
      \  Boolean isFinal;\n  Boolean isFlow;\n  Boolean isStream;\n  Boolean isReplaceable;\n\
      \  String variability \"'constant', 'parameter', 'discrete', ''\";\n  String\
      \ innerOuter \"'inner', 'outer', ''\";\n  String inputOutput \"'input', 'output',\
      \ ''\";\n  String dimensions[:];\nend Component;"
    components:
      className:
        className: String
      name:
        className: String
      comment:
        className: String
      isProtected:
        className: Boolean
      isFinal:
        className: Boolean
      isFlow:
        className: Boolean
      isStream:
        className: Boolean
      isReplaceable:
        className: Boolean
      variability:
        className: String
      innerOuter:
        className: String
      inputOutput:
        className: String
      dimensions:
        className: String
        dimensions:
        - ':'
  OpenModelica.Scripting.isExperiment:
    restriction: function
    isFunction: true
    code: "function isExperiment\n  input TypeName name;\n  output Boolean res;\n\
      end isExperiment;"
    components:
      name:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      res:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getSimulationOptions:
    restriction: function
    isFunction: true
    code: "function getSimulationOptions\n  input TypeName name;\n  input Real defaultStartTime\
      \ = 0.0;\n  input Real defaultStopTime = 1.0;\n  input Real defaultTolerance\
      \ = 1e-6;\n  input Integer defaultNumberOfIntervals = 500 \"May be overridden\
      \ by defining defaultInterval instead\";\n  input Real defaultInterval = 0.0\
      \ \"If = 0.0, then numberOfIntervals is used to calculate the step size\";\n\
      \  output Real startTime;\n  output Real stopTime;\n  output Real tolerance;\n\
      \  output Integer numberOfIntervals;\n  output Real interval;\nend getSimulationOptions;"
    components:
      name:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      defaultStartTime:
        className: Real
        inputOutput: input
      defaultStopTime:
        className: Real
        inputOutput: input
      defaultTolerance:
        className: Real
        inputOutput: input
      defaultNumberOfIntervals:
        className: Integer
        inputOutput: input
      defaultInterval:
        className: Real
        inputOutput: input
      startTime:
        className: Real
        inputOutput: output
      stopTime:
        className: Real
        inputOutput: output
      tolerance:
        className: Real
        inputOutput: output
      numberOfIntervals:
        className: Integer
        inputOutput: output
      interval:
        className: Real
        inputOutput: output
  OpenModelica.Scripting.getAnnotationNamedModifiers:
    restriction: function
    isFunction: true
    code: "function getAnnotationNamedModifiers\n  input TypeName name;\n  input String\
      \ vendorannotation;\n  output String[:] modifiernamelist;\nend getAnnotationNamedModifiers;"
    components:
      name:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      vendorannotation:
        className: String
        inputOutput: input
      modifiernamelist:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.getAnnotationModifierValue:
    restriction: function
    isFunction: true
    code: "function getAnnotationModifierValue\n  input TypeName name;\n  input String\
      \ vendorannotation;\n  input String modifiername;\n  output String modifiernamevalue;\n\
      end getAnnotationModifierValue;"
    components:
      name:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      vendorannotation:
        className: String
        inputOutput: input
      modifiername:
        className: String
        inputOutput: input
      modifiernamevalue:
        className: String
        inputOutput: output
  OpenModelica.Scripting.classAnnotationExists:
    restriction: function
    isFunction: true
    code: "function classAnnotationExists\n  input TypeName className;\n  input TypeName\
      \ annotationName;\n  output Boolean exists;\nend classAnnotationExists;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      annotationName:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      exists:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getBooleanClassAnnotation:
    restriction: function
    isFunction: true
    code: "function getBooleanClassAnnotation\n  input TypeName className;\n  input\
      \ TypeName annotationName;\n  output Boolean value;\nend getBooleanClassAnnotation;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      annotationName:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      value:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.extendsFrom:
    restriction: function
    isFunction: true
    code: "function extendsFrom\n  input TypeName className;\n  input TypeName baseClassName;\n\
      \  output Boolean res;\nend extendsFrom;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      baseClassName:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      res:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.loadModelica3D:
    restriction: function
    isFunction: true
    code: "function loadModelica3D\n  input String version = \"3.2.1\";\n  output\
      \ Boolean status;\nend loadModelica3D;"
    components:
      version:
        className: String
        inputOutput: input
      status:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.searchClassNames:
    restriction: function
    isFunction: true
    code: "function searchClassNames\n  input String searchText;\n  input Boolean\
      \ findInText = false;\n  output TypeName classNames[:];\nend searchClassNames;"
    components:
      searchText:
        className: String
        inputOutput: input
      findInText:
        className: Boolean
        inputOutput: input
      classNames:
        className: OpenModelica.$Code.TypeName
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.getAvailableLibraries:
    restriction: function
    isFunction: true
    code: "function getAvailableLibraries\n  output String[:] libraries;\nend getAvailableLibraries;"
    components:
      libraries:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.installPackage:
    restriction: function
    isFunction: true
    code: "function installPackage\n  input TypeName pkg;\n  input String version\
      \ = \"\";\n  input Boolean exactMatch = false;\n  output Boolean result;\nend\
      \ installPackage;"
    components:
      pkg:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      version:
        className: String
        inputOutput: input
      exactMatch:
        className: Boolean
        inputOutput: input
      result:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.updatePackageIndex:
    restriction: function
    isFunction: true
    code: "function updatePackageIndex\n  output Boolean result;\nend updatePackageIndex;"
    components:
      result:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.upgradeInstalledPackages:
    restriction: function
    isFunction: true
    code: "function upgradeInstalledPackages\n  input Boolean installNewestVersions\
      \ = true;\n  output Boolean result;\nend upgradeInstalledPackages;"
    components:
      installNewestVersions:
        className: Boolean
        inputOutput: input
      result:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getUses:
    restriction: function
    isFunction: true
    code: "function getUses\n  input TypeName pack;\n  output String[:, :] uses;\n\
      end getUses;"
    components:
      pack:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      uses:
        className: String
        inputOutput: output
        dimensions:
        - ':'
        - ':'
  OpenModelica.Scripting.getConversionsFromVersions:
    restriction: function
    isFunction: true
    code: "function getConversionsFromVersions\n  input TypeName pack;\n  output String[:]\
      \ withoutConversion;\n  output String[:] withConversion;\nend getConversionsFromVersions;"
    components:
      pack:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      withoutConversion:
        className: String
        inputOutput: output
        dimensions:
        - ':'
      withConversion:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.getDerivedClassModifierNames:
    restriction: function
    isFunction: true
    code: "function getDerivedClassModifierNames\n  input TypeName className;\n  output\
      \ String[:] modifierNames;\nend getDerivedClassModifierNames;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      modifierNames:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.getDerivedClassModifierValue:
    restriction: function
    isFunction: true
    code: "function getDerivedClassModifierValue\n  input TypeName className;\n  input\
      \ TypeName modifierName;\n  output String modifierValue;\nend getDerivedClassModifierValue;"
    components:
      className:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      modifierName:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      modifierValue:
        className: String
        inputOutput: output
  OpenModelica.Scripting.generateEntryPoint:
    restriction: function
    isFunction: true
    code: "function generateEntryPoint\n  input String fileName;\n  input TypeName\
      \ entryPoint;\n  input String url = \"https://trac.openmodelica.org/OpenModelica/newticket\"\
      ;\nend generateEntryPoint;"
    components:
      fileName:
        className: String
        inputOutput: input
      entryPoint:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      url:
        className: String
        inputOutput: input
  OpenModelica.Scripting.numProcessors:
    restriction: function
    isFunction: true
    code: "function numProcessors\n  output Integer result;\nend numProcessors;"
    components:
      result:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.runScriptParallel:
    restriction: function
    isFunction: true
    code: "function runScriptParallel\n  input String scripts[:];\n  input Integer\
      \ numThreads = numProcessors();\n  input Boolean useThreads = false;\n  output\
      \ Boolean results[:];\nend runScriptParallel;"
    components:
      scripts:
        className: String
        inputOutput: input
        dimensions:
        - ':'
      numThreads:
        className: Integer
        inputOutput: input
      useThreads:
        className: Boolean
        inputOutput: input
      results:
        className: Boolean
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.exit:
    restriction: function
    isFunction: true
    code: "function exit\n  input Integer status;\nend exit;"
    components:
      status:
        className: Integer
        inputOutput: input
  OpenModelica.Scripting.threadWorkFailed:
    restriction: function
    isFunction: true
    components: {}
  OpenModelica.Scripting.getMemorySize:
    restriction: function
    isFunction: true
    code: "function getMemorySize\n  output Real memory(unit = \"MiB\");\nend getMemorySize;"
    components:
      memory:
        className: Real
        inputOutput: output
  OpenModelica.Scripting.GC_gcollect_and_unmap:
    restriction: function
    isFunction: true
    components: {}
  OpenModelica.Scripting.GC_expand_hp:
    restriction: function
    isFunction: true
    code: "function GC_expand_hp\n  input Integer size;\n  output Boolean success;\n\
      end GC_expand_hp;"
    components:
      size:
        className: Integer
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.GC_set_max_heap_size:
    restriction: function
    isFunction: true
    code: "function GC_set_max_heap_size\n  input Integer size;\n  output Boolean\
      \ success;\nend GC_set_max_heap_size;"
    components:
      size:
        className: Integer
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.GC_PROFSTATS:
    restriction: record
    isRecord: true
    code: "record GC_PROFSTATS\n  Integer heapsize_full;\n  Integer free_bytes_full;\n\
      \  Integer unmapped_bytes;\n  Integer bytes_allocd_since_gc;\n  Integer allocd_bytes_before_gc;\n\
      \  Integer non_gc_bytes;\n  Integer gc_no;\n  Integer markers_m1;\n  Integer\
      \ bytes_reclaimed_since_gc;\n  Integer reclaimed_bytes_before_gc;\nend GC_PROFSTATS;"
    components:
      heapsize_full:
        className: Integer
      free_bytes_full:
        className: Integer
      unmapped_bytes:
        className: Integer
      bytes_allocd_since_gc:
        className: Integer
      allocd_bytes_before_gc:
        className: Integer
      non_gc_bytes:
        className: Integer
      gc_no:
        className: Integer
      markers_m1:
        className: Integer
      bytes_reclaimed_since_gc:
        className: Integer
      reclaimed_bytes_before_gc:
        className: Integer
  OpenModelica.Scripting.GC_get_prof_stats:
    restriction: function
    isFunction: true
    code: "function GC_get_prof_stats\n  output GC_PROFSTATS gcStats;\nend GC_get_prof_stats;"
    components:
      gcStats:
        className: OpenModelica.Scripting.GC_PROFSTATS
        inputOutput: output
  OpenModelica.Scripting.checkInterfaceOfPackages:
    restriction: function
    isFunction: true
    code: "function checkInterfaceOfPackages\n  input TypeName cl;\n  input String\
      \ dependencyMatrix[:, :];\n  output Boolean success;\nend checkInterfaceOfPackages;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      dependencyMatrix:
        className: String
        inputOutput: input
        dimensions:
        - ':'
        - ':'
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.sortStrings:
    restriction: function
    isFunction: true
    code: "function sortStrings\n  input String arr[:];\n  output String sorted[:];\n\
      end sortStrings;"
    components:
      arr:
        className: String
        inputOutput: input
        dimensions:
        - ':'
      sorted:
        className: String
        inputOutput: output
        dimensions:
        - ':'
  OpenModelica.Scripting.getClassInformation:
    restriction: function
    isFunction: true
    code: "function getClassInformation\n  input TypeName cl;\n  output String restriction,\
      \ comment;\n  output Boolean partialPrefix, finalPrefix, encapsulatedPrefix;\n\
      \  output String fileName;\n  output Boolean fileReadOnly;\n  output Integer\
      \ lineNumberStart, columnNumberStart, lineNumberEnd, columnNumberEnd;\n  output\
      \ String dimensions[:];\n  output Boolean isProtectedClass;\n  output Boolean\
      \ isDocumentationClass;\n  output String version;\n  output String preferredView;\n\
      \  output Boolean state;\n  output String access;\nend getClassInformation;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      restriction:
        className: String
        inputOutput: output
      comment:
        className: String
        inputOutput: output
      partialPrefix:
        className: Boolean
        inputOutput: output
      finalPrefix:
        className: Boolean
        inputOutput: output
      encapsulatedPrefix:
        className: Boolean
        inputOutput: output
      fileName:
        className: String
        inputOutput: output
      fileReadOnly:
        className: Boolean
        inputOutput: output
      lineNumberStart:
        className: Integer
        inputOutput: output
      columnNumberStart:
        className: Integer
        inputOutput: output
      lineNumberEnd:
        className: Integer
        inputOutput: output
      columnNumberEnd:
        className: Integer
        inputOutput: output
      dimensions:
        className: String
        inputOutput: output
        dimensions:
        - ':'
      isProtectedClass:
        className: Boolean
        inputOutput: output
      isDocumentationClass:
        className: Boolean
        inputOutput: output
      version:
        className: String
        inputOutput: output
      preferredView:
        className: String
        inputOutput: output
      state:
        className: Boolean
        inputOutput: output
      access:
        className: String
        inputOutput: output
  OpenModelica.Scripting.getTransitions:
    restriction: function
    isFunction: true
    code: "function getTransitions\n  input TypeName cl;\n  output String[:, :] transitions;\n\
      end getTransitions;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      transitions:
        className: String
        inputOutput: output
        dimensions:
        - ':'
        - ':'
  OpenModelica.Scripting.addTransition:
    restriction: function
    isFunction: true
    code: "function addTransition\n  input TypeName cl;\n  input String from;\n  input\
      \ String to;\n  input String condition;\n  input Boolean immediate = true;\n\
      \  input Boolean reset = true;\n  input Boolean synchronize = false;\n  input\
      \ Integer priority = 1;\n  input ExpressionOrModification annotate;\n  output\
      \ Boolean bool;\nend addTransition;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      from:
        className: String
        inputOutput: input
      to:
        className: String
        inputOutput: input
      condition:
        className: String
        inputOutput: input
      immediate:
        className: Boolean
        inputOutput: input
      reset:
        className: Boolean
        inputOutput: input
      synchronize:
        className: Boolean
        inputOutput: input
      priority:
        className: Integer
        inputOutput: input
      annotate:
        className: OpenModelica.$Code.ExpressionOrModification
        inputOutput: input
      bool:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.deleteTransition:
    restriction: function
    isFunction: true
    code: "function deleteTransition\n  input TypeName cl;\n  input String from;\n\
      \  input String to;\n  input String condition;\n  input Boolean immediate;\n\
      \  input Boolean reset;\n  input Boolean synchronize;\n  input Integer priority;\n\
      \  output Boolean bool;\nend deleteTransition;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      from:
        className: String
        inputOutput: input
      to:
        className: String
        inputOutput: input
      condition:
        className: String
        inputOutput: input
      immediate:
        className: Boolean
        inputOutput: input
      reset:
        className: Boolean
        inputOutput: input
      synchronize:
        className: Boolean
        inputOutput: input
      priority:
        className: Integer
        inputOutput: input
      bool:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.updateTransition:
    restriction: function
    isFunction: true
    code: "function updateTransition\n  input TypeName cl;\n  input String from;\n\
      \  input String to;\n  input String oldCondition;\n  input Boolean oldImmediate;\n\
      \  input Boolean oldReset;\n  input Boolean oldSynchronize;\n  input Integer\
      \ oldPriority;\n  input String newCondition;\n  input Boolean newImmediate;\n\
      \  input Boolean newReset;\n  input Boolean newSynchronize;\n  input Integer\
      \ newPriority;\n  input ExpressionOrModification annotate;\n  output Boolean\
      \ bool;\nend updateTransition;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      from:
        className: String
        inputOutput: input
      to:
        className: String
        inputOutput: input
      oldCondition:
        className: String
        inputOutput: input
      oldImmediate:
        className: Boolean
        inputOutput: input
      oldReset:
        className: Boolean
        inputOutput: input
      oldSynchronize:
        className: Boolean
        inputOutput: input
      oldPriority:
        className: Integer
        inputOutput: input
      newCondition:
        className: String
        inputOutput: input
      newImmediate:
        className: Boolean
        inputOutput: input
      newReset:
        className: Boolean
        inputOutput: input
      newSynchronize:
        className: Boolean
        inputOutput: input
      newPriority:
        className: Integer
        inputOutput: input
      annotate:
        className: OpenModelica.$Code.ExpressionOrModification
        inputOutput: input
      bool:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.getInitialStates:
    restriction: function
    isFunction: true
    code: "function getInitialStates\n  input TypeName cl;\n  output String[:, :]\
      \ initialStates;\nend getInitialStates;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      initialStates:
        className: String
        inputOutput: output
        dimensions:
        - ':'
        - ':'
  OpenModelica.Scripting.addInitialState:
    restriction: function
    isFunction: true
    code: "function addInitialState\n  input TypeName cl;\n  input String state;\n\
      \  input ExpressionOrModification annotate;\n  output Boolean bool;\nend addInitialState;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      state:
        className: String
        inputOutput: input
      annotate:
        className: OpenModelica.$Code.ExpressionOrModification
        inputOutput: input
      bool:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.deleteInitialState:
    restriction: function
    isFunction: true
    code: "function deleteInitialState\n  input TypeName cl;\n  input String state;\n\
      \  output Boolean bool;\nend deleteInitialState;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      state:
        className: String
        inputOutput: input
      bool:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.updateInitialState:
    restriction: function
    isFunction: true
    code: "function updateInitialState\n  input TypeName cl;\n  input String state;\n\
      \  input ExpressionOrModification annotate;\n  output Boolean bool;\nend updateInitialState;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      state:
        className: String
        inputOutput: input
      annotate:
        className: OpenModelica.$Code.ExpressionOrModification
        inputOutput: input
      bool:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.generateScriptingAPI:
    restriction: function
    isFunction: true
    code: "function generateScriptingAPI\n  input TypeName cl;\n  input String name;\n\
      \  output Boolean success;\n  output String moFile;\n  output String qtFile;\n\
      \  output String qtHeader;\nend generateScriptingAPI;"
    components:
      cl:
        className: OpenModelica.$Code.TypeName
        inputOutput: input
      name:
        className: String
        inputOutput: input
      success:
        className: Boolean
        inputOutput: output
      moFile:
        className: String
        inputOutput: output
      qtFile:
        className: String
        inputOutput: output
      qtHeader:
        className: String
        inputOutput: output
  OpenModelica.Scripting.oms_system:
    restriction: type
    isType: true
    isEnumeration: true
    code: type oms_system = enumeration(oms_system_none, oms_system_tlm, oms_system_wc,
      oms_system_sc);
  OpenModelica.Scripting.oms_causality:
    restriction: type
    isType: true
    isEnumeration: true
    code: type oms_causality = enumeration(oms_causality_input, oms_causality_output,
      oms_causality_parameter, oms_causality_bidir, oms_causality_undefined);
  OpenModelica.Scripting.oms_signal_type:
    restriction: type
    isType: true
    isEnumeration: true
    code: type oms_signal_type = enumeration(oms_signal_type_real, oms_signal_type_integer,
      oms_signal_type_boolean, oms_signal_type_string, oms_signal_type_enum, oms_signal_type_bus);
  OpenModelica.Scripting.oms_solver:
    restriction: type
    isType: true
    isEnumeration: true
    code: type oms_solver = enumeration(oms_solver_none, oms_solver_sc_min, oms_solver_sc_explicit_euler,
      oms_solver_sc_cvode, oms_solver_sc_max, oms_solver_wc_min, oms_solver_wc_ma,
      oms_solver_wc_mav, oms_solver_wc_assc, oms_solver_wc_mav2, oms_solver_wc_max);
  OpenModelica.Scripting.oms_tlm_domain:
    restriction: type
    isType: true
    isEnumeration: true
    code: type oms_tlm_domain = enumeration(oms_tlm_domain_input, oms_tlm_domain_output,
      oms_tlm_domain_mechanical, oms_tlm_domain_rotational, oms_tlm_domain_hydraulic,
      oms_tlm_domain_electric);
  OpenModelica.Scripting.oms_tlm_interpolation:
    restriction: type
    isType: true
    isEnumeration: true
    code: type oms_tlm_interpolation = enumeration(oms_tlm_no_interpolation, oms_tlm_coarse_grained,
      oms_tlm_fine_grained);
  OpenModelica.Scripting.oms_fault_type:
    restriction: type
    isType: true
    isEnumeration: true
    code: type oms_fault_type = enumeration(oms_fault_type_bias, oms_fault_type_gain,
      oms_fault_type_const);
  OpenModelica.Scripting.loadOMSimulator:
    restriction: function
    isFunction: true
    code: "function loadOMSimulator\n  output Integer status;\nend loadOMSimulator;"
    components:
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.unloadOMSimulator:
    restriction: function
    isFunction: true
    code: "function unloadOMSimulator\n  output Integer status;\nend unloadOMSimulator;"
    components:
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_addBus:
    restriction: function
    isFunction: true
    code: "function oms_addBus\n  input String cref;\n  output Integer status;\nend\
      \ oms_addBus;"
    components:
      cref:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_addConnection:
    restriction: function
    isFunction: true
    code: "function oms_addConnection\n  input String crefA;\n  input String crefB;\n\
      \  output Integer status;\nend oms_addConnection;"
    components:
      crefA:
        className: String
        inputOutput: input
      crefB:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_addConnector:
    restriction: function
    isFunction: true
    code: "function oms_addConnector\n  input String cref;\n  input oms_causality\
      \ causality;\n  input oms_signal_type type_;\n  output Integer status;\nend\
      \ oms_addConnector;"
    components:
      cref:
        className: String
        inputOutput: input
      causality:
        className: OpenModelica.Scripting.oms_causality
        inputOutput: input
      type_:
        className: OpenModelica.Scripting.oms_signal_type
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_addConnectorToBus:
    restriction: function
    isFunction: true
    code: "function oms_addConnectorToBus\n  input String busCref;\n  input String\
      \ connectorCref;\n  output Integer status;\nend oms_addConnectorToBus;"
    components:
      busCref:
        className: String
        inputOutput: input
      connectorCref:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_addConnectorToTLMBus:
    restriction: function
    isFunction: true
    code: "function oms_addConnectorToTLMBus\n  input String busCref;\n  input String\
      \ connectorCref;\n  input String type_;\n  output Integer status;\nend oms_addConnectorToTLMBus;"
    components:
      busCref:
        className: String
        inputOutput: input
      connectorCref:
        className: String
        inputOutput: input
      type_:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_addDynamicValueIndicator:
    restriction: function
    isFunction: true
    code: "function oms_addDynamicValueIndicator\n  input String signal;\n  input\
      \ String lower;\n  input String upper;\n  input Real stepSize;\n  output Integer\
      \ status;\nend oms_addDynamicValueIndicator;"
    components:
      signal:
        className: String
        inputOutput: input
      lower:
        className: String
        inputOutput: input
      upper:
        className: String
        inputOutput: input
      stepSize:
        className: Real
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_addEventIndicator:
    restriction: function
    isFunction: true
    code: "function oms_addEventIndicator\n  input String signal;\n  output Integer\
      \ status;\nend oms_addEventIndicator;"
    components:
      signal:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_addExternalModel:
    restriction: function
    isFunction: true
    code: "function oms_addExternalModel\n  input String cref;\n  input String path;\n\
      \  input String startscript;\n  output Integer status;\nend oms_addExternalModel;"
    components:
      cref:
        className: String
        inputOutput: input
      path:
        className: String
        inputOutput: input
      startscript:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_addSignalsToResults:
    restriction: function
    isFunction: true
    code: "function oms_addSignalsToResults\n  input String cref;\n  input String\
      \ regex;\n  output Integer status;\nend oms_addSignalsToResults;"
    components:
      cref:
        className: String
        inputOutput: input
      regex:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_addStaticValueIndicator:
    restriction: function
    isFunction: true
    code: "function oms_addStaticValueIndicator\n  input String signal;\n  input Real\
      \ lower;\n  input Real upper;\n  input Real stepSize;\n  output Integer status;\n\
      end oms_addStaticValueIndicator;"
    components:
      signal:
        className: String
        inputOutput: input
      lower:
        className: Real
        inputOutput: input
      upper:
        className: Real
        inputOutput: input
      stepSize:
        className: Real
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_addSubModel:
    restriction: function
    isFunction: true
    code: "function oms_addSubModel\n  input String cref;\n  input String fmuPath;\n\
      \  output Integer status;\nend oms_addSubModel;"
    components:
      cref:
        className: String
        inputOutput: input
      fmuPath:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_addSystem:
    restriction: function
    isFunction: true
    code: "function oms_addSystem\n  input String cref;\n  input oms_system type_;\n\
      \  output Integer status;\nend oms_addSystem;"
    components:
      cref:
        className: String
        inputOutput: input
      type_:
        className: OpenModelica.Scripting.oms_system
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_addTimeIndicator:
    restriction: function
    isFunction: true
    code: "function oms_addTimeIndicator\n  input String signal;\n  output Integer\
      \ status;\nend oms_addTimeIndicator;"
    components:
      signal:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_addTLMBus:
    restriction: function
    isFunction: true
    code: "function oms_addTLMBus\n  input String cref;\n  input oms_tlm_domain domain;\n\
      \  input Integer dimensions;\n  input oms_tlm_interpolation interpolation;\n\
      \  output Integer status;\nend oms_addTLMBus;"
    components:
      cref:
        className: String
        inputOutput: input
      domain:
        className: OpenModelica.Scripting.oms_tlm_domain
        inputOutput: input
      dimensions:
        className: Integer
        inputOutput: input
      interpolation:
        className: OpenModelica.Scripting.oms_tlm_interpolation
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_addTLMConnection:
    restriction: function
    isFunction: true
    code: "function oms_addTLMConnection\n  input String crefA;\n  input String crefB;\n\
      \  input Real delay;\n  input Real alpha;\n  input Real linearimpedance;\n \
      \ input Real angularimpedance;\n  output Integer status;\nend oms_addTLMConnection;"
    components:
      crefA:
        className: String
        inputOutput: input
      crefB:
        className: String
        inputOutput: input
      delay:
        className: Real
        inputOutput: input
      alpha:
        className: Real
        inputOutput: input
      linearimpedance:
        className: Real
        inputOutput: input
      angularimpedance:
        className: Real
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_cancelSimulation_asynchronous:
    restriction: function
    isFunction: true
    code: "function oms_cancelSimulation_asynchronous\n  input String cref;\n  output\
      \ Integer status;\nend oms_cancelSimulation_asynchronous;"
    components:
      cref:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_compareSimulationResults:
    restriction: function
    isFunction: true
    code: "function oms_compareSimulationResults\n  input String filenameA;\n  input\
      \ String filenameB;\n  input String var;\n  input Real relTol;\n  input Real\
      \ absTol;\n  output Integer status;\nend oms_compareSimulationResults;"
    components:
      filenameA:
        className: String
        inputOutput: input
      filenameB:
        className: String
        inputOutput: input
      var:
        className: String
        inputOutput: input
      relTol:
        className: Real
        inputOutput: input
      absTol:
        className: Real
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_copySystem:
    restriction: function
    isFunction: true
    code: "function oms_copySystem\n  input String source;\n  input String target;\n\
      \  output Integer status;\nend oms_copySystem;"
    components:
      source:
        className: String
        inputOutput: input
      target:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_delete:
    restriction: function
    isFunction: true
    code: "function oms_delete\n  input String cref;\n  output Integer status;\nend\
      \ oms_delete;"
    components:
      cref:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_deleteConnection:
    restriction: function
    isFunction: true
    code: "function oms_deleteConnection\n  input String crefA;\n  input String crefB;\n\
      \  output Integer status;\nend oms_deleteConnection;"
    components:
      crefA:
        className: String
        inputOutput: input
      crefB:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_deleteConnectorFromBus:
    restriction: function
    isFunction: true
    code: "function oms_deleteConnectorFromBus\n  input String busCref;\n  input String\
      \ connectorCref;\n  output Integer status;\nend oms_deleteConnectorFromBus;"
    components:
      busCref:
        className: String
        inputOutput: input
      connectorCref:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_deleteConnectorFromTLMBus:
    restriction: function
    isFunction: true
    code: "function oms_deleteConnectorFromTLMBus\n  input String busCref;\n  input\
      \ String connectorCref;\n  output Integer status;\nend oms_deleteConnectorFromTLMBus;"
    components:
      busCref:
        className: String
        inputOutput: input
      connectorCref:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_export:
    restriction: function
    isFunction: true
    code: "function oms_export\n  input String cref;\n  input String filename;\n \
      \ output Integer status;\nend oms_export;"
    components:
      cref:
        className: String
        inputOutput: input
      filename:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_exportDependencyGraphs:
    restriction: function
    isFunction: true
    code: "function oms_exportDependencyGraphs\n  input String cref;\n  input String\
      \ initialization;\n  input String event;\n  input String simulation;\n  output\
      \ Integer status;\nend oms_exportDependencyGraphs;"
    components:
      cref:
        className: String
        inputOutput: input
      initialization:
        className: String
        inputOutput: input
      event:
        className: String
        inputOutput: input
      simulation:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_exportSnapshot:
    restriction: function
    isFunction: true
    code: "function oms_exportSnapshot\n  input String cref;\n  output String contents;\n\
      \  output Integer status;\nend oms_exportSnapshot;"
    components:
      cref:
        className: String
        inputOutput: input
      contents:
        className: String
        inputOutput: output
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_extractFMIKind:
    restriction: function
    isFunction: true
    code: "function oms_extractFMIKind\n  input String filename;\n  output Integer\
      \ kind;\n  output Integer status;\nend oms_extractFMIKind;"
    components:
      filename:
        className: String
        inputOutput: input
      kind:
        className: Integer
        inputOutput: output
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_getBoolean:
    restriction: function
    isFunction: true
    code: "function oms_getBoolean\n  input String cref;\n  output Boolean value;\n\
      \  output Integer status;\nend oms_getBoolean;"
    components:
      cref:
        className: String
        inputOutput: input
      value:
        className: Boolean
        inputOutput: output
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_getFixedStepSize:
    restriction: function
    isFunction: true
    code: "function oms_getFixedStepSize\n  input String cref;\n  output Real stepSize;\n\
      \  output Integer status;\nend oms_getFixedStepSize;"
    components:
      cref:
        className: String
        inputOutput: input
      stepSize:
        className: Real
        inputOutput: output
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_getInteger:
    restriction: function
    isFunction: true
    code: "function oms_getInteger\n  input String cref;\n  input Integer value;\n\
      \  output Integer status;\nend oms_getInteger;"
    components:
      cref:
        className: String
        inputOutput: input
      value:
        className: Integer
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_getModelState:
    restriction: function
    isFunction: true
    code: "function oms_getModelState\n  input String cref;\n  output Integer modelState;\n\
      \  output Integer status;\nend oms_getModelState;"
    components:
      cref:
        className: String
        inputOutput: input
      modelState:
        className: Integer
        inputOutput: output
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_getReal:
    restriction: function
    isFunction: true
    code: "function oms_getReal\n  input String cref;\n  output Real value;\n  output\
      \ Integer status;\nend oms_getReal;"
    components:
      cref:
        className: String
        inputOutput: input
      value:
        className: Real
        inputOutput: output
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_getSolver:
    restriction: function
    isFunction: true
    code: "function oms_getSolver\n  input String cref;\n  output Integer solver;\n\
      \  output Integer status;\nend oms_getSolver;"
    components:
      cref:
        className: String
        inputOutput: input
      solver:
        className: Integer
        inputOutput: output
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_getStartTime:
    restriction: function
    isFunction: true
    code: "function oms_getStartTime\n  input String cref;\n  output Real startTime;\n\
      \  output Integer status;\nend oms_getStartTime;"
    components:
      cref:
        className: String
        inputOutput: input
      startTime:
        className: Real
        inputOutput: output
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_getStopTime:
    restriction: function
    isFunction: true
    code: "function oms_getStopTime\n  input String cref;\n  output Real stopTime;\n\
      \  output Integer status;\nend oms_getStopTime;"
    components:
      cref:
        className: String
        inputOutput: input
      stopTime:
        className: Real
        inputOutput: output
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_getSubModelPath:
    restriction: function
    isFunction: true
    code: "function oms_getSubModelPath\n  input String cref;\n  output String path;\n\
      \  output Integer status;\nend oms_getSubModelPath;"
    components:
      cref:
        className: String
        inputOutput: input
      path:
        className: String
        inputOutput: output
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_getSystemType:
    restriction: function
    isFunction: true
    code: "function oms_getSystemType\n  input String cref;\n  output Integer type_;\n\
      \  output Integer status;\nend oms_getSystemType;"
    components:
      cref:
        className: String
        inputOutput: input
      type_:
        className: Integer
        inputOutput: output
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_getTolerance:
    restriction: function
    isFunction: true
    code: "function oms_getTolerance\n  input String cref;\n  output Real absoluteTolerance;\n\
      \  output Real relativeTolerance;\n  output Integer status;\nend oms_getTolerance;"
    components:
      cref:
        className: String
        inputOutput: input
      absoluteTolerance:
        className: Real
        inputOutput: output
      relativeTolerance:
        className: Real
        inputOutput: output
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_getVariableStepSize:
    restriction: function
    isFunction: true
    code: "function oms_getVariableStepSize\n  input String cref;\n  output Real initialStepSize;\n\
      \  output Real minimumStepSize;\n  output Real maximumStepSize;\n  output Integer\
      \ status;\nend oms_getVariableStepSize;"
    components:
      cref:
        className: String
        inputOutput: input
      initialStepSize:
        className: Real
        inputOutput: output
      minimumStepSize:
        className: Real
        inputOutput: output
      maximumStepSize:
        className: Real
        inputOutput: output
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_faultInjection:
    restriction: function
    isFunction: true
    code: "function oms_faultInjection\n  input String signal;\n  input oms_fault_type\
      \ faultType;\n  input Real faultValue;\n  output Integer status;\nend oms_faultInjection;"
    components:
      signal:
        className: String
        inputOutput: input
      faultType:
        className: OpenModelica.Scripting.oms_fault_type
        inputOutput: input
      faultValue:
        className: Real
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_importFile:
    restriction: function
    isFunction: true
    code: "function oms_importFile\n  input String filename;\n  output String cref;\n\
      \  output Integer status;\nend oms_importFile;"
    components:
      filename:
        className: String
        inputOutput: input
      cref:
        className: String
        inputOutput: output
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_importSnapshot:
    restriction: function
    isFunction: true
    code: "function oms_importSnapshot\n  input String cref;\n  input String snapshot;\n\
      \  output Integer status;\nend oms_importSnapshot;"
    components:
      cref:
        className: String
        inputOutput: input
      snapshot:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_initialize:
    restriction: function
    isFunction: true
    code: "function oms_initialize\n  input String cref;\n  output Integer status;\n\
      end oms_initialize;"
    components:
      cref:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_instantiate:
    restriction: function
    isFunction: true
    code: "function oms_instantiate\n  input String cref;\n  output Integer status;\n\
      end oms_instantiate;"
    components:
      cref:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_list:
    restriction: function
    isFunction: true
    code: "function oms_list\n  input String cref;\n  output String contents;\n  output\
      \ Integer status;\nend oms_list;"
    components:
      cref:
        className: String
        inputOutput: input
      contents:
        className: String
        inputOutput: output
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_listUnconnectedConnectors:
    restriction: function
    isFunction: true
    code: "function oms_listUnconnectedConnectors\n  input String cref;\n  output\
      \ String contents;\n  output Integer status;\nend oms_listUnconnectedConnectors;"
    components:
      cref:
        className: String
        inputOutput: input
      contents:
        className: String
        inputOutput: output
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_loadSnapshot:
    restriction: function
    isFunction: true
    code: "function oms_loadSnapshot\n  input String cref;\n  input String snapshot;\n\
      \  output Integer status;\nend oms_loadSnapshot;"
    components:
      cref:
        className: String
        inputOutput: input
      snapshot:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_newModel:
    restriction: function
    isFunction: true
    code: "function oms_newModel\n  input String cref;\n  output Integer status;\n\
      end oms_newModel;"
    components:
      cref:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_parseModelName:
    restriction: function
    isFunction: true
    code: "function oms_parseModelName\n  input String contents;\n  output String\
      \ cref;\n  output Integer status;\nend oms_parseModelName;"
    components:
      contents:
        className: String
        inputOutput: input
      cref:
        className: String
        inputOutput: output
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_removeSignalsFromResults:
    restriction: function
    isFunction: true
    code: "function oms_removeSignalsFromResults\n  input String cref;\n  input String\
      \ regex;\n  output Integer status;\nend oms_removeSignalsFromResults;"
    components:
      cref:
        className: String
        inputOutput: input
      regex:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_rename:
    restriction: function
    isFunction: true
    code: "function oms_rename\n  input String cref;\n  input String newCref;\n  output\
      \ Integer status;\nend oms_rename;"
    components:
      cref:
        className: String
        inputOutput: input
      newCref:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_reset:
    restriction: function
    isFunction: true
    code: "function oms_reset\n  input String cref;\n  output Integer status;\nend\
      \ oms_reset;"
    components:
      cref:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_RunFile:
    restriction: function
    isFunction: true
    code: "function oms_RunFile\n  input String filename;\n  output Integer status;\n\
      end oms_RunFile;"
    components:
      filename:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setBoolean:
    restriction: function
    isFunction: true
    code: "function oms_setBoolean\n  input String cref;\n  input Boolean value;\n\
      \  output Integer status;\nend oms_setBoolean;"
    components:
      cref:
        className: String
        inputOutput: input
      value:
        className: Boolean
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setCommandLineOption:
    restriction: function
    isFunction: true
    code: "function oms_setCommandLineOption\n  input String cmd;\n  output Integer\
      \ status;\nend oms_setCommandLineOption;"
    components:
      cmd:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setFixedStepSize:
    restriction: function
    isFunction: true
    code: "function oms_setFixedStepSize\n  input String cref;\n  input Real stepSize;\n\
      \  output Integer status;\nend oms_setFixedStepSize;"
    components:
      cref:
        className: String
        inputOutput: input
      stepSize:
        className: Real
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setInteger:
    restriction: function
    isFunction: true
    code: "function oms_setInteger\n  input String cref;\n  input Integer value;\n\
      \  output Integer status;\nend oms_setInteger;"
    components:
      cref:
        className: String
        inputOutput: input
      value:
        className: Integer
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setLogFile:
    restriction: function
    isFunction: true
    code: "function oms_setLogFile\n  input String filename;\n  output Integer status;\n\
      end oms_setLogFile;"
    components:
      filename:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setLoggingInterval:
    restriction: function
    isFunction: true
    code: "function oms_setLoggingInterval\n  input String cref;\n  input Real loggingInterval;\n\
      \  output Integer status;\nend oms_setLoggingInterval;"
    components:
      cref:
        className: String
        inputOutput: input
      loggingInterval:
        className: Real
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setLoggingLevel:
    restriction: function
    isFunction: true
    code: "function oms_setLoggingLevel\n  input Integer logLevel;\n  output Integer\
      \ status;\nend oms_setLoggingLevel;"
    components:
      logLevel:
        className: Integer
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setReal:
    restriction: function
    isFunction: true
    code: "function oms_setReal\n  input String cref;\n  input Real value;\n  output\
      \ Integer status;\nend oms_setReal;"
    components:
      cref:
        className: String
        inputOutput: input
      value:
        className: Real
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setRealInputDerivative:
    restriction: function
    isFunction: true
    code: "function oms_setRealInputDerivative\n  input String cref;\n  input Real\
      \ value;\n  output Integer status;\nend oms_setRealInputDerivative;"
    components:
      cref:
        className: String
        inputOutput: input
      value:
        className: Real
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setResultFile:
    restriction: function
    isFunction: true
    code: "function oms_setResultFile\n  input String cref;\n  input String filename;\n\
      \  input Integer bufferSize;\n  output Integer status;\nend oms_setResultFile;"
    components:
      cref:
        className: String
        inputOutput: input
      filename:
        className: String
        inputOutput: input
      bufferSize:
        className: Integer
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setSignalFilter:
    restriction: function
    isFunction: true
    code: "function oms_setSignalFilter\n  input String cref;\n  input String regex;\n\
      \  output Integer status;\nend oms_setSignalFilter;"
    components:
      cref:
        className: String
        inputOutput: input
      regex:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setSolver:
    restriction: function
    isFunction: true
    code: "function oms_setSolver\n  input String cref;\n  input oms_solver solver;\n\
      \  output Integer status;\nend oms_setSolver;"
    components:
      cref:
        className: String
        inputOutput: input
      solver:
        className: OpenModelica.Scripting.oms_solver
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setStartTime:
    restriction: function
    isFunction: true
    code: "function oms_setStartTime\n  input String cref;\n  input Real startTime;\n\
      \  output Integer status;\nend oms_setStartTime;"
    components:
      cref:
        className: String
        inputOutput: input
      startTime:
        className: Real
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setStopTime:
    restriction: function
    isFunction: true
    code: "function oms_setStopTime\n  input String cref;\n  input Real stopTime;\n\
      \  output Integer status;\nend oms_setStopTime;"
    components:
      cref:
        className: String
        inputOutput: input
      stopTime:
        className: Real
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setTempDirectory:
    restriction: function
    isFunction: true
    code: "function oms_setTempDirectory\n  input String newTempDir;\n  output Integer\
      \ status;\nend oms_setTempDirectory;"
    components:
      newTempDir:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setTLMPositionAndOrientation:
    restriction: function
    isFunction: true
    code: "function oms_setTLMPositionAndOrientation\n  input String cref;\n  input\
      \ Real x1;\n  input Real x2;\n  input Real x3;\n  input Real A11;\n  input Real\
      \ A12;\n  input Real A13;\n  input Real A21;\n  input Real A22;\n  input Real\
      \ A23;\n  input Real A31;\n  input Real A32;\n  input Real A33;\n  output Integer\
      \ status;\nend oms_setTLMPositionAndOrientation;"
    components:
      cref:
        className: String
        inputOutput: input
      x1:
        className: Real
        inputOutput: input
      x2:
        className: Real
        inputOutput: input
      x3:
        className: Real
        inputOutput: input
      A11:
        className: Real
        inputOutput: input
      A12:
        className: Real
        inputOutput: input
      A13:
        className: Real
        inputOutput: input
      A21:
        className: Real
        inputOutput: input
      A22:
        className: Real
        inputOutput: input
      A23:
        className: Real
        inputOutput: input
      A31:
        className: Real
        inputOutput: input
      A32:
        className: Real
        inputOutput: input
      A33:
        className: Real
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setTLMSocketData:
    restriction: function
    isFunction: true
    code: "function oms_setTLMSocketData\n  input String cref;\n  input String address;\n\
      \  input Integer managerPort;\n  input Integer monitorPort;\n  output Integer\
      \ status;\nend oms_setTLMSocketData;"
    components:
      cref:
        className: String
        inputOutput: input
      address:
        className: String
        inputOutput: input
      managerPort:
        className: Integer
        inputOutput: input
      monitorPort:
        className: Integer
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setTolerance:
    restriction: function
    isFunction: true
    code: "function oms_setTolerance\n  input String cref;\n  input Real absoluteTolerance;\n\
      \  input Real relativeTolerance;\n  output Integer status;\nend oms_setTolerance;"
    components:
      cref:
        className: String
        inputOutput: input
      absoluteTolerance:
        className: Real
        inputOutput: input
      relativeTolerance:
        className: Real
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setVariableStepSize:
    restriction: function
    isFunction: true
    code: "function oms_setVariableStepSize\n  input String cref;\n  input Real initialStepSize;\n\
      \  input Real minimumStepSize;\n  input Real maximumStepSize;\n  output Integer\
      \ status;\nend oms_setVariableStepSize;"
    components:
      cref:
        className: String
        inputOutput: input
      initialStepSize:
        className: Real
        inputOutput: input
      minimumStepSize:
        className: Real
        inputOutput: input
      maximumStepSize:
        className: Real
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_setWorkingDirectory:
    restriction: function
    isFunction: true
    code: "function oms_setWorkingDirectory\n  input String newWorkingDir;\n  output\
      \ Integer status;\nend oms_setWorkingDirectory;"
    components:
      newWorkingDir:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_simulate:
    restriction: function
    isFunction: true
    code: "function oms_simulate\n  input String cref;\n  output Integer status;\n\
      end oms_simulate;"
    components:
      cref:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_stepUntil:
    restriction: function
    isFunction: true
    code: "function oms_stepUntil\n  input String cref;\n  input Real stopTime;\n\
      \  output Integer status;\nend oms_stepUntil;"
    components:
      cref:
        className: String
        inputOutput: input
      stopTime:
        className: Real
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_terminate:
    restriction: function
    isFunction: true
    code: "function oms_terminate\n  input String cref;\n  output Integer status;\n\
      end oms_terminate;"
    components:
      cref:
        className: String
        inputOutput: input
      status:
        className: Integer
        inputOutput: output
  OpenModelica.Scripting.oms_getVersion:
    restriction: function
    isFunction: true
    code: "function oms_getVersion\n  output String version;\nend oms_getVersion;"
    components:
      version:
        className: String
        inputOutput: output
  OpenModelica.Scripting.Experimental:
    restriction: package
    isPackage: true
  OpenModelica.Scripting.Experimental.relocateFunctions:
    restriction: function
    isFunction: true
    code: "function relocateFunctions\n  input String fileName;\n  input String names[:,\
      \ 2];\n  output Boolean success;\nend relocateFunctions;"
    components:
      fileName:
        className: String
        inputOutput: input
      names:
        className: String
        inputOutput: input
        dimensions:
        - ':'
        - '2'
      success:
        className: Boolean
        inputOutput: output
  OpenModelica.Scripting.Experimental.toJulia:
    restriction: function
    isFunction: true
    code: "function toJulia\n  output String res;\nend toJulia;"
    components:
      res:
        className: String
        inputOutput: output
  OpenModelica.Scripting.Experimental.interactiveDumpAbsynToJL:
    restriction: function
    isFunction: true
    code: "function interactiveDumpAbsynToJL\n  output String res;\nend interactiveDumpAbsynToJL;"
    components:
      res:
        className: String
        inputOutput: output
  OpenModelica.UsersGuide:
    restriction: package
    isPackage: true
  OpenModelica.UsersGuide.ReleaseNotes:
    restriction: package
    isPackage: true
  OpenModelica.AutoCompletion:
    restriction: package
    isPackage: true
  OpenModelica.AutoCompletion.Annotations:
    restriction: package
    isPackage: true
  OpenModelica.AutoCompletion.Annotations.Documentation:
    restriction: record
    isRecord: true
    code: "record Documentation \"Defines the documentation.\"\n  String info \"The\
      \ textual description of the class.\";\n  String revisions \"A list of revisions\
      \ and other annotations defined by a tool.\";\nend Documentation;"
    components:
      info:
        className: String
      revisions:
        className: String
  OpenModelica.AutoCompletion.Annotations.experiment:
    restriction: record
    isRecord: true
    code: "record experiment \"Define default experiment parameters.\"\n  Real StartTime(unit\
      \ = \"s\") = 0 \"Default start time of simulation.\";\n  Real StopTime(unit\
      \ = \"s\") = 1 \"Default stop time of simulation.\";\n  Real Interval(unit =\
      \ \"s\", min = 0) = 0.002 \"Resolution for the result grid.\";\n  Real Tolerance(min\
      \ = 0) = 1e-6 \"Default relative integration tolerance.\";\nend experiment;"
    components:
      StartTime:
        className: Real
      StopTime:
        className: Real
      Interval:
        className: Real
      Tolerance:
        className: Real
  OpenModelica.AutoCompletion.Annotations.Dialog:
    restriction: record
    isRecord: true
    code: "record Dialog\n  parameter String tab = \"General\";\n  parameter String\
      \ group = \"Parameters\";\n  parameter Boolean enable = true;\n  parameter Boolean\
      \ showStartAttribute = false;\n  parameter Boolean colorSelector = false;\n\
      \  parameter Selector loadSelector;\n  parameter Selector saveSelector;\n  parameter\
      \ String groupImage = \"\";\n  parameter Boolean connectorSizing = false;\n\
      end Dialog;"
    components:
      tab:
        className: String
      group:
        className: String
      enable:
        className: Boolean
      showStartAttribute:
        className: Boolean
      colorSelector:
        className: Boolean
      loadSelector:
        className: OpenModelica.AutoCompletion.Annotations.Selector
      saveSelector:
        className: OpenModelica.AutoCompletion.Annotations.Selector
      groupImage:
        className: String
      connectorSizing:
        className: Boolean
  OpenModelica.AutoCompletion.Annotations.Selector:
    restriction: record
    isRecord: true
    code: "record Selector\n  parameter String filter = \"\";\n  parameter String\
      \ caption = \"\";\nend Selector;"
    components:
      filter:
        className: String
      caption:
        className: String
  OpenModelica.AutoCompletion.Annotations.uses:
    restriction: record
    isRecord: true
    code: 'record uses "A list of dependent classes."

      end uses;'
    components: {}
  OpenModelica.AutoCompletion.Annotations.Access:
    restriction: type
    isType: true
    isEnumeration: true
    code: type Access = enumeration(hide, icon, documentation, diagram, nonPackageText,
      nonPackageDuplicate, packageText, packageDuplicate);
  OpenModelica.AutoCompletion.Annotations.Protection:
    restriction: record
    isRecord: true
    code: "record Protection \"Protection of class\"\n  Access access \"Defines what\
      \ parts of a class are visible.\";\n  String features[:] = fill(\"\", 0) \"\
      Required license features\";\n\n  record License\n    String libraryKey;\n \
      \   String licenseFile = \"\" \"Optional, default mapping if empty\";\n  end\
      \ License;\nend Protection;"
    components:
      access:
        className: OpenModelica.AutoCompletion.Annotations.Access
      features:
        className: String
        dimensions:
        - ':'
  OpenModelica.AutoCompletion.Annotations.Protection.License:
    restriction: record
    isRecord: true
    code: "record License\n  String libraryKey;\n  String licenseFile = \"\" \"Optional,\
      \ default mapping if empty\";\nend License;"
    components:
      libraryKey:
        className: String
      licenseFile:
        className: String
  OpenModelica.AutoCompletion.Annotations.Authorization:
    restriction: record
    isRecord: true
    code: "record Authorization\n  String licensor = \"\" \"Optional string to show\
      \ information about the licensor\";\n  String libraryKey \"Matching the key\
      \ in the class. Must be encrypted and not visible\";\n  License license[:] \"\
      Definition of the license options and of the access rights\";\nend Authorization;"
    components:
      licensor:
        className: String
      libraryKey:
        className: String
      license:
        className: OpenModelica.AutoCompletion.Annotations.License
        dimensions:
        - ':'
  OpenModelica.AutoCompletion.Annotations.License:
    restriction: record
    isRecord: true
    code: "record License\n  String licensee = \"\" \"Optional string to show information\
      \ about the licensee\";\n  String id[:] \"Unique machine identifications, e.g.\
      \ MAC addresses\";\n  String features[:] = fill(\"\", 0) \"Activated library\
      \ license features\";\n  String startDate = \"\" \"Optional start date in UTCformat\
      \ YYYY-MM-DD\";\n  String expirationDate = \"\" \"Optional expiration date in\
      \ UTCformat YYYY-MM-DD\";\n  String operations[:] = fill(\"\", 0) \"Library\
      \ usage conditions\";\nend License;"
    components:
      licensee:
        className: String
      id:
        className: String
        dimensions:
        - ':'
      features:
        className: String
        dimensions:
        - ':'
      startDate:
        className: String
      expirationDate:
        className: String
      operations:
        className: String
        dimensions:
        - ':'
  OpenModelica.AutoCompletion.Annotations.inverse:
    restriction: record
    isRecord: true
    code: 'record inverse

      end inverse;'
    components: {}
  OpenModelica.AutoCompletion.Annotations.choices:
    restriction: record
    isRecord: true
    code: "record choices \"Defines a suitable redeclaration or modifications of the\
      \ element.\"\n  Boolean checkBox = true \"Display a checkbox to input the values\
      \ false or true in the graphical user interface.\";\n  // TODO: how to handle\
      \ choice?\nend choices;"
    components:
      checkBox:
        className: Boolean
  OpenModelica.AutoCompletion.Annotations.derivative:
    restriction: record
    isRecord: true
    code: "record derivative\n  Integer order = 1;\n  String noDerivative;\n  String\
      \ zeroDerivative;\nend derivative;"
    components:
      order:
        className: Integer
      noDerivative:
        className: String
      zeroDerivative:
        className: String
  OpenModelica.AutoCompletion.Annotations.__OpenModelica_commandLineOptions:
    restriction: record
    isRecord: true
    code: 'record __OpenModelica_commandLineOptions

      end __OpenModelica_commandLineOptions;'
    components: {}
  OpenModelica.AutoCompletion.Annotations.__OpenModelica_simulationFlags:
    restriction: record
    isRecord: true
    code: 'record __OpenModelica_simulationFlags

      end __OpenModelica_simulationFlags;'
    components: {}
